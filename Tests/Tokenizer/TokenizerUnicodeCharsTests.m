// This file was autogenerated from Tests/html5lib/tokenizer/unicodeChars.test

#import <XCTest/XCTest.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerUnicodeCharsTests : XCTestCase

@end

@implementation TokenizerUnicodeCharsTests
        
- (void)test000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0001]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0001]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0001");
    }
}
        
- (void)test001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0002]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0002]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0002");
    }
}
        
- (void)test002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0003]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0003]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0003");
    }
}
        
- (void)test003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0004]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0004]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0004");
    }
}
        
- (void)test004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0005]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0005]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0005");
    }
}
        
- (void)test005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0006]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0006]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0006");
    }
}
        
- (void)test006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0007]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0007]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0007");
    }
}
        
- (void)test007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"\b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\b"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0008");
    }
}
        
- (void)test008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+000B");
    }
}
        
- (void)test009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x000e]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x000e]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+000E");
    }
}
        
- (void)test010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x000f]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x000f]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+000F");
    }
}
        
- (void)test011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0010]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0010]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0010");
    }
}
        
- (void)test012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0011]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0011]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0011");
    }
}
        
- (void)test013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0012]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0012]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0012");
    }
}
        
- (void)test014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0013]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0013]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0013");
    }
}
        
- (void)test015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0014]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0014]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0014");
    }
}
        
- (void)test016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0015]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0015]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0015");
    }
}
        
- (void)test017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0016]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0016]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0016");
    }
}
        
- (void)test018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0017]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0017]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0017");
    }
}
        
- (void)test019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0018]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0018]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0018");
    }
}
        
- (void)test020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0019]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0019]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+0019");
    }
}
        
- (void)test021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001a]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x001a]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+001A");
    }
}
        
- (void)test022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x001b]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+001B");
    }
}
        
- (void)test023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001c]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x001c]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+001C");
    }
}
        
- (void)test024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001d]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x001d]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+001D");
    }
}
        
- (void)test025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001e]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x001e]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+001E");
    }
}
        
- (void)test026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001f]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+001F");
    }
}
        
- (void)test027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@""];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+007F");
    }
}
        
- (void)test028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷐"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷐"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD0");
    }
}
        
- (void)test029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷑"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD1");
    }
}
        
- (void)test030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷒"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷒"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD2");
    }
}
        
- (void)test031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷓"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷓"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD3");
    }
}
        
- (void)test032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷔"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷔"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD4");
    }
}
        
- (void)test033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷕"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷕"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD5");
    }
}
        
- (void)test034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷖"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷖"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD6");
    }
}
        
- (void)test035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷗"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷗"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD7");
    }
}
        
- (void)test036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷘"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷘"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD8");
    }
}
        
- (void)test037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷙"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷙"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDD9");
    }
}
        
- (void)test038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷚"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷚"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDDA");
    }
}
        
- (void)test039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷛"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷛"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDDB");
    }
}
        
- (void)test040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷜"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷜"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDDC");
    }
}
        
- (void)test041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷝"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷝"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDDD");
    }
}
        
- (void)test042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷞"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDDE");
    }
}
        
- (void)test043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷟"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷟"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDDF");
    }
}
        
- (void)test044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷠"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE0");
    }
}
        
- (void)test045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷡"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷡"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE1");
    }
}
        
- (void)test046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷢"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE2");
    }
}
        
- (void)test047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷣"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷣"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE3");
    }
}
        
- (void)test048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷤"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE4");
    }
}
        
- (void)test049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷥"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE5");
    }
}
        
- (void)test050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷦"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷦"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE6");
    }
}
        
- (void)test051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷧"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷧"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE7");
    }
}
        
- (void)test052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷨"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE8");
    }
}
        
- (void)test053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷩"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷩"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDE9");
    }
}
        
- (void)test054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷪"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷪"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDEA");
    }
}
        
- (void)test055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷫"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDEB");
    }
}
        
- (void)test056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷬"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷬"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDEC");
    }
}
        
- (void)test057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷭"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷭"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDED");
    }
}
        
- (void)test058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷮"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷮"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDEE");
    }
}
        
- (void)test059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"﷯"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷯"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FDEF");
    }
}
        
- (void)test060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"￾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"￾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FFFE");
    }
}
        
- (void)test061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"￿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"￿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FFFF");
    }
}
        
- (void)test062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"🿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"🿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+1FFFE");
    }
}
        
- (void)test063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"🿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"🿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+1FFFF");
    }
}
        
- (void)test064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"𯿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𯿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+2FFFE");
    }
}
        
- (void)test065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"𯿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𯿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+2FFFF");
    }
}
        
- (void)test066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"𿿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𿿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+3FFFE");
    }
}
        
- (void)test067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"𿿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𿿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+3FFFF");
    }
}
        
- (void)test068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񏿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񏿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+4FFFE");
    }
}
        
- (void)test069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񏿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񏿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+4FFFF");
    }
}
        
- (void)test070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񟿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񟿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+5FFFE");
    }
}
        
- (void)test071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񟿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񟿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+5FFFF");
    }
}
        
- (void)test072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񯿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񯿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+6FFFE");
    }
}
        
- (void)test073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񯿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񯿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+6FFFF");
    }
}
        
- (void)test074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񿿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񿿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+7FFFE");
    }
}
        
- (void)test075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"񿿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񿿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+7FFFF");
    }
}
        
- (void)test076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򏿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򏿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+8FFFE");
    }
}
        
- (void)test077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򏿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򏿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+8FFFF");
    }
}
        
- (void)test078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򟿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򟿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+9FFFE");
    }
}
        
- (void)test079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򟿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򟿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+9FFFF");
    }
}
        
- (void)test080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򯿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򯿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+AFFFE");
    }
}
        
- (void)test081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򯿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򯿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+AFFFF");
    }
}
        
- (void)test082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򿿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򿿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+BFFFE");
    }
}
        
- (void)test083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"򿿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򿿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+BFFFF");
    }
}
        
- (void)test084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󏿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󏿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+CFFFE");
    }
}
        
- (void)test085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󏿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󏿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+CFFFF");
    }
}
        
- (void)test086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󟿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󟿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+DFFFE");
    }
}
        
- (void)test087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󟿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󟿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+DFFFF");
    }
}
        
- (void)test088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󯿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󯿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+EFFFE");
    }
}
        
- (void)test089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󯿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󯿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+EFFFF");
    }
}
        
- (void)test090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󿿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󿿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FFFFE");
    }
}
        
- (void)test091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"󿿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󿿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+FFFFF");
    }
}
        
- (void)test092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"􏿾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"􏿾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+10FFFE");
    }
}
        
- (void)test093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"􏿿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"􏿿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid Unicode character U+10FFFF");
    }
}
        
- (void)test094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\t"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0009");
    }
}
        
- (void)test095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\n"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+000A");
    }
}
        
- (void)test096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@" "];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0020");
    }
}
        
- (void)test097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"!"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0021");
    }
}
        
- (void)test098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\""];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0022");
    }
}
        
- (void)test099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"#"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"#"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0023");
    }
}
        
- (void)test100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"$"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"$"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0024");
    }
}
        
- (void)test101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"%"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"%"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0025");
    }
}
        
- (void)test102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0026");
    }
}
        
- (void)test103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"'"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0027");
    }
}
        
- (void)test104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"("]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"("];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0028");
    }
}
        
- (void)test105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @")"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@")"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0029");
    }
}
        
- (void)test106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"*"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"*"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+002A");
    }
}
        
- (void)test107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"+"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"+"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+002B");
    }
}
        
- (void)test108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @","]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@","];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+002C");
    }
}
        
- (void)test109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"-"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+002D");
    }
}
        
- (void)test110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"."];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+002E");
    }
}
        
- (void)test111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"/"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+002F");
    }
}
        
- (void)test112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"0"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0030");
    }
}
        
- (void)test113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"1"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0031");
    }
}
        
- (void)test114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"2"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"2"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0032");
    }
}
        
- (void)test115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"3"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"3"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0033");
    }
}
        
- (void)test116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"4"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"4"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0034");
    }
}
        
- (void)test117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"5"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"5"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0035");
    }
}
        
- (void)test118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"6"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"6"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0036");
    }
}
        
- (void)test119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"7"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"7"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0037");
    }
}
        
- (void)test120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"8"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"8"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0038");
    }
}
        
- (void)test121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"9"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0039");
    }
}
        
- (void)test122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @":"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@":"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+003A");
    }
}
        
- (void)test123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @";"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@";"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+003B");
    }
}
        
- (void)test124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"="];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+003D");
    }
}
        
- (void)test125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @">"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@">"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+003E");
    }
}
        
- (void)test126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"?"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+003F");
    }
}
        
- (void)test127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"@"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0040");
    }
}
        
- (void)test128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"A"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0041");
    }
}
        
- (void)test129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"B"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0042");
    }
}
        
- (void)test130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"C"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"C"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0043");
    }
}
        
- (void)test131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"D"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"D"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0044");
    }
}
        
- (void)test132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"E"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"E"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0045");
    }
}
        
- (void)test133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"F"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"F"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0046");
    }
}
        
- (void)test134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"G"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"G"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0047");
    }
}
        
- (void)test135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"H"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"H"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0048");
    }
}
        
- (void)test136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"I"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"I"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0049");
    }
}
        
- (void)test137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"J"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"J"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+004A");
    }
}
        
- (void)test138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"K"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"K"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+004B");
    }
}
        
- (void)test139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"L"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"L"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+004C");
    }
}
        
- (void)test140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"M"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"M"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+004D");
    }
}
        
- (void)test141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"N"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"N"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+004E");
    }
}
        
- (void)test142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"O"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"O"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+004F");
    }
}
        
- (void)test143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"P"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"P"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0050");
    }
}
        
- (void)test144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Q"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Q"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0051");
    }
}
        
- (void)test145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"R"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"R"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0052");
    }
}
        
- (void)test146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"S"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"S"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0053");
    }
}
        
- (void)test147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"T"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"T"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0054");
    }
}
        
- (void)test148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"U"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"U"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0055");
    }
}
        
- (void)test149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"V"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"V"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0056");
    }
}
        
- (void)test150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"W"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"W"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0057");
    }
}
        
- (void)test151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"X"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"X"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0058");
    }
}
        
- (void)test152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Y"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0059");
    }
}
        
- (void)test153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Z"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+005A");
    }
}
        
- (void)test154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"["]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"["];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+005B");
    }
}
        
- (void)test155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\\"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\\"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+005C");
    }
}
        
- (void)test156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"]"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"]"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+005D");
    }
}
        
- (void)test157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"^"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"^"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+005E");
    }
}
        
- (void)test158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"_"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"_"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+005F");
    }
}
        
- (void)test159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"`"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0060");
    }
}
        
- (void)test160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"a"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0061");
    }
}
        
- (void)test161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"b"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0062");
    }
}
        
- (void)test162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"c"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"c"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0063");
    }
}
        
- (void)test163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"d"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"d"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0064");
    }
}
        
- (void)test164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"e"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"e"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0065");
    }
}
        
- (void)test165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"f"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0066");
    }
}
        
- (void)test166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"g"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"g"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0067");
    }
}
        
- (void)test167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"h"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"h"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0068");
    }
}
        
- (void)test168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"i"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"i"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0069");
    }
}
        
- (void)test169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"j"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"j"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+006A");
    }
}
        
- (void)test170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"k"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"k"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+006B");
    }
}
        
- (void)test171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"l"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"l"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+006C");
    }
}
        
- (void)test172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"m"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"m"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+006D");
    }
}
        
- (void)test173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"n"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+006E");
    }
}
        
- (void)test174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"o"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"o"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+006F");
    }
}
        
- (void)test175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"p"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"p"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0070");
    }
}
        
- (void)test176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"q"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"q"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0071");
    }
}
        
- (void)test177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"r"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"r"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0072");
    }
}
        
- (void)test178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"s"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"s"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0073");
    }
}
        
- (void)test179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"t"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0074");
    }
}
        
- (void)test180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"u"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"u"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0075");
    }
}
        
- (void)test181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"v"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"v"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0076");
    }
}
        
- (void)test182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"w"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"w"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0077");
    }
}
        
- (void)test183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"x"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"x"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0078");
    }
}
        
- (void)test184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"y"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+0079");
    }
}
        
- (void)test185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"z"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+007A");
    }
}
        
- (void)test186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"{"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+007B");
    }
}
        
- (void)test187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"|"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"|"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+007C");
    }
}
        
- (void)test188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"}"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"}"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+007D");
    }
}
        
- (void)test189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"~"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"~"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+007E");
    }
}
        
- (void)test190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@" "];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A0");
    }
}
        
- (void)test191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¡"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¡"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A1");
    }
}
        
- (void)test192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¢"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A2");
    }
}
        
- (void)test193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"£"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A3");
    }
}
        
- (void)test194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¤"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A4");
    }
}
        
- (void)test195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¥"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A5");
    }
}
        
- (void)test196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¦"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¦"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A6");
    }
}
        
- (void)test197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"§"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A7");
    }
}
        
- (void)test198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¨"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A8");
    }
}
        
- (void)test199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"©"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00A9");
    }
}
        
- (void)test200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ª"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00AA");
    }
}
        
- (void)test201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"«"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"«"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00AB");
    }
}
        
- (void)test202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¬"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00AC");
    }
}
        
- (void)test203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"­"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"­"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00AD");
    }
}
        
- (void)test204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"®"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00AE");
    }
}
        
- (void)test205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¯"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¯"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00AF");
    }
}
        
- (void)test206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"°"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B0");
    }
}
        
- (void)test207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"±"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B1");
    }
}
        
- (void)test208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"²"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"²"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B2");
    }
}
        
- (void)test209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"³"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"³"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B3");
    }
}
        
- (void)test210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"´"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B4");
    }
}
        
- (void)test211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"µ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B5");
    }
}
        
- (void)test212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¶"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B6");
    }
}
        
- (void)test213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"·"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B7");
    }
}
        
- (void)test214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¸"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¸"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B8");
    }
}
        
- (void)test215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¹"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¹"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00B9");
    }
}
        
- (void)test216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"º"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00BA");
    }
}
        
- (void)test217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"»"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"»"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00BB");
    }
}
        
- (void)test218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¼"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¼"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00BC");
    }
}
        
- (void)test219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"½"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00BD");
    }
}
        
- (void)test220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¾"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00BE");
    }
}
        
- (void)test221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"¿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00BF");
    }
}
        
- (void)test222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"À"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"À"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C0");
    }
}
        
- (void)test223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Á"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C1");
    }
}
        
- (void)test224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Â"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C2");
    }
}
        
- (void)test225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ã"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C3");
    }
}
        
- (void)test226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ä"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C4");
    }
}
        
- (void)test227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Å"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C5");
    }
}
        
- (void)test228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Æ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C6");
    }
}
        
- (void)test229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ç"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C7");
    }
}
        
- (void)test230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"È"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"È"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C8");
    }
}
        
- (void)test231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"É"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00C9");
    }
}
        
- (void)test232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ê"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00CA");
    }
}
        
- (void)test233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ë"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00CB");
    }
}
        
- (void)test234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ì"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00CC");
    }
}
        
- (void)test235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Í"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00CD");
    }
}
        
- (void)test236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Î"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00CE");
    }
}
        
- (void)test237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ï"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00CF");
    }
}
        
- (void)test238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ð"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ð"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D0");
    }
}
        
- (void)test239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ñ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D1");
    }
}
        
- (void)test240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ò"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D2");
    }
}
        
- (void)test241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ó"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D3");
    }
}
        
- (void)test242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ô"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D4");
    }
}
        
- (void)test243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Õ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D5");
    }
}
        
- (void)test244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ö"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D6");
    }
}
        
- (void)test245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"×"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"×"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D7");
    }
}
        
- (void)test246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ø"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D8");
    }
}
        
- (void)test247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ù"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00D9");
    }
}
        
- (void)test248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ú"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00DA");
    }
}
        
- (void)test249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Û"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00DB");
    }
}
        
- (void)test250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ü"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00DC");
    }
}
        
- (void)test251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ý"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Ý"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00DD");
    }
}
        
- (void)test252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Þ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Þ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00DE");
    }
}
        
- (void)test253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ß"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00DF");
    }
}
        
- (void)test254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"à"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E0");
    }
}
        
- (void)test255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"á"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E1");
    }
}
        
- (void)test256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"â"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E2");
    }
}
        
- (void)test257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ã"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E3");
    }
}
        
- (void)test258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ä"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E4");
    }
}
        
- (void)test259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"å"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E5");
    }
}
        
- (void)test260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"æ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E6");
    }
}
        
- (void)test261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ç"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E7");
    }
}
        
- (void)test262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"è"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E8");
    }
}
        
- (void)test263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"é"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00E9");
    }
}
        
- (void)test264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ê"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00EA");
    }
}
        
- (void)test265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ë"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00EB");
    }
}
        
- (void)test266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ì"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00EC");
    }
}
        
- (void)test267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"í"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00ED");
    }
}
        
- (void)test268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"î"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00EE");
    }
}
        
- (void)test269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ï"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00EF");
    }
}
        
- (void)test270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ð"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ð"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F0");
    }
}
        
- (void)test271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ñ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F1");
    }
}
        
- (void)test272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ò"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F2");
    }
}
        
- (void)test273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ó"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F3");
    }
}
        
- (void)test274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ô"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F4");
    }
}
        
- (void)test275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"õ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F5");
    }
}
        
- (void)test276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ö"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F6");
    }
}
        
- (void)test277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"÷"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"÷"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F7");
    }
}
        
- (void)test278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ø"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F8");
    }
}
        
- (void)test279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ù"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00F9");
    }
}
        
- (void)test280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ú"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00FA");
    }
}
        
- (void)test281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"û"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00FB");
    }
}
        
- (void)test282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ü"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00FC");
    }
}
        
- (void)test283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ý"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ý"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00FD");
    }
}
        
- (void)test284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"þ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"þ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00FE");
    }
}
        
- (void)test285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ÿ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ÿ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+00FF");
    }
}
        
- (void)test286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"퟿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"퟿"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+D7FF");
    }
}
        
- (void)test287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@""];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+E000");
    }
}
        
- (void)test288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"﷏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﷏"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+FDCF");
    }
}
        
- (void)test289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ﷰ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"ﷰ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+FDF0");
    }
}
        
- (void)test290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"�"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+FFFD");
    }
}
        
- (void)test291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"𐀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𐀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+10000");
    }
}
        
- (void)test292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"🿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"🿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+1FFFD");
    }
}
        
- (void)test293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"𠀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𠀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+20000");
    }
}
        
- (void)test294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"𯿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𯿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+2FFFD");
    }
}
        
- (void)test295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"𰀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𰀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+30000");
    }
}
        
- (void)test296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"𿿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"𿿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+3FFFD");
    }
}
        
- (void)test297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񀀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+40000");
    }
}
        
- (void)test298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񏿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񏿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+4FFFD");
    }
}
        
- (void)test299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񐀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񐀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+50000");
    }
}
        
- (void)test300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񟿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񟿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+5FFFD");
    }
}
        
- (void)test301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񠀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񠀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+60000");
    }
}
        
- (void)test302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񯿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񯿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+6FFFD");
    }
}
        
- (void)test303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񰀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񰀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+70000");
    }
}
        
- (void)test304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"񿿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"񿿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+7FFFD");
    }
}
        
- (void)test305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򀀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+80000");
    }
}
        
- (void)test306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򏿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򏿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+8FFFD");
    }
}
        
- (void)test307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򐀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򐀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+90000");
    }
}
        
- (void)test308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򟿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򟿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+9FFFD");
    }
}
        
- (void)test309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򠀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򠀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+A0000");
    }
}
        
- (void)test310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򯿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򯿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+AFFFD");
    }
}
        
- (void)test311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򰀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򰀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+B0000");
    }
}
        
- (void)test312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"򿿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"򿿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+BFFFD");
    }
}
        
- (void)test313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󀀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+C0000");
    }
}
        
- (void)test314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󏿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󏿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+CFFFD");
    }
}
        
- (void)test315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󐀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󐀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+D0000");
    }
}
        
- (void)test316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󟿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󟿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+DFFFD");
    }
}
        
- (void)test317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󠀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󠀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+E0000");
    }
}
        
- (void)test318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󯿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󯿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+EFFFD");
    }
}
        
- (void)test319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󰀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󰀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+F0000");
    }
}
        
- (void)test320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"󿿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"󿿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+FFFFD");
    }
}
        
- (void)test321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"􀀀"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+100000");
    }
}
        
- (void)test322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"􏿽"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"􏿽"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid Unicode character U+10FFFD");
    }
}

@end
