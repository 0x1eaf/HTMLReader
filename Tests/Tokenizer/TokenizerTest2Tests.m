// This file was autogenerated from Tests/html5lib/tokenizer/test2.test

#import <XCTest/XCTest.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerTest2Tests : XCTestCase

@end

@implementation TokenizerTest2Tests
        
- (void)test00
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE without name");
    }
}
        
- (void)test01
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", [NSNull null], [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEhtml>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE without space before name");
    }
}
        
- (void)test02
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"foo", [NSNull null], [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEfoo>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Incorrect DOCTYPE without a space before name");
    }
}
        
- (void)test03
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"DOCTYPE", @"html", @"-//W3C//DTD HTML Transitional 4.01//EN", [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML Transitional 4.01//EN\">"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with publicId");
    }
}
        
- (void)test04
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with EOF after PUBLIC");
    }
}
        
- (void)test05
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC '"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with EOF after PUBLIC '");
    }
}
        
- (void)test06
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", @"x", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC 'x"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with EOF after PUBLIC 'x");
    }
}
        
- (void)test07
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"DOCTYPE", @"html", [NSNull null], @"-//W3C//DTD HTML Transitional 4.01//EN", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html SYSTEM \"-//W3C//DTD HTML Transitional 4.01//EN\">"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with systemId");
    }
}
        
- (void)test08
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"DOCTYPE", @"html", @"-//W3C//DTD HTML Transitional 4.01//EN", @"-//W3C//DTD HTML Transitional 4.01//EN", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML Transitional 4.01//EN\" \"-//W3C//DTD HTML Transitional 4.01//EN\">"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with publicId and systemId");
    }
}
        
- (void)test09
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", @"", [NSNull null], @NO], @[@"Character", @"x"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC \">x"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with > in double-quoted publicId");
    }
}
        
- (void)test10
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", @"", [NSNull null], @NO], @[@"Character", @"x"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC '>x"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with > in single-quoted publicId");
    }
}
        
- (void)test11
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", @"foo", @"", @NO], @[@"Character", @"x"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC \"foo\" \">x"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with > in double-quoted systemId");
    }
}
        
- (void)test12
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", @"foo", @"", @NO], @[@"Character", @"x"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html PUBLIC 'foo' '>x"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"DOCTYPE with > in single-quoted systemId");
    }
}
        
- (void)test13
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html "];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Incomplete doctype");
    }
}
        
- (void)test14
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#0000;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Numeric entity representing the NUL character");
    }
}
        
- (void)test15
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0000;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Hexadecimal entity representing the NUL character");
    }
}
        
- (void)test16
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#2225222;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Numeric entity representing a codepoint after 1114111 (U+10FFFF)");
    }
}
        
- (void)test17
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x1010FFFF;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Hexadecimal entity representing a codepoint after 1114111 (U+10FFFF)");
    }
}
        
- (void)test18
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"�"], @"ParseError", @[@"Character", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xD869;&#xDED6;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Hexadecimal entity pair representing a surrogate pair");
    }
}
        
- (void)test19
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ꯍ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xaBcD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Hexadecimal entity with mixed uppercase and lowercase");
    }
}
        
- (void)test20
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&;"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Entity without a name");
    }
}
        
- (void)test21
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"h", @{@"a": @"&"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h a='&'>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Unescaped ampersand in attribute value");
    }
}
        
- (void)test22
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a<b", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a<b>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"StartTag containing <");
    }
}
        
- (void)test23
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"h", @{}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h/>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Non-void element containing trailing /");
    }
}
        
- (void)test24
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"br", @{}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<br/>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Void element with permitted slash");
    }
}
        
- (void)test25
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"br", @{@"foo": @"bar"}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<br foo='bar'/>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Void element with permitted slash (with attribute)");
    }
}
        
- (void)test26
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"h", @{@"a": @"b"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h/a='b'>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"StartTag containing /");
    }
}
        
- (void)test27
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"h", @{@"a": @"b"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h a=\"b\">"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Double-quoted attribute value");
    }
}
        
- (void)test28
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"</"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Unescaped </");
    }
}
        
- (void)test29
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</1>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Illegal end tag name");
    }
}
        
- (void)test30
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?namespace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?namespace>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Simili processing instruction");
    }
}
        
- (void)test31
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?foo--"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?foo-->"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"A bogus comment stops at >, even if preceeded by two dashes");
    }
}
        
- (void)test32
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo "], @"ParseError", @[@"Character", @"< bar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo < bar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Unescaped <");
    }
}
        
- (void)test33
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0000]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Null Byte Replacement");
    }
}
        
- (void)test34
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-x"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---x"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Comment with dash");
    }
}
        
- (void)test35
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\nx\n>\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\nx\n&gt;\n"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Entity + newline");
    }
}
        
- (void)test36
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"h", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h >"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Start tag with no attributes but space before the greater-than sign");
    }
}
        
- (void)test37
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"h", @{@"a": @"", @"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h a B=''>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Empty attribute followed by uppercase attribute");
    }
}
        
- (void)test38
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"h", @{@"a": @"", @"\"": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h a \">"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Double-quote after attribute name");
    }
}
        
- (void)test39
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"h", @{@"a": @"", @"'": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<h a '>"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Single-quote after attribute name");
    }
}
        
- (void)test40
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"a"], @"ParseError", @[@"Character", @"bc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"a</>bc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Empty end tag with following characters");
    }
}
        
- (void)test41
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"a"], @"ParseError", @[@"StartTag", @"b", @{}], @[@"Character", @"c"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"a</><b>c"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Empty end tag with following tag");
    }
}
        
- (void)test42
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"a"], @"ParseError", @[@"Comment", @"b"], @[@"Character", @"c"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"a</><!--b-->c"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Empty end tag with following comment");
    }
}
        
- (void)test43
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"a"], @"ParseError", @[@"EndTag", @"b"], @[@"Character", @"c"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"a</></b>c"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Empty end tag with following end tag");
    }
}

@end
