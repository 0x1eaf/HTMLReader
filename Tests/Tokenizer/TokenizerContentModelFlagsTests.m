// This file was autogenerated from Tests/html5lib/tokenizer/contentModelFlags.test

#import <XCTest/XCTest.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerContentModelFlagsTests : XCTestCase

@end

@implementation TokenizerContentModelFlagsTests
        
- (void)test00
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"<head>&body;"]]);
    for (NSString *state in @[@"PLAINTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<head>&body;"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"plaintext"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"PLAINTEXT content model flag");
    }
}
        
- (void)test01
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo"], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo</xmp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag closing RCDATA or RAWTEXT");
    }
}
        
- (void)test02
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo"], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo</xMp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag closing RCDATA or RAWTEXT (case-insensitivity)");
    }
}
        
- (void)test03
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo"], @"ParseError"]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo</xmp "];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag closing RCDATA or RAWTEXT (ending with space)");
    }
}
        
- (void)test04
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo</xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo</xmp"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag closing RCDATA or RAWTEXT (ending with EOF)");
    }
}
        
- (void)test05
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo"], @"ParseError"]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo</xmp/"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag closing RCDATA or RAWTEXT (ending with slash)");
    }
}
        
- (void)test06
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo</xmp<"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo</xmp<"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag not closing RCDATA or RAWTEXT (ending with left-angle-bracket)");
    }
}
        
- (void)test07
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"</foo>bar"], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</foo>bar</xmp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag with incorrect name in RCDATA or RAWTEXT");
    }
}
        
- (void)test08
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"</foo>bar</xmpaar>"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</foo>bar</xmpaar>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag with incorrect name in RCDATA or RAWTEXT (starting like correct name)");
    }
}
        
- (void)test09
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo"], @[@"EndTag", @"xmp"], @[@"EndTag", @"baz"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo</xmp></baz>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag closing RCDATA or RAWTEXT, switching back to PCDATA");
    }
}
        
- (void)test10
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&foo;"]]);
    for (NSString *state in @[@"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&foo;"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"RAWTEXT w/ something looking like an entity");
    }
}
        
- (void)test11
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"<"]]);
    for (NSString *state in @[@"RCDATA state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lt;"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"textarea"];
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"RCDATA w/ an entity");
    }
}

@end
