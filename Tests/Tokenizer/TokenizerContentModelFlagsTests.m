// This file was autogenerated from Tests/html5lib/tokenizer/contentModelFlags.test.

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizer.h"

@interface TokenizerContentModelFlagsTests : SenTestCase

@end

@implementation TokenizerContentModelFlagsTests
        
- (void)test0
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"<head>&body;"];
    NSArray *tokens = @[@[@"Character",@"<head>&body;"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"PLAINTEXT content model flag");
}
        
- (void)test1
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"foo</xmp>"];
    NSArray *tokens = @[@[@"Character",@"foo"],@[@"EndTag",@"xmp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag closing RCDATA or RAWTEXT");
}
        
- (void)test2
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"foo</xMp>"];
    NSArray *tokens = @[@[@"Character",@"foo"],@[@"EndTag",@"xmp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag closing RCDATA or RAWTEXT (case-insensitivity)");
}
        
- (void)test3
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"foo</xmp "];
    NSArray *tokens = @[@[@"Character",@"foo"],@"ParseError"];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag closing RCDATA or RAWTEXT (ending with space)");
}
        
- (void)test4
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"foo</xmp"];
    NSArray *tokens = @[@[@"Character",@"foo</xmp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag closing RCDATA or RAWTEXT (ending with EOF)");
}
        
- (void)test5
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"foo</xmp/"];
    NSArray *tokens = @[@[@"Character",@"foo"],@"ParseError"];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag closing RCDATA or RAWTEXT (ending with slash)");
}
        
- (void)test6
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"foo</xmp<"];
    NSArray *tokens = @[@[@"Character",@"foo</xmp<"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag not closing RCDATA or RAWTEXT (ending with left-angle-bracket)");
}
        
- (void)test7
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"</foo>bar</xmp>"];
    NSArray *tokens = @[@[@"Character",@"</foo>bar"],@[@"EndTag",@"xmp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag with incorrect name in RCDATA or RAWTEXT");
}
        
- (void)test8
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"</foo>bar</xmpaar>"];
    NSArray *tokens = @[@[@"Character",@"</foo>bar</xmpaar>"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag with incorrect name in RCDATA or RAWTEXT (starting like correct name)");
}
        
- (void)test9
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"foo</xmp></baz>"];
    NSArray *tokens = @[@[@"Character",@"foo"],@[@"EndTag",@"xmp"],@[@"EndTag",@"baz"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"End tag closing RCDATA or RAWTEXT, switching back to PCDATA");
}
        
- (void)test10
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&foo;"];
    NSArray *tokens = @[@[@"Character",@"&foo;"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"RAWTEXT w/ something looking like an entity");
}
        
- (void)test11
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lt;"];
    NSArray *tokens = @[@[@"Character",@"<"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"RCDATA w/ an entity");
}

@end
