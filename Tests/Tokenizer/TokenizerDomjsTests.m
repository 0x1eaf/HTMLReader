// This file was autogenerated from Tests/html5lib/tokenizer/domjs.test

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerDomjsTests : SenTestCase

@end

@implementation TokenizerDomjsTests
        
- (void)test00
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"CR in bogus comment state");
    }
}
        
- (void)test01
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?\r\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"CRLF in bogus comment state");
    }
}
        
- (void)test02
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0xFFFD]]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"NUL in RCDATA and RAWTEXT");
    }
}
        
- (void)test03
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"﻿foo﻿bar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"﻿foo﻿bar"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"leading U+FEFF must pass through");
    }
}
        
- (void)test04
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≂̸"]]);
    for (NSString *state in @[@"RCDATA state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotEqualTilde;"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Non BMP-charref in in RCDATA");
    }
}
        
- (void)test05
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"&NotEqualTild;"]]);
    for (NSString *state in @[@"RCDATA state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotEqualTild;"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad charref in in RCDATA");
    }
}
        
- (void)test06
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</XMP>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"lowercase endtags in RCDATA and RAWTEXT");
    }
}
        
- (void)test07
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"</ XMP>"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</ XMP>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"bad endtag in RCDATA and RAWTEXT");
    }
}
        
- (void)test08
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"</xm>"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</xm>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"bad endtag in RCDATA and RAWTEXT");
    }
}
        
- (void)test09
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"</xm "]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</xm "];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"bad endtag in RCDATA and RAWTEXT");
    }
}
        
- (void)test10
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"</xm/"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</xm/"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"bad endtag in RCDATA and RAWTEXT");
    }
}
        
- (void)test11
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"p", @{@"id": @"≂̸"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<p id=\"&NotEqualTilde;\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Non BMP-charref in attribute");
    }
}
        
- (void)test12
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", [NSString stringWithFormat:@"--!%C", (unichar)0xFFFD]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!----!%C-->", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"--!NUL in comment ");
    }
}
        
- (void)test13
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"html", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE html "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"space EOF after doctype ");
    }
}

@end
