// This file was autogenerated from Tests/html5lib/tokenizer/namedEntities.test

#import <XCTest/XCTest.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerNamedEntitiesTests : XCTestCase

@end

@implementation TokenizerNamedEntitiesTests
        
- (void)test0000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&AElig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: AElig without a semi-colon");
    }
}
        
- (void)test0001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&AElig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: AElig; with a semi-colon");
    }
}
        
- (void)test0002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&AMP"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: AMP without a semi-colon");
    }
}
        
- (void)test0003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&AMP;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: AMP; with a semi-colon");
    }
}
        
- (void)test0004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Aacute without a semi-colon");
    }
}
        
- (void)test0005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Aacute; with a semi-colon");
    }
}
        
- (void)test0006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Abreve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Abreve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Abreve without a semi-colon");
    }
}
        
- (void)test0007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Abreve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Abreve; with a semi-colon");
    }
}
        
- (void)test0008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Acirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Acirc without a semi-colon");
    }
}
        
- (void)test0009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Acirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Acirc; with a semi-colon");
    }
}
        
- (void)test0010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Acy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Acy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Acy without a semi-colon");
    }
}
        
- (void)test0011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Acy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Acy; with a semi-colon");
    }
}
        
- (void)test0012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Afr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Afr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Afr without a semi-colon");
    }
}
        
- (void)test0013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Afr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Afr; with a semi-colon");
    }
}
        
- (void)test0014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Agrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Agrave without a semi-colon");
    }
}
        
- (void)test0015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Agrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Agrave; with a semi-colon");
    }
}
        
- (void)test0016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Alpha"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Alpha"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Alpha without a semi-colon");
    }
}
        
- (void)test0017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Alpha;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Alpha; with a semi-colon");
    }
}
        
- (void)test0018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Amacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Amacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Amacr without a semi-colon");
    }
}
        
- (void)test0019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Amacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Amacr; with a semi-colon");
    }
}
        
- (void)test0020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&And"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&And"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: And without a semi-colon");
    }
}
        
- (void)test0021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&And;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: And; with a semi-colon");
    }
}
        
- (void)test0022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Aogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Aogon without a semi-colon");
    }
}
        
- (void)test0023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Aogon; with a semi-colon");
    }
}
        
- (void)test0024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Aopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Aopf without a semi-colon");
    }
}
        
- (void)test0025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Aopf; with a semi-colon");
    }
}
        
- (void)test0026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ApplyFunction"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ApplyFunction"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ApplyFunction without a semi-colon");
    }
}
        
- (void)test0027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Å°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ApplyFunction;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ApplyFunction; with a semi-colon");
    }
}
        
- (void)test0028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aring"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Aring without a semi-colon");
    }
}
        
- (void)test0029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Aring;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Aring; with a semi-colon");
    }
}
        
- (void)test0030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ascr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ascr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ascr without a semi-colon");
    }
}
        
- (void)test0031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ascr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ascr; with a semi-colon");
    }
}
        
- (void)test0032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Assign"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Assign"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Assign without a semi-colon");
    }
}
        
- (void)test0033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Assign;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Assign; with a semi-colon");
    }
}
        
- (void)test0034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Atilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Atilde without a semi-colon");
    }
}
        
- (void)test0035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Atilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Atilde; with a semi-colon");
    }
}
        
- (void)test0036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Auml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Auml without a semi-colon");
    }
}
        
- (void)test0037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Auml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Auml; with a semi-colon");
    }
}
        
- (void)test0038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Backslash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Backslash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Backslash without a semi-colon");
    }
}
        
- (void)test0039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Backslash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Backslash; with a semi-colon");
    }
}
        
- (void)test0040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Barv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Barv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Barv without a semi-colon");
    }
}
        
- (void)test0041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Barv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Barv; with a semi-colon");
    }
}
        
- (void)test0042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Barwed"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Barwed"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Barwed without a semi-colon");
    }
}
        
- (void)test0043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Barwed;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Barwed; with a semi-colon");
    }
}
        
- (void)test0044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Bcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Bcy without a semi-colon");
    }
}
        
- (void)test0045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Bcy; with a semi-colon");
    }
}
        
- (void)test0046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Because"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Because"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Because without a semi-colon");
    }
}
        
- (void)test0047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Because;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Because; with a semi-colon");
    }
}
        
- (void)test0048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Bernoullis"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bernoullis"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Bernoullis without a semi-colon");
    }
}
        
- (void)test0049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bernoullis;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Bernoullis; with a semi-colon");
    }
}
        
- (void)test0050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Beta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Beta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Beta without a semi-colon");
    }
}
        
- (void)test0051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Beta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Beta; with a semi-colon");
    }
}
        
- (void)test0052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Bfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Bfr without a semi-colon");
    }
}
        
- (void)test0053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Bfr; with a semi-colon");
    }
}
        
- (void)test0054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Bopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Bopf without a semi-colon");
    }
}
        
- (void)test0055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Bopf; with a semi-colon");
    }
}
        
- (void)test0056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Breve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Breve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Breve without a semi-colon");
    }
}
        
- (void)test0057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Breve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Breve; with a semi-colon");
    }
}
        
- (void)test0058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Bscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Bscr without a semi-colon");
    }
}
        
- (void)test0059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Bscr; with a semi-colon");
    }
}
        
- (void)test0060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Bumpeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bumpeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Bumpeq without a semi-colon");
    }
}
        
- (void)test0061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Bumpeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Bumpeq; with a semi-colon");
    }
}
        
- (void)test0062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CHcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CHcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CHcy without a semi-colon");
    }
}
        
- (void)test0063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CHcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CHcy; with a semi-colon");
    }
}
        
- (void)test0064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&COPY"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: COPY without a semi-colon");
    }
}
        
- (void)test0065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&COPY;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: COPY; with a semi-colon");
    }
}
        
- (void)test0066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cacute without a semi-colon");
    }
}
        
- (void)test0067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cacute; with a semi-colon");
    }
}
        
- (void)test0068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cap without a semi-colon");
    }
}
        
- (void)test0069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cap; with a semi-colon");
    }
}
        
- (void)test0070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CapitalDifferentialD"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CapitalDifferentialD"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CapitalDifferentialD without a semi-colon");
    }
}
        
- (void)test0071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÖÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CapitalDifferentialD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CapitalDifferentialD; with a semi-colon");
    }
}
        
- (void)test0072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cayleys"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cayleys"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cayleys without a semi-colon");
    }
}
        
- (void)test0073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cayleys;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cayleys; with a semi-colon");
    }
}
        
- (void)test0074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ccaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ccaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ccaron without a semi-colon");
    }
}
        
- (void)test0075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ccaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ccaron; with a semi-colon");
    }
}
        
- (void)test0076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ccedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ccedil without a semi-colon");
    }
}
        
- (void)test0077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ccedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ccedil; with a semi-colon");
    }
}
        
- (void)test0078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ccirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ccirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ccirc without a semi-colon");
    }
}
        
- (void)test0079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ccirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ccirc; with a semi-colon");
    }
}
        
- (void)test0080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cconint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cconint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cconint without a semi-colon");
    }
}
        
- (void)test0081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cconint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cconint; with a semi-colon");
    }
}
        
- (void)test0082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cdot without a semi-colon");
    }
}
        
- (void)test0083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cdot; with a semi-colon");
    }
}
        
- (void)test0084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cedilla"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cedilla"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cedilla without a semi-colon");
    }
}
        
- (void)test0085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cedilla;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cedilla; with a semi-colon");
    }
}
        
- (void)test0086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CenterDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CenterDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CenterDot without a semi-colon");
    }
}
        
- (void)test0087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CenterDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CenterDot; with a semi-colon");
    }
}
        
- (void)test0088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cfr without a semi-colon");
    }
}
        
- (void)test0089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cfr; with a semi-colon");
    }
}
        
- (void)test0090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Chi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Chi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Chi without a semi-colon");
    }
}
        
- (void)test0091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Chi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Chi; with a semi-colon");
    }
}
        
- (void)test0092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CircleDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CircleDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CircleDot without a semi-colon");
    }
}
        
- (void)test0093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CircleDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CircleDot; with a semi-colon");
    }
}
        
- (void)test0094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CircleMinus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CircleMinus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CircleMinus without a semi-colon");
    }
}
        
- (void)test0095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CircleMinus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CircleMinus; with a semi-colon");
    }
}
        
- (void)test0096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CirclePlus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CirclePlus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CirclePlus without a semi-colon");
    }
}
        
- (void)test0097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CirclePlus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CirclePlus; with a semi-colon");
    }
}
        
- (void)test0098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CircleTimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CircleTimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CircleTimes without a semi-colon");
    }
}
        
- (void)test0099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CircleTimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CircleTimes; with a semi-colon");
    }
}
        
- (void)test0100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ClockwiseContourIntegral"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ClockwiseContourIntegral"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ClockwiseContourIntegral without a semi-colon");
    }
}
        
- (void)test0101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ClockwiseContourIntegral;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ClockwiseContourIntegral; with a semi-colon");
    }
}
        
- (void)test0102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CloseCurlyDoubleQuote"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CloseCurlyDoubleQuote"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CloseCurlyDoubleQuote without a semi-colon");
    }
}
        
- (void)test0103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CloseCurlyDoubleQuote;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CloseCurlyDoubleQuote; with a semi-colon");
    }
}
        
- (void)test0104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CloseCurlyQuote"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CloseCurlyQuote"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CloseCurlyQuote without a semi-colon");
    }
}
        
- (void)test0105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CloseCurlyQuote;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CloseCurlyQuote; with a semi-colon");
    }
}
        
- (void)test0106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Colon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Colon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Colon without a semi-colon");
    }
}
        
- (void)test0107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Colon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Colon; with a semi-colon");
    }
}
        
- (void)test0108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Colone"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Colone"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Colone without a semi-colon");
    }
}
        
- (void)test0109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Colone;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Colone; with a semi-colon");
    }
}
        
- (void)test0110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Congruent"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Congruent"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Congruent without a semi-colon");
    }
}
        
- (void)test0111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Congruent;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Congruent; with a semi-colon");
    }
}
        
- (void)test0112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Conint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Conint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Conint without a semi-colon");
    }
}
        
- (void)test0113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Conint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Conint; with a semi-colon");
    }
}
        
- (void)test0114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ContourIntegral"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ContourIntegral"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ContourIntegral without a semi-colon");
    }
}
        
- (void)test0115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ContourIntegral;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ContourIntegral; with a semi-colon");
    }
}
        
- (void)test0116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Copf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Copf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Copf without a semi-colon");
    }
}
        
- (void)test0117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÑÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Copf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Copf; with a semi-colon");
    }
}
        
- (void)test0118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Coproduct"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Coproduct"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Coproduct without a semi-colon");
    }
}
        
- (void)test0119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Coproduct;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Coproduct; with a semi-colon");
    }
}
        
- (void)test0120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CounterClockwiseContourIntegral"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CounterClockwiseContourIntegral"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CounterClockwiseContourIntegral without a semi-colon");
    }
}
        
- (void)test0121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CounterClockwiseContourIntegral;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CounterClockwiseContourIntegral; with a semi-colon");
    }
}
        
- (void)test0122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cross"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cross"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cross without a semi-colon");
    }
}
        
- (void)test0123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cross;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cross; with a semi-colon");
    }
}
        
- (void)test0124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cscr without a semi-colon");
    }
}
        
- (void)test0125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cscr; with a semi-colon");
    }
}
        
- (void)test0126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Cup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Cup without a semi-colon");
    }
}
        
- (void)test0127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Cup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Cup; with a semi-colon");
    }
}
        
- (void)test0128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&CupCap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CupCap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: CupCap without a semi-colon");
    }
}
        
- (void)test0129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&CupCap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: CupCap; with a semi-colon");
    }
}
        
- (void)test0130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DD"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DD"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DD without a semi-colon");
    }
}
        
- (void)test0131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÖÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DD; with a semi-colon");
    }
}
        
- (void)test0132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DDotrahd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DDotrahd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DDotrahd without a semi-colon");
    }
}
        
- (void)test0133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DDotrahd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DDotrahd; with a semi-colon");
    }
}
        
- (void)test0134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DJcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DJcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DJcy without a semi-colon");
    }
}
        
- (void)test0135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DJcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DJcy; with a semi-colon");
    }
}
        
- (void)test0136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DScy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DScy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DScy without a semi-colon");
    }
}
        
- (void)test0137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DScy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DScy; with a semi-colon");
    }
}
        
- (void)test0138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DZcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DZcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DZcy without a semi-colon");
    }
}
        
- (void)test0139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DZcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DZcy; with a semi-colon");
    }
}
        
- (void)test0140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dagger"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dagger"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dagger without a semi-colon");
    }
}
        
- (void)test0141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dagger;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dagger; with a semi-colon");
    }
}
        
- (void)test0142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Darr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Darr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Darr without a semi-colon");
    }
}
        
- (void)test0143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Darr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Darr; with a semi-colon");
    }
}
        
- (void)test0144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dashv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dashv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dashv without a semi-colon");
    }
}
        
- (void)test0145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dashv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dashv; with a semi-colon");
    }
}
        
- (void)test0146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dcaron without a semi-colon");
    }
}
        
- (void)test0147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dcaron; with a semi-colon");
    }
}
        
- (void)test0148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dcy without a semi-colon");
    }
}
        
- (void)test0149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dcy; with a semi-colon");
    }
}
        
- (void)test0150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Del"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Del"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Del without a semi-colon");
    }
}
        
- (void)test0151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Del;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Del; with a semi-colon");
    }
}
        
- (void)test0152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Delta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Delta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Delta without a semi-colon");
    }
}
        
- (void)test0153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Delta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Delta; with a semi-colon");
    }
}
        
- (void)test0154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dfr without a semi-colon");
    }
}
        
- (void)test0155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dfr; with a semi-colon");
    }
}
        
- (void)test0156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DiacriticalAcute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalAcute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DiacriticalAcute without a semi-colon");
    }
}
        
- (void)test0157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalAcute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DiacriticalAcute; with a semi-colon");
    }
}
        
- (void)test0158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DiacriticalDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DiacriticalDot without a semi-colon");
    }
}
        
- (void)test0159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DiacriticalDot; with a semi-colon");
    }
}
        
- (void)test0160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DiacriticalDoubleAcute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalDoubleAcute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DiacriticalDoubleAcute without a semi-colon");
    }
}
        
- (void)test0161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalDoubleAcute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DiacriticalDoubleAcute; with a semi-colon");
    }
}
        
- (void)test0162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DiacriticalGrave"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalGrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DiacriticalGrave without a semi-colon");
    }
}
        
- (void)test0163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalGrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DiacriticalGrave; with a semi-colon");
    }
}
        
- (void)test0164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DiacriticalTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DiacriticalTilde without a semi-colon");
    }
}
        
- (void)test0165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DiacriticalTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DiacriticalTilde; with a semi-colon");
    }
}
        
- (void)test0166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Diamond"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Diamond"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Diamond without a semi-colon");
    }
}
        
- (void)test0167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Diamond;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Diamond; with a semi-colon");
    }
}
        
- (void)test0168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DifferentialD"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DifferentialD"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DifferentialD without a semi-colon");
    }
}
        
- (void)test0169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÖÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DifferentialD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DifferentialD; with a semi-colon");
    }
}
        
- (void)test0170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dopf without a semi-colon");
    }
}
        
- (void)test0171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dopf; with a semi-colon");
    }
}
        
- (void)test0172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dot without a semi-colon");
    }
}
        
- (void)test0173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dot; with a semi-colon");
    }
}
        
- (void)test0174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DotDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DotDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DotDot without a semi-colon");
    }
}
        
- (void)test0175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Éú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DotDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DotDot; with a semi-colon");
    }
}
        
- (void)test0176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DotEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DotEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DotEqual without a semi-colon");
    }
}
        
- (void)test0177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DotEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DotEqual; with a semi-colon");
    }
}
        
- (void)test0178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleContourIntegral"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleContourIntegral"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleContourIntegral without a semi-colon");
    }
}
        
- (void)test0179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleContourIntegral;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleContourIntegral; with a semi-colon");
    }
}
        
- (void)test0180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleDot without a semi-colon");
    }
}
        
- (void)test0181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleDot; with a semi-colon");
    }
}
        
- (void)test0182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleDownArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleDownArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleDownArrow without a semi-colon");
    }
}
        
- (void)test0183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleDownArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleDownArrow; with a semi-colon");
    }
}
        
- (void)test0184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleLeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleLeftArrow without a semi-colon");
    }
}
        
- (void)test0185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleLeftArrow; with a semi-colon");
    }
}
        
- (void)test0186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleLeftRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLeftRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleLeftRightArrow without a semi-colon");
    }
}
        
- (void)test0187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLeftRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleLeftRightArrow; with a semi-colon");
    }
}
        
- (void)test0188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleLeftTee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLeftTee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleLeftTee without a semi-colon");
    }
}
        
- (void)test0189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLeftTee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleLeftTee; with a semi-colon");
    }
}
        
- (void)test0190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleLongLeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLongLeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleLongLeftArrow without a semi-colon");
    }
}
        
- (void)test0191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLongLeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleLongLeftArrow; with a semi-colon");
    }
}
        
- (void)test0192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleLongLeftRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLongLeftRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleLongLeftRightArrow without a semi-colon");
    }
}
        
- (void)test0193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLongLeftRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleLongLeftRightArrow; with a semi-colon");
    }
}
        
- (void)test0194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleLongRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLongRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleLongRightArrow without a semi-colon");
    }
}
        
- (void)test0195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleLongRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleLongRightArrow; with a semi-colon");
    }
}
        
- (void)test0196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleRightArrow without a semi-colon");
    }
}
        
- (void)test0197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleRightArrow; with a semi-colon");
    }
}
        
- (void)test0198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleRightTee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleRightTee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleRightTee without a semi-colon");
    }
}
        
- (void)test0199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleRightTee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleRightTee; with a semi-colon");
    }
}
        
- (void)test0200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleUpArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleUpArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleUpArrow without a semi-colon");
    }
}
        
- (void)test0201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleUpArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleUpArrow; with a semi-colon");
    }
}
        
- (void)test0202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleUpDownArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleUpDownArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleUpDownArrow without a semi-colon");
    }
}
        
- (void)test0203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleUpDownArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleUpDownArrow; with a semi-colon");
    }
}
        
- (void)test0204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DoubleVerticalBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleVerticalBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DoubleVerticalBar without a semi-colon");
    }
}
        
- (void)test0205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DoubleVerticalBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DoubleVerticalBar; with a semi-colon");
    }
}
        
- (void)test0206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownArrow without a semi-colon");
    }
}
        
- (void)test0207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownArrow; with a semi-colon");
    }
}
        
- (void)test0208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownArrowBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownArrowBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownArrowBar without a semi-colon");
    }
}
        
- (void)test0209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownArrowBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownArrowBar; with a semi-colon");
    }
}
        
- (void)test0210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownArrowUpArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownArrowUpArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownArrowUpArrow without a semi-colon");
    }
}
        
- (void)test0211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownArrowUpArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownArrowUpArrow; with a semi-colon");
    }
}
        
- (void)test0212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownBreve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownBreve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownBreve without a semi-colon");
    }
}
        
- (void)test0213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ãë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownBreve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownBreve; with a semi-colon");
    }
}
        
- (void)test0214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownLeftRightVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftRightVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownLeftRightVector without a semi-colon");
    }
}
        
- (void)test0215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftRightVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownLeftRightVector; with a semi-colon");
    }
}
        
- (void)test0216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownLeftTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownLeftTeeVector without a semi-colon");
    }
}
        
- (void)test0217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownLeftTeeVector; with a semi-colon");
    }
}
        
- (void)test0218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownLeftVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownLeftVector without a semi-colon");
    }
}
        
- (void)test0219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÜΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownLeftVector; with a semi-colon");
    }
}
        
- (void)test0220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownLeftVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownLeftVectorBar without a semi-colon");
    }
}
        
- (void)test0221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownLeftVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownLeftVectorBar; with a semi-colon");
    }
}
        
- (void)test0222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownRightTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownRightTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownRightTeeVector without a semi-colon");
    }
}
        
- (void)test0223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownRightTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownRightTeeVector; with a semi-colon");
    }
}
        
- (void)test0224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownRightVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownRightVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownRightVector without a semi-colon");
    }
}
        
- (void)test0225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownRightVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownRightVector; with a semi-colon");
    }
}
        
- (void)test0226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownRightVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownRightVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownRightVectorBar without a semi-colon");
    }
}
        
- (void)test0227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownRightVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownRightVectorBar; with a semi-colon");
    }
}
        
- (void)test0228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownTee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownTee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownTee without a semi-colon");
    }
}
        
- (void)test0229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownTee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownTee; with a semi-colon");
    }
}
        
- (void)test0230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&DownTeeArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownTeeArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: DownTeeArrow without a semi-colon");
    }
}
        
- (void)test0231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&DownTeeArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: DownTeeArrow; with a semi-colon");
    }
}
        
- (void)test0232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Downarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Downarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Downarrow without a semi-colon");
    }
}
        
- (void)test0233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Downarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Downarrow; with a semi-colon");
    }
}
        
- (void)test0234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dscr without a semi-colon");
    }
}
        
- (void)test0235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dscr; with a semi-colon");
    }
}
        
- (void)test0236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Dstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Dstrok without a semi-colon");
    }
}
        
- (void)test0237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Dstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Dstrok; with a semi-colon");
    }
}
        
- (void)test0238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ENG"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ENG"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ENG without a semi-colon");
    }
}
        
- (void)test0239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ENG;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ENG; with a semi-colon");
    }
}
        
- (void)test0240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ETH"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ETH without a semi-colon");
    }
}
        
- (void)test0241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ETH;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ETH; with a semi-colon");
    }
}
        
- (void)test0242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Eacute without a semi-colon");
    }
}
        
- (void)test0243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Eacute; with a semi-colon");
    }
}
        
- (void)test0244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ecaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ecaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ecaron without a semi-colon");
    }
}
        
- (void)test0245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ecaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ecaron; with a semi-colon");
    }
}
        
- (void)test0246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ecirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ecirc without a semi-colon");
    }
}
        
- (void)test0247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ecirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ecirc; with a semi-colon");
    }
}
        
- (void)test0248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ecy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ecy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ecy without a semi-colon");
    }
}
        
- (void)test0249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ecy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ecy; with a semi-colon");
    }
}
        
- (void)test0250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Edot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Edot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Edot without a semi-colon");
    }
}
        
- (void)test0251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Edot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Edot; with a semi-colon");
    }
}
        
- (void)test0252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Efr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Efr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Efr without a semi-colon");
    }
}
        
- (void)test0253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Efr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Efr; with a semi-colon");
    }
}
        
- (void)test0254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Egrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Egrave without a semi-colon");
    }
}
        
- (void)test0255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Egrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Egrave; with a semi-colon");
    }
}
        
- (void)test0256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Element"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Element"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Element without a semi-colon");
    }
}
        
- (void)test0257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Element;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Element; with a semi-colon");
    }
}
        
- (void)test0258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Emacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Emacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Emacr without a semi-colon");
    }
}
        
- (void)test0259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Emacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Emacr; with a semi-colon");
    }
}
        
- (void)test0260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&EmptySmallSquare"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&EmptySmallSquare"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: EmptySmallSquare without a semi-colon");
    }
}
        
- (void)test0261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&EmptySmallSquare;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: EmptySmallSquare; with a semi-colon");
    }
}
        
- (void)test0262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&EmptyVerySmallSquare"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&EmptyVerySmallSquare"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: EmptyVerySmallSquare without a semi-colon");
    }
}
        
- (void)test0263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&EmptyVerySmallSquare;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: EmptyVerySmallSquare; with a semi-colon");
    }
}
        
- (void)test0264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Eogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Eogon without a semi-colon");
    }
}
        
- (void)test0265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Eogon; with a semi-colon");
    }
}
        
- (void)test0266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Eopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Eopf without a semi-colon");
    }
}
        
- (void)test0267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Eopf; with a semi-colon");
    }
}
        
- (void)test0268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Epsilon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Epsilon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Epsilon without a semi-colon");
    }
}
        
- (void)test0269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Epsilon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Epsilon; with a semi-colon");
    }
}
        
- (void)test0270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Equal"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Equal"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Equal without a semi-colon");
    }
}
        
- (void)test0271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Equal;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Equal; with a semi-colon");
    }
}
        
- (void)test0272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&EqualTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&EqualTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: EqualTilde without a semi-colon");
    }
}
        
- (void)test0273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&EqualTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: EqualTilde; with a semi-colon");
    }
}
        
- (void)test0274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Equilibrium"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Equilibrium"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Equilibrium without a semi-colon");
    }
}
        
- (void)test0275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Equilibrium;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Equilibrium; with a semi-colon");
    }
}
        
- (void)test0276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Escr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Escr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Escr without a semi-colon");
    }
}
        
- (void)test0277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Escr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Escr; with a semi-colon");
    }
}
        
- (void)test0278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Esim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Esim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Esim without a semi-colon");
    }
}
        
- (void)test0279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Esim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Esim; with a semi-colon");
    }
}
        
- (void)test0280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Eta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Eta without a semi-colon");
    }
}
        
- (void)test0281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Eta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Eta; with a semi-colon");
    }
}
        
- (void)test0282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Euml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Euml without a semi-colon");
    }
}
        
- (void)test0283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Euml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Euml; with a semi-colon");
    }
}
        
- (void)test0284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Exists"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Exists"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Exists without a semi-colon");
    }
}
        
- (void)test0285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Exists;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Exists; with a semi-colon");
    }
}
        
- (void)test0286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ExponentialE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ExponentialE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ExponentialE without a semi-colon");
    }
}
        
- (void)test0287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ExponentialE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ExponentialE; with a semi-colon");
    }
}
        
- (void)test0288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Fcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Fcy without a semi-colon");
    }
}
        
- (void)test0289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Fcy; with a semi-colon");
    }
}
        
- (void)test0290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ffr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ffr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ffr without a semi-colon");
    }
}
        
- (void)test0291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ffr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ffr; with a semi-colon");
    }
}
        
- (void)test0292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&FilledSmallSquare"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&FilledSmallSquare"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: FilledSmallSquare without a semi-colon");
    }
}
        
- (void)test0293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&FilledSmallSquare;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: FilledSmallSquare; with a semi-colon");
    }
}
        
- (void)test0294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&FilledVerySmallSquare"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&FilledVerySmallSquare"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: FilledVerySmallSquare without a semi-colon");
    }
}
        
- (void)test0295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&FilledVerySmallSquare;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: FilledVerySmallSquare; with a semi-colon");
    }
}
        
- (void)test0296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Fopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Fopf without a semi-colon");
    }
}
        
- (void)test0297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Fopf; with a semi-colon");
    }
}
        
- (void)test0298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ForAll"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ForAll"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ForAll without a semi-colon");
    }
}
        
- (void)test0299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ForAll;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ForAll; with a semi-colon");
    }
}
        
- (void)test0300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Fouriertrf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fouriertrf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Fouriertrf without a semi-colon");
    }
}
        
- (void)test0301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fouriertrf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Fouriertrf; with a semi-colon");
    }
}
        
- (void)test0302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Fscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Fscr without a semi-colon");
    }
}
        
- (void)test0303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Fscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Fscr; with a semi-colon");
    }
}
        
- (void)test0304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GJcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GJcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GJcy without a semi-colon");
    }
}
        
- (void)test0305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GJcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GJcy; with a semi-colon");
    }
}
        
- (void)test0306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @">"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GT"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GT without a semi-colon");
    }
}
        
- (void)test0307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @">"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GT;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GT; with a semi-colon");
    }
}
        
- (void)test0308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gamma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gamma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gamma without a semi-colon");
    }
}
        
- (void)test0309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gamma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gamma; with a semi-colon");
    }
}
        
- (void)test0310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gammad"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gammad"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gammad without a semi-colon");
    }
}
        
- (void)test0311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gammad;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gammad; with a semi-colon");
    }
}
        
- (void)test0312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gbreve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gbreve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gbreve without a semi-colon");
    }
}
        
- (void)test0313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gbreve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gbreve; with a semi-colon");
    }
}
        
- (void)test0314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gcedil without a semi-colon");
    }
}
        
- (void)test0315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gcedil; with a semi-colon");
    }
}
        
- (void)test0316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gcirc without a semi-colon");
    }
}
        
- (void)test0317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gcirc; with a semi-colon");
    }
}
        
- (void)test0318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gcy without a semi-colon");
    }
}
        
- (void)test0319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gcy; with a semi-colon");
    }
}
        
- (void)test0320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gdot without a semi-colon");
    }
}
        
- (void)test0321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gdot; with a semi-colon");
    }
}
        
- (void)test0322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gfr without a semi-colon");
    }
}
        
- (void)test0323
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gfr; with a semi-colon");
    }
}
        
- (void)test0324
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gg without a semi-colon");
    }
}
        
- (void)test0325
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gg; with a semi-colon");
    }
}
        
- (void)test0326
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gopf without a semi-colon");
    }
}
        
- (void)test0327
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gopf; with a semi-colon");
    }
}
        
- (void)test0328
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GreaterEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GreaterEqual without a semi-colon");
    }
}
        
- (void)test0329
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GreaterEqual; with a semi-colon");
    }
}
        
- (void)test0330
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GreaterEqualLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterEqualLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GreaterEqualLess without a semi-colon");
    }
}
        
- (void)test0331
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterEqualLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GreaterEqualLess; with a semi-colon");
    }
}
        
- (void)test0332
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GreaterFullEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterFullEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GreaterFullEqual without a semi-colon");
    }
}
        
- (void)test0333
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterFullEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GreaterFullEqual; with a semi-colon");
    }
}
        
- (void)test0334
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GreaterGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GreaterGreater without a semi-colon");
    }
}
        
- (void)test0335
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GreaterGreater; with a semi-colon");
    }
}
        
- (void)test0336
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GreaterLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GreaterLess without a semi-colon");
    }
}
        
- (void)test0337
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GreaterLess; with a semi-colon");
    }
}
        
- (void)test0338
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GreaterSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GreaterSlantEqual without a semi-colon");
    }
}
        
- (void)test0339
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GreaterSlantEqual; with a semi-colon");
    }
}
        
- (void)test0340
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&GreaterTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: GreaterTilde without a semi-colon");
    }
}
        
- (void)test0341
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&GreaterTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: GreaterTilde; with a semi-colon");
    }
}
        
- (void)test0342
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gscr without a semi-colon");
    }
}
        
- (void)test0343
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gscr; with a semi-colon");
    }
}
        
- (void)test0344
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Gt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Gt without a semi-colon");
    }
}
        
- (void)test0345
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Gt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Gt; with a semi-colon");
    }
}
        
- (void)test0346
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&HARDcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HARDcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: HARDcy without a semi-colon");
    }
}
        
- (void)test0347
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HARDcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: HARDcy; with a semi-colon");
    }
}
        
- (void)test0348
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Hacek"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hacek"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Hacek without a semi-colon");
    }
}
        
- (void)test0349
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hacek;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Hacek; with a semi-colon");
    }
}
        
- (void)test0350
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Hat"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hat"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Hat without a semi-colon");
    }
}
        
- (void)test0351
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"^"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hat;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Hat; with a semi-colon");
    }
}
        
- (void)test0352
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Hcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Hcirc without a semi-colon");
    }
}
        
- (void)test0353
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Hcirc; with a semi-colon");
    }
}
        
- (void)test0354
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Hfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Hfr without a semi-colon");
    }
}
        
- (void)test0355
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Hfr; with a semi-colon");
    }
}
        
- (void)test0356
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&HilbertSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HilbertSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: HilbertSpace without a semi-colon");
    }
}
        
- (void)test0357
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HilbertSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: HilbertSpace; with a semi-colon");
    }
}
        
- (void)test0358
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Hopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Hopf without a semi-colon");
    }
}
        
- (void)test0359
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Hopf; with a semi-colon");
    }
}
        
- (void)test0360
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&HorizontalLine"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HorizontalLine"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: HorizontalLine without a semi-colon");
    }
}
        
- (void)test0361
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HorizontalLine;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: HorizontalLine; with a semi-colon");
    }
}
        
- (void)test0362
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Hscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Hscr without a semi-colon");
    }
}
        
- (void)test0363
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Hscr; with a semi-colon");
    }
}
        
- (void)test0364
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Hstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Hstrok without a semi-colon");
    }
}
        
- (void)test0365
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Hstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Hstrok; with a semi-colon");
    }
}
        
- (void)test0366
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&HumpDownHump"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HumpDownHump"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: HumpDownHump without a semi-colon");
    }
}
        
- (void)test0367
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HumpDownHump;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: HumpDownHump; with a semi-colon");
    }
}
        
- (void)test0368
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&HumpEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HumpEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: HumpEqual without a semi-colon");
    }
}
        
- (void)test0369
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&HumpEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: HumpEqual; with a semi-colon");
    }
}
        
- (void)test0370
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&IEcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&IEcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: IEcy without a semi-colon");
    }
}
        
- (void)test0371
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&IEcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: IEcy; with a semi-colon");
    }
}
        
- (void)test0372
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&IJlig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&IJlig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: IJlig without a semi-colon");
    }
}
        
- (void)test0373
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&IJlig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: IJlig; with a semi-colon");
    }
}
        
- (void)test0374
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&IOcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&IOcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: IOcy without a semi-colon");
    }
}
        
- (void)test0375
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&IOcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: IOcy; with a semi-colon");
    }
}
        
- (void)test0376
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iacute without a semi-colon");
    }
}
        
- (void)test0377
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iacute; with a semi-colon");
    }
}
        
- (void)test0378
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Icirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Icirc without a semi-colon");
    }
}
        
- (void)test0379
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Icirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Icirc; with a semi-colon");
    }
}
        
- (void)test0380
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Icy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Icy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Icy without a semi-colon");
    }
}
        
- (void)test0381
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Icy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Icy; with a semi-colon");
    }
}
        
- (void)test0382
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Idot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Idot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Idot without a semi-colon");
    }
}
        
- (void)test0383
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Idot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Idot; with a semi-colon");
    }
}
        
- (void)test0384
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ifr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ifr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ifr without a semi-colon");
    }
}
        
- (void)test0385
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ifr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ifr; with a semi-colon");
    }
}
        
- (void)test0386
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Igrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Igrave without a semi-colon");
    }
}
        
- (void)test0387
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Igrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Igrave; with a semi-colon");
    }
}
        
- (void)test0388
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Im"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Im"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Im without a semi-colon");
    }
}
        
- (void)test0389
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Im;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Im; with a semi-colon");
    }
}
        
- (void)test0390
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Imacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Imacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Imacr without a semi-colon");
    }
}
        
- (void)test0391
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Imacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Imacr; with a semi-colon");
    }
}
        
- (void)test0392
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ImaginaryI"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ImaginaryI"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ImaginaryI without a semi-colon");
    }
}
        
- (void)test0393
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ImaginaryI;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ImaginaryI; with a semi-colon");
    }
}
        
- (void)test0394
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Implies"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Implies"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Implies without a semi-colon");
    }
}
        
- (void)test0395
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Implies;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Implies; with a semi-colon");
    }
}
        
- (void)test0396
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Int"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Int"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Int without a semi-colon");
    }
}
        
- (void)test0397
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Int;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Int; with a semi-colon");
    }
}
        
- (void)test0398
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Integral"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Integral"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Integral without a semi-colon");
    }
}
        
- (void)test0399
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Integral;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Integral; with a semi-colon");
    }
}
        
- (void)test0400
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Intersection"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Intersection"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Intersection without a semi-colon");
    }
}
        
- (void)test0401
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Intersection;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Intersection; with a semi-colon");
    }
}
        
- (void)test0402
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&InvisibleComma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&InvisibleComma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: InvisibleComma without a semi-colon");
    }
}
        
- (void)test0403
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Å£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&InvisibleComma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: InvisibleComma; with a semi-colon");
    }
}
        
- (void)test0404
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&InvisibleTimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&InvisibleTimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: InvisibleTimes without a semi-colon");
    }
}
        
- (void)test0405
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Å¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&InvisibleTimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: InvisibleTimes; with a semi-colon");
    }
}
        
- (void)test0406
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Iogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Iogon without a semi-colon");
    }
}
        
- (void)test0407
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iogon; with a semi-colon");
    }
}
        
- (void)test0408
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Iopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Iopf without a semi-colon");
    }
}
        
- (void)test0409
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iopf; with a semi-colon");
    }
}
        
- (void)test0410
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Iota"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iota"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Iota without a semi-colon");
    }
}
        
- (void)test0411
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iota;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iota; with a semi-colon");
    }
}
        
- (void)test0412
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Iscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Iscr without a semi-colon");
    }
}
        
- (void)test0413
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iscr; with a semi-colon");
    }
}
        
- (void)test0414
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Itilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Itilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Itilde without a semi-colon");
    }
}
        
- (void)test0415
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Itilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Itilde; with a semi-colon");
    }
}
        
- (void)test0416
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Iukcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iukcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Iukcy without a semi-colon");
    }
}
        
- (void)test0417
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iukcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iukcy; with a semi-colon");
    }
}
        
- (void)test0418
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iuml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iuml without a semi-colon");
    }
}
        
- (void)test0419
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Iuml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Iuml; with a semi-colon");
    }
}
        
- (void)test0420
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Jcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Jcirc without a semi-colon");
    }
}
        
- (void)test0421
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Jcirc; with a semi-colon");
    }
}
        
- (void)test0422
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Jcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Jcy without a semi-colon");
    }
}
        
- (void)test0423
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Jcy; with a semi-colon");
    }
}
        
- (void)test0424
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Jfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Jfr without a semi-colon");
    }
}
        
- (void)test0425
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Jfr; with a semi-colon");
    }
}
        
- (void)test0426
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Jopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Jopf without a semi-colon");
    }
}
        
- (void)test0427
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Jopf; with a semi-colon");
    }
}
        
- (void)test0428
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Jscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Jscr without a semi-colon");
    }
}
        
- (void)test0429
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Jscr; with a semi-colon");
    }
}
        
- (void)test0430
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Jsercy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jsercy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Jsercy without a semi-colon");
    }
}
        
- (void)test0431
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jsercy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Jsercy; with a semi-colon");
    }
}
        
- (void)test0432
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Jukcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jukcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Jukcy without a semi-colon");
    }
}
        
- (void)test0433
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Jukcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Jukcy; with a semi-colon");
    }
}
        
- (void)test0434
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&KHcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&KHcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: KHcy without a semi-colon");
    }
}
        
- (void)test0435
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&KHcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: KHcy; with a semi-colon");
    }
}
        
- (void)test0436
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&KJcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&KJcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: KJcy without a semi-colon");
    }
}
        
- (void)test0437
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&KJcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: KJcy; with a semi-colon");
    }
}
        
- (void)test0438
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Kappa"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kappa"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Kappa without a semi-colon");
    }
}
        
- (void)test0439
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kappa;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Kappa; with a semi-colon");
    }
}
        
- (void)test0440
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Kcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Kcedil without a semi-colon");
    }
}
        
- (void)test0441
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Kcedil; with a semi-colon");
    }
}
        
- (void)test0442
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Kcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Kcy without a semi-colon");
    }
}
        
- (void)test0443
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Kcy; with a semi-colon");
    }
}
        
- (void)test0444
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Kfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Kfr without a semi-colon");
    }
}
        
- (void)test0445
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Kfr; with a semi-colon");
    }
}
        
- (void)test0446
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Kopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Kopf without a semi-colon");
    }
}
        
- (void)test0447
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Kopf; with a semi-colon");
    }
}
        
- (void)test0448
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Kscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Kscr without a semi-colon");
    }
}
        
- (void)test0449
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Kscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Kscr; with a semi-colon");
    }
}
        
- (void)test0450
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LJcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LJcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LJcy without a semi-colon");
    }
}
        
- (void)test0451
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LJcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LJcy; with a semi-colon");
    }
}
        
- (void)test0452
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LT"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LT without a semi-colon");
    }
}
        
- (void)test0453
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LT;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LT; with a semi-colon");
    }
}
        
- (void)test0454
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lacute without a semi-colon");
    }
}
        
- (void)test0455
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lacute; with a semi-colon");
    }
}
        
- (void)test0456
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lambda"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lambda"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lambda without a semi-colon");
    }
}
        
- (void)test0457
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lambda;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lambda; with a semi-colon");
    }
}
        
- (void)test0458
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lang without a semi-colon");
    }
}
        
- (void)test0459
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lang; with a semi-colon");
    }
}
        
- (void)test0460
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Laplacetrf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Laplacetrf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Laplacetrf without a semi-colon");
    }
}
        
- (void)test0461
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Laplacetrf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Laplacetrf; with a semi-colon");
    }
}
        
- (void)test0462
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Larr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Larr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Larr without a semi-colon");
    }
}
        
- (void)test0463
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Larr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Larr; with a semi-colon");
    }
}
        
- (void)test0464
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lcaron without a semi-colon");
    }
}
        
- (void)test0465
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lcaron; with a semi-colon");
    }
}
        
- (void)test0466
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lcedil without a semi-colon");
    }
}
        
- (void)test0467
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lcedil; with a semi-colon");
    }
}
        
- (void)test0468
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lcy without a semi-colon");
    }
}
        
- (void)test0469
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lcy; with a semi-colon");
    }
}
        
- (void)test0470
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftAngleBracket"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftAngleBracket"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftAngleBracket without a semi-colon");
    }
}
        
- (void)test0471
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftAngleBracket;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftAngleBracket; with a semi-colon");
    }
}
        
- (void)test0472
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftArrow without a semi-colon");
    }
}
        
- (void)test0473
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftArrow; with a semi-colon");
    }
}
        
- (void)test0474
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftArrowBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftArrowBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftArrowBar without a semi-colon");
    }
}
        
- (void)test0475
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚á§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftArrowBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftArrowBar; with a semi-colon");
    }
}
        
- (void)test0476
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftArrowRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftArrowRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftArrowRightArrow without a semi-colon");
    }
}
        
- (void)test0477
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftArrowRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftArrowRightArrow; with a semi-colon");
    }
}
        
- (void)test0478
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftCeiling"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftCeiling"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftCeiling without a semi-colon");
    }
}
        
- (void)test0479
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftCeiling;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftCeiling; with a semi-colon");
    }
}
        
- (void)test0480
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftDoubleBracket"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDoubleBracket"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftDoubleBracket without a semi-colon");
    }
}
        
- (void)test0481
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDoubleBracket;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftDoubleBracket; with a semi-colon");
    }
}
        
- (void)test0482
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftDownTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDownTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftDownTeeVector without a semi-colon");
    }
}
        
- (void)test0483
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDownTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftDownTeeVector; with a semi-colon");
    }
}
        
- (void)test0484
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftDownVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDownVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftDownVector without a semi-colon");
    }
}
        
- (void)test0485
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDownVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftDownVector; with a semi-colon");
    }
}
        
- (void)test0486
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftDownVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDownVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftDownVectorBar without a semi-colon");
    }
}
        
- (void)test0487
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftDownVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftDownVectorBar; with a semi-colon");
    }
}
        
- (void)test0488
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftFloor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftFloor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftFloor without a semi-colon");
    }
}
        
- (void)test0489
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftFloor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftFloor; with a semi-colon");
    }
}
        
- (void)test0490
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftRightArrow without a semi-colon");
    }
}
        
- (void)test0491
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftRightArrow; with a semi-colon");
    }
}
        
- (void)test0492
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftRightVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftRightVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftRightVector without a semi-colon");
    }
}
        
- (void)test0493
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftRightVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftRightVector; with a semi-colon");
    }
}
        
- (void)test0494
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftTee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftTee without a semi-colon");
    }
}
        
- (void)test0495
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftTee; with a semi-colon");
    }
}
        
- (void)test0496
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftTeeArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTeeArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftTeeArrow without a semi-colon");
    }
}
        
- (void)test0497
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTeeArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftTeeArrow; with a semi-colon");
    }
}
        
- (void)test0498
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftTeeVector without a semi-colon");
    }
}
        
- (void)test0499
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftTeeVector; with a semi-colon");
    }
}
        
- (void)test0500
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftTriangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTriangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftTriangle without a semi-colon");
    }
}
        
- (void)test0501
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTriangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftTriangle; with a semi-colon");
    }
}
        
- (void)test0502
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftTriangleBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTriangleBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftTriangleBar without a semi-colon");
    }
}
        
- (void)test0503
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTriangleBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftTriangleBar; with a semi-colon");
    }
}
        
- (void)test0504
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftTriangleEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTriangleEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftTriangleEqual without a semi-colon");
    }
}
        
- (void)test0505
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftTriangleEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftTriangleEqual; with a semi-colon");
    }
}
        
- (void)test0506
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftUpDownVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpDownVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftUpDownVector without a semi-colon");
    }
}
        
- (void)test0507
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpDownVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftUpDownVector; with a semi-colon");
    }
}
        
- (void)test0508
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftUpTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftUpTeeVector without a semi-colon");
    }
}
        
- (void)test0509
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftUpTeeVector; with a semi-colon");
    }
}
        
- (void)test0510
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftUpVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftUpVector without a semi-colon");
    }
}
        
- (void)test0511
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftUpVector; with a semi-colon");
    }
}
        
- (void)test0512
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftUpVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftUpVectorBar without a semi-colon");
    }
}
        
- (void)test0513
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftUpVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftUpVectorBar; with a semi-colon");
    }
}
        
- (void)test0514
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftVector without a semi-colon");
    }
}
        
- (void)test0515
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftVector; with a semi-colon");
    }
}
        
- (void)test0516
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LeftVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LeftVectorBar without a semi-colon");
    }
}
        
- (void)test0517
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LeftVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LeftVectorBar; with a semi-colon");
    }
}
        
- (void)test0518
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Leftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Leftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Leftarrow without a semi-colon");
    }
}
        
- (void)test0519
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Leftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Leftarrow; with a semi-colon");
    }
}
        
- (void)test0520
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Leftrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Leftrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Leftrightarrow without a semi-colon");
    }
}
        
- (void)test0521
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Leftrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Leftrightarrow; with a semi-colon");
    }
}
        
- (void)test0522
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LessEqualGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessEqualGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LessEqualGreater without a semi-colon");
    }
}
        
- (void)test0523
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessEqualGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LessEqualGreater; with a semi-colon");
    }
}
        
- (void)test0524
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LessFullEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessFullEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LessFullEqual without a semi-colon");
    }
}
        
- (void)test0525
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessFullEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LessFullEqual; with a semi-colon");
    }
}
        
- (void)test0526
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LessGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LessGreater without a semi-colon");
    }
}
        
- (void)test0527
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LessGreater; with a semi-colon");
    }
}
        
- (void)test0528
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LessLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LessLess without a semi-colon");
    }
}
        
- (void)test0529
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LessLess; with a semi-colon");
    }
}
        
- (void)test0530
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LessSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LessSlantEqual without a semi-colon");
    }
}
        
- (void)test0531
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LessSlantEqual; with a semi-colon");
    }
}
        
- (void)test0532
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LessTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LessTilde without a semi-colon");
    }
}
        
- (void)test0533
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LessTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LessTilde; with a semi-colon");
    }
}
        
- (void)test0534
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lfr without a semi-colon");
    }
}
        
- (void)test0535
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lfr; with a semi-colon");
    }
}
        
- (void)test0536
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ll"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ll"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ll without a semi-colon");
    }
}
        
- (void)test0537
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ll;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ll; with a semi-colon");
    }
}
        
- (void)test0538
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lleftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lleftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lleftarrow without a semi-colon");
    }
}
        
- (void)test0539
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lleftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lleftarrow; with a semi-colon");
    }
}
        
- (void)test0540
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lmidot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lmidot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lmidot without a semi-colon");
    }
}
        
- (void)test0541
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lmidot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lmidot; with a semi-colon");
    }
}
        
- (void)test0542
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LongLeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LongLeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LongLeftArrow without a semi-colon");
    }
}
        
- (void)test0543
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LongLeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LongLeftArrow; with a semi-colon");
    }
}
        
- (void)test0544
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LongLeftRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LongLeftRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LongLeftRightArrow without a semi-colon");
    }
}
        
- (void)test0545
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LongLeftRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LongLeftRightArrow; with a semi-colon");
    }
}
        
- (void)test0546
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LongRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LongRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LongRightArrow without a semi-colon");
    }
}
        
- (void)test0547
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LongRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LongRightArrow; with a semi-colon");
    }
}
        
- (void)test0548
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Longleftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Longleftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Longleftarrow without a semi-colon");
    }
}
        
- (void)test0549
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Longleftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Longleftarrow; with a semi-colon");
    }
}
        
- (void)test0550
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Longleftrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Longleftrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Longleftrightarrow without a semi-colon");
    }
}
        
- (void)test0551
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Longleftrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Longleftrightarrow; with a semi-colon");
    }
}
        
- (void)test0552
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Longrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Longrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Longrightarrow without a semi-colon");
    }
}
        
- (void)test0553
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Longrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Longrightarrow; with a semi-colon");
    }
}
        
- (void)test0554
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lopf without a semi-colon");
    }
}
        
- (void)test0555
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lopf; with a semi-colon");
    }
}
        
- (void)test0556
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LowerLeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LowerLeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LowerLeftArrow without a semi-colon");
    }
}
        
- (void)test0557
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LowerLeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LowerLeftArrow; with a semi-colon");
    }
}
        
- (void)test0558
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&LowerRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LowerRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: LowerRightArrow without a semi-colon");
    }
}
        
- (void)test0559
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&LowerRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: LowerRightArrow; with a semi-colon");
    }
}
        
- (void)test0560
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lscr without a semi-colon");
    }
}
        
- (void)test0561
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lscr; with a semi-colon");
    }
}
        
- (void)test0562
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lsh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lsh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lsh without a semi-colon");
    }
}
        
- (void)test0563
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lsh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lsh; with a semi-colon");
    }
}
        
- (void)test0564
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lstrok without a semi-colon");
    }
}
        
- (void)test0565
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lstrok; with a semi-colon");
    }
}
        
- (void)test0566
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Lt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Lt without a semi-colon");
    }
}
        
- (void)test0567
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Lt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Lt; with a semi-colon");
    }
}
        
- (void)test0568
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Map"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Map"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Map without a semi-colon");
    }
}
        
- (void)test0569
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Map;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Map; with a semi-colon");
    }
}
        
- (void)test0570
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Mcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Mcy without a semi-colon");
    }
}
        
- (void)test0571
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Mcy; with a semi-colon");
    }
}
        
- (void)test0572
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&MediumSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&MediumSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: MediumSpace without a semi-colon");
    }
}
        
- (void)test0573
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Åü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&MediumSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: MediumSpace; with a semi-colon");
    }
}
        
- (void)test0574
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Mellintrf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mellintrf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Mellintrf without a semi-colon");
    }
}
        
- (void)test0575
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mellintrf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Mellintrf; with a semi-colon");
    }
}
        
- (void)test0576
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Mfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Mfr without a semi-colon");
    }
}
        
- (void)test0577
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Mfr; with a semi-colon");
    }
}
        
- (void)test0578
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&MinusPlus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&MinusPlus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: MinusPlus without a semi-colon");
    }
}
        
- (void)test0579
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&MinusPlus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: MinusPlus; with a semi-colon");
    }
}
        
- (void)test0580
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Mopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Mopf without a semi-colon");
    }
}
        
- (void)test0581
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Mopf; with a semi-colon");
    }
}
        
- (void)test0582
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Mscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Mscr without a semi-colon");
    }
}
        
- (void)test0583
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Mscr; with a semi-colon");
    }
}
        
- (void)test0584
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Mu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Mu without a semi-colon");
    }
}
        
- (void)test0585
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Mu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Mu; with a semi-colon");
    }
}
        
- (void)test0586
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NJcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NJcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NJcy without a semi-colon");
    }
}
        
- (void)test0587
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NJcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NJcy; with a semi-colon");
    }
}
        
- (void)test0588
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Nacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Nacute without a semi-colon");
    }
}
        
- (void)test0589
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Nacute; with a semi-colon");
    }
}
        
- (void)test0590
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ncaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ncaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ncaron without a semi-colon");
    }
}
        
- (void)test0591
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ncaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ncaron; with a semi-colon");
    }
}
        
- (void)test0592
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ncedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ncedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ncedil without a semi-colon");
    }
}
        
- (void)test0593
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ncedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ncedil; with a semi-colon");
    }
}
        
- (void)test0594
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ncy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ncy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ncy without a semi-colon");
    }
}
        
- (void)test0595
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ncy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ncy; with a semi-colon");
    }
}
        
- (void)test0596
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NegativeMediumSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeMediumSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NegativeMediumSpace without a semi-colon");
    }
}
        
- (void)test0597
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeMediumSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NegativeMediumSpace; with a semi-colon");
    }
}
        
- (void)test0598
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NegativeThickSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeThickSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NegativeThickSpace without a semi-colon");
    }
}
        
- (void)test0599
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeThickSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NegativeThickSpace; with a semi-colon");
    }
}
        
- (void)test0600
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NegativeThinSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeThinSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NegativeThinSpace without a semi-colon");
    }
}
        
- (void)test0601
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeThinSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NegativeThinSpace; with a semi-colon");
    }
}
        
- (void)test0602
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NegativeVeryThinSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeVeryThinSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NegativeVeryThinSpace without a semi-colon");
    }
}
        
- (void)test0603
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NegativeVeryThinSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NegativeVeryThinSpace; with a semi-colon");
    }
}
        
- (void)test0604
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NestedGreaterGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NestedGreaterGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NestedGreaterGreater without a semi-colon");
    }
}
        
- (void)test0605
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NestedGreaterGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NestedGreaterGreater; with a semi-colon");
    }
}
        
- (void)test0606
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NestedLessLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NestedLessLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NestedLessLess without a semi-colon");
    }
}
        
- (void)test0607
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NestedLessLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NestedLessLess; with a semi-colon");
    }
}
        
- (void)test0608
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NewLine"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NewLine"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NewLine without a semi-colon");
    }
}
        
- (void)test0609
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NewLine;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NewLine; with a semi-colon");
    }
}
        
- (void)test0610
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Nfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Nfr without a semi-colon");
    }
}
        
- (void)test0611
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Nfr; with a semi-colon");
    }
}
        
- (void)test0612
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NoBreak"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NoBreak"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NoBreak without a semi-colon");
    }
}
        
- (void)test0613
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Å†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NoBreak;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NoBreak; with a semi-colon");
    }
}
        
- (void)test0614
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NonBreakingSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NonBreakingSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NonBreakingSpace without a semi-colon");
    }
}
        
- (void)test0615
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NonBreakingSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NonBreakingSpace; with a semi-colon");
    }
}
        
- (void)test0616
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Nopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Nopf without a semi-colon");
    }
}
        
- (void)test0617
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Nopf; with a semi-colon");
    }
}
        
- (void)test0618
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Not"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Not"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Not without a semi-colon");
    }
}
        
- (void)test0619
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Not;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Not; with a semi-colon");
    }
}
        
- (void)test0620
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotCongruent"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotCongruent"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotCongruent without a semi-colon");
    }
}
        
- (void)test0621
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotCongruent;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotCongruent; with a semi-colon");
    }
}
        
- (void)test0622
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotCupCap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotCupCap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotCupCap without a semi-colon");
    }
}
        
- (void)test0623
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotCupCap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotCupCap; with a semi-colon");
    }
}
        
- (void)test0624
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotDoubleVerticalBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotDoubleVerticalBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotDoubleVerticalBar without a semi-colon");
    }
}
        
- (void)test0625
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotDoubleVerticalBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotDoubleVerticalBar; with a semi-colon");
    }
}
        
- (void)test0626
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotElement"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotElement"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotElement without a semi-colon");
    }
}
        
- (void)test0627
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotElement;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotElement; with a semi-colon");
    }
}
        
- (void)test0628
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotEqual without a semi-colon");
    }
}
        
- (void)test0629
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotEqual; with a semi-colon");
    }
}
        
- (void)test0630
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotEqualTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotEqualTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotEqualTilde without a semi-colon");
    }
}
        
- (void)test0631
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÇÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotEqualTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotEqualTilde; with a semi-colon");
    }
}
        
- (void)test0632
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotExists"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotExists"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotExists without a semi-colon");
    }
}
        
- (void)test0633
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotExists;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotExists; with a semi-colon");
    }
}
        
- (void)test0634
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotGreater without a semi-colon");
    }
}
        
- (void)test0635
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotGreater; with a semi-colon");
    }
}
        
- (void)test0636
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotGreaterEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotGreaterEqual without a semi-colon");
    }
}
        
- (void)test0637
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotGreaterEqual; with a semi-colon");
    }
}
        
- (void)test0638
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotGreaterFullEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterFullEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotGreaterFullEqual without a semi-colon");
    }
}
        
- (void)test0639
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âßÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterFullEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotGreaterFullEqual; with a semi-colon");
    }
}
        
- (void)test0640
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotGreaterGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotGreaterGreater without a semi-colon");
    }
}
        
- (void)test0641
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â´Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotGreaterGreater; with a semi-colon");
    }
}
        
- (void)test0642
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotGreaterLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotGreaterLess without a semi-colon");
    }
}
        
- (void)test0643
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotGreaterLess; with a semi-colon");
    }
}
        
- (void)test0644
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotGreaterSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotGreaterSlantEqual without a semi-colon");
    }
}
        
- (void)test0645
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©æÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotGreaterSlantEqual; with a semi-colon");
    }
}
        
- (void)test0646
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotGreaterTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotGreaterTilde without a semi-colon");
    }
}
        
- (void)test0647
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotGreaterTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotGreaterTilde; with a semi-colon");
    }
}
        
- (void)test0648
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotHumpDownHump"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotHumpDownHump"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotHumpDownHump without a semi-colon");
    }
}
        
- (void)test0649
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âéÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotHumpDownHump;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotHumpDownHump; with a semi-colon");
    }
}
        
- (void)test0650
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotHumpEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotHumpEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotHumpEqual without a semi-colon");
    }
}
        
- (void)test0651
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âèÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotHumpEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotHumpEqual; with a semi-colon");
    }
}
        
- (void)test0652
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLeftTriangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLeftTriangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLeftTriangle without a semi-colon");
    }
}
        
- (void)test0653
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLeftTriangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLeftTriangle; with a semi-colon");
    }
}
        
- (void)test0654
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLeftTriangleBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLeftTriangleBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLeftTriangleBar without a semi-colon");
    }
}
        
- (void)test0655
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßèÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLeftTriangleBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLeftTriangleBar; with a semi-colon");
    }
}
        
- (void)test0656
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLeftTriangleEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLeftTriangleEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLeftTriangleEqual without a semi-colon");
    }
}
        
- (void)test0657
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLeftTriangleEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLeftTriangleEqual; with a semi-colon");
    }
}
        
- (void)test0658
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLess without a semi-colon");
    }
}
        
- (void)test0659
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLess; with a semi-colon");
    }
}
        
- (void)test0660
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLessEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLessEqual without a semi-colon");
    }
}
        
- (void)test0661
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLessEqual; with a semi-colon");
    }
}
        
- (void)test0662
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLessGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLessGreater without a semi-colon");
    }
}
        
- (void)test0663
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLessGreater; with a semi-colon");
    }
}
        
- (void)test0664
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLessLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLessLess without a semi-colon");
    }
}
        
- (void)test0665
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â™Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLessLess; with a semi-colon");
    }
}
        
- (void)test0666
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLessSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLessSlantEqual without a semi-colon");
    }
}
        
- (void)test0667
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ΩÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLessSlantEqual; with a semi-colon");
    }
}
        
- (void)test0668
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotLessTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotLessTilde without a semi-colon");
    }
}
        
- (void)test0669
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotLessTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotLessTilde; with a semi-colon");
    }
}
        
- (void)test0670
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotNestedGreaterGreater"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotNestedGreaterGreater"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotNestedGreaterGreater without a semi-colon");
    }
}
        
- (void)test0671
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™¢Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotNestedGreaterGreater;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotNestedGreaterGreater; with a semi-colon");
    }
}
        
- (void)test0672
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotNestedLessLess"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotNestedLessLess"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotNestedLessLess without a semi-colon");
    }
}
        
- (void)test0673
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™°Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotNestedLessLess;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotNestedLessLess; with a semi-colon");
    }
}
        
- (void)test0674
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotPrecedes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotPrecedes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotPrecedes without a semi-colon");
    }
}
        
- (void)test0675
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotPrecedes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotPrecedes; with a semi-colon");
    }
}
        
- (void)test0676
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotPrecedesEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotPrecedesEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotPrecedesEqual without a semi-colon");
    }
}
        
- (void)test0677
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ØÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotPrecedesEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotPrecedesEqual; with a semi-colon");
    }
}
        
- (void)test0678
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotPrecedesSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotPrecedesSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotPrecedesSlantEqual without a semi-colon");
    }
}
        
- (void)test0679
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotPrecedesSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotPrecedesSlantEqual; with a semi-colon");
    }
}
        
- (void)test0680
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotReverseElement"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotReverseElement"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotReverseElement without a semi-colon");
    }
}
        
- (void)test0681
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotReverseElement;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotReverseElement; with a semi-colon");
    }
}
        
- (void)test0682
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotRightTriangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotRightTriangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotRightTriangle without a semi-colon");
    }
}
        
- (void)test0683
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotRightTriangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotRightTriangle; with a semi-colon");
    }
}
        
- (void)test0684
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotRightTriangleBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotRightTriangleBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotRightTriangleBar without a semi-colon");
    }
}
        
- (void)test0685
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßêÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotRightTriangleBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotRightTriangleBar; with a semi-colon");
    }
}
        
- (void)test0686
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotRightTriangleEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotRightTriangleEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotRightTriangleEqual without a semi-colon");
    }
}
        
- (void)test0687
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotRightTriangleEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotRightTriangleEqual; with a semi-colon");
    }
}
        
- (void)test0688
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSquareSubset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSubset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSquareSubset without a semi-colon");
    }
}
        
- (void)test0689
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äèÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSubset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSquareSubset; with a semi-colon");
    }
}
        
- (void)test0690
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSquareSubsetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSubsetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSquareSubsetEqual without a semi-colon");
    }
}
        
- (void)test0691
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSubsetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSquareSubsetEqual; with a semi-colon");
    }
}
        
- (void)test0692
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSquareSuperset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSuperset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSquareSuperset without a semi-colon");
    }
}
        
- (void)test0693
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äêÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSuperset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSquareSuperset; with a semi-colon");
    }
}
        
- (void)test0694
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSquareSupersetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSupersetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSquareSupersetEqual without a semi-colon");
    }
}
        
- (void)test0695
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSquareSupersetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSquareSupersetEqual; with a semi-colon");
    }
}
        
- (void)test0696
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSubset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSubset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSubset without a semi-colon");
    }
}
        
- (void)test0697
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÇ‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSubset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSubset; with a semi-colon");
    }
}
        
- (void)test0698
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSubsetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSubsetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSubsetEqual without a semi-colon");
    }
}
        
- (void)test0699
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSubsetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSubsetEqual; with a semi-colon");
    }
}
        
- (void)test0700
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSucceeds"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceeds"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSucceeds without a semi-colon");
    }
}
        
- (void)test0701
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceeds;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSucceeds; with a semi-colon");
    }
}
        
- (void)test0702
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSucceedsEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceedsEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSucceedsEqual without a semi-colon");
    }
}
        
- (void)test0703
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∞Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceedsEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSucceedsEqual; with a semi-colon");
    }
}
        
- (void)test0704
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSucceedsSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceedsSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSucceedsSlantEqual without a semi-colon");
    }
}
        
- (void)test0705
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceedsSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSucceedsSlantEqual; with a semi-colon");
    }
}
        
- (void)test0706
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSucceedsTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceedsTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSucceedsTilde without a semi-colon");
    }
}
        
- (void)test0707
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âøÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSucceedsTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSucceedsTilde; with a semi-colon");
    }
}
        
- (void)test0708
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSuperset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSuperset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSuperset without a semi-colon");
    }
}
        
- (void)test0709
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÉ‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSuperset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSuperset; with a semi-colon");
    }
}
        
- (void)test0710
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotSupersetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSupersetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotSupersetEqual without a semi-colon");
    }
}
        
- (void)test0711
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotSupersetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotSupersetEqual; with a semi-colon");
    }
}
        
- (void)test0712
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotTilde without a semi-colon");
    }
}
        
- (void)test0713
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotTilde; with a semi-colon");
    }
}
        
- (void)test0714
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotTildeEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTildeEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotTildeEqual without a semi-colon");
    }
}
        
- (void)test0715
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTildeEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotTildeEqual; with a semi-colon");
    }
}
        
- (void)test0716
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotTildeFullEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTildeFullEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotTildeFullEqual without a semi-colon");
    }
}
        
- (void)test0717
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTildeFullEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotTildeFullEqual; with a semi-colon");
    }
}
        
- (void)test0718
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotTildeTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTildeTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotTildeTilde without a semi-colon");
    }
}
        
- (void)test0719
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ââ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotTildeTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotTildeTilde; with a semi-colon");
    }
}
        
- (void)test0720
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&NotVerticalBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotVerticalBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: NotVerticalBar without a semi-colon");
    }
}
        
- (void)test0721
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&NotVerticalBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: NotVerticalBar; with a semi-colon");
    }
}
        
- (void)test0722
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Nscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Nscr without a semi-colon");
    }
}
        
- (void)test0723
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Nscr; with a semi-colon");
    }
}
        
- (void)test0724
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ntilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ntilde without a semi-colon");
    }
}
        
- (void)test0725
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ntilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ntilde; with a semi-colon");
    }
}
        
- (void)test0726
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Nu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Nu without a semi-colon");
    }
}
        
- (void)test0727
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Nu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Nu; with a semi-colon");
    }
}
        
- (void)test0728
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&OElig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OElig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: OElig without a semi-colon");
    }
}
        
- (void)test0729
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OElig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: OElig; with a semi-colon");
    }
}
        
- (void)test0730
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Oacute without a semi-colon");
    }
}
        
- (void)test0731
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Oacute; with a semi-colon");
    }
}
        
- (void)test0732
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ocirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ocirc without a semi-colon");
    }
}
        
- (void)test0733
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ocirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ocirc; with a semi-colon");
    }
}
        
- (void)test0734
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ocy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ocy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ocy without a semi-colon");
    }
}
        
- (void)test0735
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ocy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ocy; with a semi-colon");
    }
}
        
- (void)test0736
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Odblac"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Odblac"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Odblac without a semi-colon");
    }
}
        
- (void)test0737
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Odblac;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Odblac; with a semi-colon");
    }
}
        
- (void)test0738
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ofr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ofr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ofr without a semi-colon");
    }
}
        
- (void)test0739
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ofr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ofr; with a semi-colon");
    }
}
        
- (void)test0740
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ograve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ograve without a semi-colon");
    }
}
        
- (void)test0741
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ograve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ograve; with a semi-colon");
    }
}
        
- (void)test0742
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Omacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Omacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Omacr without a semi-colon");
    }
}
        
- (void)test0743
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Omacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Omacr; with a semi-colon");
    }
}
        
- (void)test0744
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Omega"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Omega"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Omega without a semi-colon");
    }
}
        
- (void)test0745
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Omega;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Omega; with a semi-colon");
    }
}
        
- (void)test0746
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Omicron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Omicron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Omicron without a semi-colon");
    }
}
        
- (void)test0747
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Omicron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Omicron; with a semi-colon");
    }
}
        
- (void)test0748
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Oopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Oopf without a semi-colon");
    }
}
        
- (void)test0749
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Oopf; with a semi-colon");
    }
}
        
- (void)test0750
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&OpenCurlyDoubleQuote"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OpenCurlyDoubleQuote"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: OpenCurlyDoubleQuote without a semi-colon");
    }
}
        
- (void)test0751
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OpenCurlyDoubleQuote;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: OpenCurlyDoubleQuote; with a semi-colon");
    }
}
        
- (void)test0752
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&OpenCurlyQuote"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OpenCurlyQuote"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: OpenCurlyQuote without a semi-colon");
    }
}
        
- (void)test0753
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OpenCurlyQuote;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: OpenCurlyQuote; with a semi-colon");
    }
}
        
- (void)test0754
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Or"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Or"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Or without a semi-colon");
    }
}
        
- (void)test0755
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Or;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Or; with a semi-colon");
    }
}
        
- (void)test0756
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Oscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Oscr without a semi-colon");
    }
}
        
- (void)test0757
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Oscr; with a semi-colon");
    }
}
        
- (void)test0758
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oslash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Oslash without a semi-colon");
    }
}
        
- (void)test0759
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Oslash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Oslash; with a semi-colon");
    }
}
        
- (void)test0760
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Otilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Otilde without a semi-colon");
    }
}
        
- (void)test0761
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Otilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Otilde; with a semi-colon");
    }
}
        
- (void)test0762
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Otimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Otimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Otimes without a semi-colon");
    }
}
        
- (void)test0763
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Otimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Otimes; with a semi-colon");
    }
}
        
- (void)test0764
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ouml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ouml without a semi-colon");
    }
}
        
- (void)test0765
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ouml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ouml; with a semi-colon");
    }
}
        
- (void)test0766
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&OverBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: OverBar without a semi-colon");
    }
}
        
- (void)test0767
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: OverBar; with a semi-colon");
    }
}
        
- (void)test0768
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&OverBrace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverBrace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: OverBrace without a semi-colon");
    }
}
        
- (void)test0769
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚èû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverBrace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: OverBrace; with a semi-colon");
    }
}
        
- (void)test0770
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&OverBracket"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverBracket"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: OverBracket without a semi-colon");
    }
}
        
- (void)test0771
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚é¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverBracket;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: OverBracket; with a semi-colon");
    }
}
        
- (void)test0772
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&OverParenthesis"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverParenthesis"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: OverParenthesis without a semi-colon");
    }
}
        
- (void)test0773
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚èú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&OverParenthesis;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: OverParenthesis; with a semi-colon");
    }
}
        
- (void)test0774
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&PartialD"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PartialD"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: PartialD without a semi-colon");
    }
}
        
- (void)test0775
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PartialD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: PartialD; with a semi-colon");
    }
}
        
- (void)test0776
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Pcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Pcy without a semi-colon");
    }
}
        
- (void)test0777
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Pcy; with a semi-colon");
    }
}
        
- (void)test0778
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Pfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Pfr without a semi-colon");
    }
}
        
- (void)test0779
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Pfr; with a semi-colon");
    }
}
        
- (void)test0780
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Phi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Phi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Phi without a semi-colon");
    }
}
        
- (void)test0781
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Phi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Phi; with a semi-colon");
    }
}
        
- (void)test0782
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Pi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Pi without a semi-colon");
    }
}
        
- (void)test0783
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Pi; with a semi-colon");
    }
}
        
- (void)test0784
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&PlusMinus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PlusMinus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: PlusMinus without a semi-colon");
    }
}
        
- (void)test0785
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PlusMinus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: PlusMinus; with a semi-colon");
    }
}
        
- (void)test0786
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Poincareplane"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Poincareplane"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Poincareplane without a semi-colon");
    }
}
        
- (void)test0787
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Poincareplane;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Poincareplane; with a semi-colon");
    }
}
        
- (void)test0788
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Popf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Popf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Popf without a semi-colon");
    }
}
        
- (void)test0789
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Popf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Popf; with a semi-colon");
    }
}
        
- (void)test0790
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Pr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Pr without a semi-colon");
    }
}
        
- (void)test0791
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Pr; with a semi-colon");
    }
}
        
- (void)test0792
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Precedes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Precedes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Precedes without a semi-colon");
    }
}
        
- (void)test0793
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Precedes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Precedes; with a semi-colon");
    }
}
        
- (void)test0794
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&PrecedesEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PrecedesEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: PrecedesEqual without a semi-colon");
    }
}
        
- (void)test0795
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PrecedesEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: PrecedesEqual; with a semi-colon");
    }
}
        
- (void)test0796
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&PrecedesSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PrecedesSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: PrecedesSlantEqual without a semi-colon");
    }
}
        
- (void)test0797
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PrecedesSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: PrecedesSlantEqual; with a semi-colon");
    }
}
        
- (void)test0798
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&PrecedesTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PrecedesTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: PrecedesTilde without a semi-colon");
    }
}
        
- (void)test0799
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&PrecedesTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: PrecedesTilde; with a semi-colon");
    }
}
        
- (void)test0800
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Prime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Prime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Prime without a semi-colon");
    }
}
        
- (void)test0801
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Prime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Prime; with a semi-colon");
    }
}
        
- (void)test0802
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Product"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Product"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Product without a semi-colon");
    }
}
        
- (void)test0803
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Product;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Product; with a semi-colon");
    }
}
        
- (void)test0804
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Proportion"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Proportion"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Proportion without a semi-colon");
    }
}
        
- (void)test0805
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Proportion;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Proportion; with a semi-colon");
    }
}
        
- (void)test0806
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Proportional"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Proportional"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Proportional without a semi-colon");
    }
}
        
- (void)test0807
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Proportional;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Proportional; with a semi-colon");
    }
}
        
- (void)test0808
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Pscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Pscr without a semi-colon");
    }
}
        
- (void)test0809
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Pscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Pscr; with a semi-colon");
    }
}
        
- (void)test0810
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Psi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Psi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Psi without a semi-colon");
    }
}
        
- (void)test0811
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Psi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Psi; with a semi-colon");
    }
}
        
- (void)test0812
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&QUOT"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: QUOT without a semi-colon");
    }
}
        
- (void)test0813
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&QUOT;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: QUOT; with a semi-colon");
    }
}
        
- (void)test0814
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Qfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Qfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Qfr without a semi-colon");
    }
}
        
- (void)test0815
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Qfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Qfr; with a semi-colon");
    }
}
        
- (void)test0816
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Qopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Qopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Qopf without a semi-colon");
    }
}
        
- (void)test0817
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Qopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Qopf; with a semi-colon");
    }
}
        
- (void)test0818
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Qscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Qscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Qscr without a semi-colon");
    }
}
        
- (void)test0819
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Qscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Qscr; with a semi-colon");
    }
}
        
- (void)test0820
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RBarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RBarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RBarr without a semi-colon");
    }
}
        
- (void)test0821
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RBarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RBarr; with a semi-colon");
    }
}
        
- (void)test0822
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&REG"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: REG without a semi-colon");
    }
}
        
- (void)test0823
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&REG;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: REG; with a semi-colon");
    }
}
        
- (void)test0824
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Racute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Racute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Racute without a semi-colon");
    }
}
        
- (void)test0825
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Racute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Racute; with a semi-colon");
    }
}
        
- (void)test0826
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rang without a semi-colon");
    }
}
        
- (void)test0827
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rang; with a semi-colon");
    }
}
        
- (void)test0828
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rarr without a semi-colon");
    }
}
        
- (void)test0829
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rarr; with a semi-colon");
    }
}
        
- (void)test0830
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rarrtl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rarrtl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rarrtl without a semi-colon");
    }
}
        
- (void)test0831
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rarrtl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rarrtl; with a semi-colon");
    }
}
        
- (void)test0832
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rcaron without a semi-colon");
    }
}
        
- (void)test0833
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rcaron; with a semi-colon");
    }
}
        
- (void)test0834
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rcedil without a semi-colon");
    }
}
        
- (void)test0835
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rcedil; with a semi-colon");
    }
}
        
- (void)test0836
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rcy without a semi-colon");
    }
}
        
- (void)test0837
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rcy; with a semi-colon");
    }
}
        
- (void)test0838
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Re"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Re"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Re without a semi-colon");
    }
}
        
- (void)test0839
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Re;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Re; with a semi-colon");
    }
}
        
- (void)test0840
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ReverseElement"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ReverseElement"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ReverseElement without a semi-colon");
    }
}
        
- (void)test0841
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ReverseElement;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ReverseElement; with a semi-colon");
    }
}
        
- (void)test0842
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ReverseEquilibrium"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ReverseEquilibrium"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ReverseEquilibrium without a semi-colon");
    }
}
        
- (void)test0843
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ReverseEquilibrium;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ReverseEquilibrium; with a semi-colon");
    }
}
        
- (void)test0844
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ReverseUpEquilibrium"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ReverseUpEquilibrium"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ReverseUpEquilibrium without a semi-colon");
    }
}
        
- (void)test0845
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ReverseUpEquilibrium;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ReverseUpEquilibrium; with a semi-colon");
    }
}
        
- (void)test0846
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rfr without a semi-colon");
    }
}
        
- (void)test0847
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rfr; with a semi-colon");
    }
}
        
- (void)test0848
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rho"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rho"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rho without a semi-colon");
    }
}
        
- (void)test0849
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rho;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rho; with a semi-colon");
    }
}
        
- (void)test0850
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightAngleBracket"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightAngleBracket"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightAngleBracket without a semi-colon");
    }
}
        
- (void)test0851
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightAngleBracket;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightAngleBracket; with a semi-colon");
    }
}
        
- (void)test0852
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightArrow without a semi-colon");
    }
}
        
- (void)test0853
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightArrow; with a semi-colon");
    }
}
        
- (void)test0854
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightArrowBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightArrowBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightArrowBar without a semi-colon");
    }
}
        
- (void)test0855
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚á•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightArrowBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightArrowBar; with a semi-colon");
    }
}
        
- (void)test0856
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightArrowLeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightArrowLeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightArrowLeftArrow without a semi-colon");
    }
}
        
- (void)test0857
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightArrowLeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightArrowLeftArrow; with a semi-colon");
    }
}
        
- (void)test0858
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightCeiling"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightCeiling"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightCeiling without a semi-colon");
    }
}
        
- (void)test0859
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightCeiling;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightCeiling; with a semi-colon");
    }
}
        
- (void)test0860
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightDoubleBracket"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDoubleBracket"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightDoubleBracket without a semi-colon");
    }
}
        
- (void)test0861
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDoubleBracket;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightDoubleBracket; with a semi-colon");
    }
}
        
- (void)test0862
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightDownTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDownTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightDownTeeVector without a semi-colon");
    }
}
        
- (void)test0863
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDownTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightDownTeeVector; with a semi-colon");
    }
}
        
- (void)test0864
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightDownVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDownVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightDownVector without a semi-colon");
    }
}
        
- (void)test0865
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDownVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightDownVector; with a semi-colon");
    }
}
        
- (void)test0866
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightDownVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDownVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightDownVectorBar without a semi-colon");
    }
}
        
- (void)test0867
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightDownVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightDownVectorBar; with a semi-colon");
    }
}
        
- (void)test0868
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightFloor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightFloor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightFloor without a semi-colon");
    }
}
        
- (void)test0869
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightFloor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightFloor; with a semi-colon");
    }
}
        
- (void)test0870
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightTee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightTee without a semi-colon");
    }
}
        
- (void)test0871
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightTee; with a semi-colon");
    }
}
        
- (void)test0872
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightTeeArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTeeArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightTeeArrow without a semi-colon");
    }
}
        
- (void)test0873
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTeeArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightTeeArrow; with a semi-colon");
    }
}
        
- (void)test0874
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightTeeVector without a semi-colon");
    }
}
        
- (void)test0875
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightTeeVector; with a semi-colon");
    }
}
        
- (void)test0876
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightTriangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTriangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightTriangle without a semi-colon");
    }
}
        
- (void)test0877
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTriangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightTriangle; with a semi-colon");
    }
}
        
- (void)test0878
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightTriangleBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTriangleBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightTriangleBar without a semi-colon");
    }
}
        
- (void)test0879
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTriangleBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightTriangleBar; with a semi-colon");
    }
}
        
- (void)test0880
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightTriangleEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTriangleEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightTriangleEqual without a semi-colon");
    }
}
        
- (void)test0881
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightTriangleEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightTriangleEqual; with a semi-colon");
    }
}
        
- (void)test0882
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightUpDownVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpDownVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightUpDownVector without a semi-colon");
    }
}
        
- (void)test0883
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpDownVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightUpDownVector; with a semi-colon");
    }
}
        
- (void)test0884
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightUpTeeVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpTeeVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightUpTeeVector without a semi-colon");
    }
}
        
- (void)test0885
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpTeeVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightUpTeeVector; with a semi-colon");
    }
}
        
- (void)test0886
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightUpVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightUpVector without a semi-colon");
    }
}
        
- (void)test0887
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightUpVector; with a semi-colon");
    }
}
        
- (void)test0888
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightUpVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightUpVectorBar without a semi-colon");
    }
}
        
- (void)test0889
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightUpVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightUpVectorBar; with a semi-colon");
    }
}
        
- (void)test0890
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightVector"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightVector"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightVector without a semi-colon");
    }
}
        
- (void)test0891
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightVector;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightVector; with a semi-colon");
    }
}
        
- (void)test0892
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RightVectorBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightVectorBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RightVectorBar without a semi-colon");
    }
}
        
- (void)test0893
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RightVectorBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RightVectorBar; with a semi-colon");
    }
}
        
- (void)test0894
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rightarrow without a semi-colon");
    }
}
        
- (void)test0895
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rightarrow; with a semi-colon");
    }
}
        
- (void)test0896
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ropf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ropf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ropf without a semi-colon");
    }
}
        
- (void)test0897
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ropf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ropf; with a semi-colon");
    }
}
        
- (void)test0898
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RoundImplies"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RoundImplies"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RoundImplies without a semi-colon");
    }
}
        
- (void)test0899
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RoundImplies;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RoundImplies; with a semi-colon");
    }
}
        
- (void)test0900
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rrightarrow without a semi-colon");
    }
}
        
- (void)test0901
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rrightarrow; with a semi-colon");
    }
}
        
- (void)test0902
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rscr without a semi-colon");
    }
}
        
- (void)test0903
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rscr; with a semi-colon");
    }
}
        
- (void)test0904
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Rsh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rsh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Rsh without a semi-colon");
    }
}
        
- (void)test0905
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Rsh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Rsh; with a semi-colon");
    }
}
        
- (void)test0906
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&RuleDelayed"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RuleDelayed"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: RuleDelayed without a semi-colon");
    }
}
        
- (void)test0907
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ß¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&RuleDelayed;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: RuleDelayed; with a semi-colon");
    }
}
        
- (void)test0908
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SHCHcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SHCHcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SHCHcy without a semi-colon");
    }
}
        
- (void)test0909
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SHCHcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SHCHcy; with a semi-colon");
    }
}
        
- (void)test0910
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SHcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SHcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SHcy without a semi-colon");
    }
}
        
- (void)test0911
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SHcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SHcy; with a semi-colon");
    }
}
        
- (void)test0912
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SOFTcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SOFTcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SOFTcy without a semi-colon");
    }
}
        
- (void)test0913
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SOFTcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SOFTcy; with a semi-colon");
    }
}
        
- (void)test0914
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sacute without a semi-colon");
    }
}
        
- (void)test0915
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sacute; with a semi-colon");
    }
}
        
- (void)test0916
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sc without a semi-colon");
    }
}
        
- (void)test0917
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sc; with a semi-colon");
    }
}
        
- (void)test0918
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Scaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Scaron without a semi-colon");
    }
}
        
- (void)test0919
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Scaron; with a semi-colon");
    }
}
        
- (void)test0920
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Scedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Scedil without a semi-colon");
    }
}
        
- (void)test0921
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Scedil; with a semi-colon");
    }
}
        
- (void)test0922
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Scirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Scirc without a semi-colon");
    }
}
        
- (void)test0923
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Scirc; with a semi-colon");
    }
}
        
- (void)test0924
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Scy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Scy without a semi-colon");
    }
}
        
- (void)test0925
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Scy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Scy; with a semi-colon");
    }
}
        
- (void)test0926
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sfr without a semi-colon");
    }
}
        
- (void)test0927
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sfr; with a semi-colon");
    }
}
        
- (void)test0928
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ShortDownArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortDownArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ShortDownArrow without a semi-colon");
    }
}
        
- (void)test0929
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortDownArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ShortDownArrow; with a semi-colon");
    }
}
        
- (void)test0930
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ShortLeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortLeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ShortLeftArrow without a semi-colon");
    }
}
        
- (void)test0931
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortLeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ShortLeftArrow; with a semi-colon");
    }
}
        
- (void)test0932
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ShortRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ShortRightArrow without a semi-colon");
    }
}
        
- (void)test0933
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ShortRightArrow; with a semi-colon");
    }
}
        
- (void)test0934
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ShortUpArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortUpArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ShortUpArrow without a semi-colon");
    }
}
        
- (void)test0935
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ShortUpArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ShortUpArrow; with a semi-colon");
    }
}
        
- (void)test0936
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sigma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sigma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sigma without a semi-colon");
    }
}
        
- (void)test0937
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sigma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sigma; with a semi-colon");
    }
}
        
- (void)test0938
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SmallCircle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SmallCircle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SmallCircle without a semi-colon");
    }
}
        
- (void)test0939
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SmallCircle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SmallCircle; with a semi-colon");
    }
}
        
- (void)test0940
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sopf without a semi-colon");
    }
}
        
- (void)test0941
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sopf; with a semi-colon");
    }
}
        
- (void)test0942
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sqrt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sqrt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sqrt without a semi-colon");
    }
}
        
- (void)test0943
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sqrt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sqrt; with a semi-colon");
    }
}
        
- (void)test0944
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Square"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Square"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Square without a semi-colon");
    }
}
        
- (void)test0945
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Square;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Square; with a semi-colon");
    }
}
        
- (void)test0946
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SquareIntersection"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareIntersection"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SquareIntersection without a semi-colon");
    }
}
        
- (void)test0947
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareIntersection;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SquareIntersection; with a semi-colon");
    }
}
        
- (void)test0948
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SquareSubset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSubset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SquareSubset without a semi-colon");
    }
}
        
- (void)test0949
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSubset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SquareSubset; with a semi-colon");
    }
}
        
- (void)test0950
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SquareSubsetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSubsetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SquareSubsetEqual without a semi-colon");
    }
}
        
- (void)test0951
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSubsetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SquareSubsetEqual; with a semi-colon");
    }
}
        
- (void)test0952
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SquareSuperset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSuperset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SquareSuperset without a semi-colon");
    }
}
        
- (void)test0953
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSuperset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SquareSuperset; with a semi-colon");
    }
}
        
- (void)test0954
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SquareSupersetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSupersetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SquareSupersetEqual without a semi-colon");
    }
}
        
- (void)test0955
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareSupersetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SquareSupersetEqual; with a semi-colon");
    }
}
        
- (void)test0956
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SquareUnion"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareUnion"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SquareUnion without a semi-colon");
    }
}
        
- (void)test0957
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SquareUnion;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SquareUnion; with a semi-colon");
    }
}
        
- (void)test0958
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sscr without a semi-colon");
    }
}
        
- (void)test0959
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sscr; with a semi-colon");
    }
}
        
- (void)test0960
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Star"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Star"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Star without a semi-colon");
    }
}
        
- (void)test0961
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Star;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Star; with a semi-colon");
    }
}
        
- (void)test0962
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sub without a semi-colon");
    }
}
        
- (void)test0963
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sub; with a semi-colon");
    }
}
        
- (void)test0964
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Subset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Subset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Subset without a semi-colon");
    }
}
        
- (void)test0965
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Subset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Subset; with a semi-colon");
    }
}
        
- (void)test0966
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SubsetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SubsetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SubsetEqual without a semi-colon");
    }
}
        
- (void)test0967
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SubsetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SubsetEqual; with a semi-colon");
    }
}
        
- (void)test0968
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Succeeds"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Succeeds"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Succeeds without a semi-colon");
    }
}
        
- (void)test0969
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Succeeds;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Succeeds; with a semi-colon");
    }
}
        
- (void)test0970
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SucceedsEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SucceedsEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SucceedsEqual without a semi-colon");
    }
}
        
- (void)test0971
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SucceedsEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SucceedsEqual; with a semi-colon");
    }
}
        
- (void)test0972
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SucceedsSlantEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SucceedsSlantEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SucceedsSlantEqual without a semi-colon");
    }
}
        
- (void)test0973
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SucceedsSlantEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SucceedsSlantEqual; with a semi-colon");
    }
}
        
- (void)test0974
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SucceedsTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SucceedsTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SucceedsTilde without a semi-colon");
    }
}
        
- (void)test0975
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SucceedsTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SucceedsTilde; with a semi-colon");
    }
}
        
- (void)test0976
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SuchThat"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SuchThat"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SuchThat without a semi-colon");
    }
}
        
- (void)test0977
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SuchThat;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SuchThat; with a semi-colon");
    }
}
        
- (void)test0978
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sum"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sum"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sum without a semi-colon");
    }
}
        
- (void)test0979
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sum;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sum; with a semi-colon");
    }
}
        
- (void)test0980
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Sup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Sup without a semi-colon");
    }
}
        
- (void)test0981
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Sup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Sup; with a semi-colon");
    }
}
        
- (void)test0982
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Superset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Superset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Superset without a semi-colon");
    }
}
        
- (void)test0983
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Superset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Superset; with a semi-colon");
    }
}
        
- (void)test0984
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&SupersetEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SupersetEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: SupersetEqual without a semi-colon");
    }
}
        
- (void)test0985
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&SupersetEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: SupersetEqual; with a semi-colon");
    }
}
        
- (void)test0986
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Supset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Supset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Supset without a semi-colon");
    }
}
        
- (void)test0987
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Supset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Supset; with a semi-colon");
    }
}
        
- (void)test0988
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&THORN"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: THORN without a semi-colon");
    }
}
        
- (void)test0989
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&THORN;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: THORN; with a semi-colon");
    }
}
        
- (void)test0990
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&TRADE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TRADE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: TRADE without a semi-colon");
    }
}
        
- (void)test0991
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TRADE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: TRADE; with a semi-colon");
    }
}
        
- (void)test0992
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&TSHcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TSHcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: TSHcy without a semi-colon");
    }
}
        
- (void)test0993
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TSHcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: TSHcy; with a semi-colon");
    }
}
        
- (void)test0994
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&TScy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TScy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: TScy without a semi-colon");
    }
}
        
- (void)test0995
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TScy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: TScy; with a semi-colon");
    }
}
        
- (void)test0996
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tab"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tab"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tab without a semi-colon");
    }
}
        
- (void)test0997
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tab;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tab; with a semi-colon");
    }
}
        
- (void)test0998
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tau"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tau"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tau without a semi-colon");
    }
}
        
- (void)test0999
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tau;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tau; with a semi-colon");
    }
}
        
- (void)test1000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tcaron without a semi-colon");
    }
}
        
- (void)test1001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tcaron; with a semi-colon");
    }
}
        
- (void)test1002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tcedil without a semi-colon");
    }
}
        
- (void)test1003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tcedil; with a semi-colon");
    }
}
        
- (void)test1004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tcy without a semi-colon");
    }
}
        
- (void)test1005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tcy; with a semi-colon");
    }
}
        
- (void)test1006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tfr without a semi-colon");
    }
}
        
- (void)test1007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tfr; with a semi-colon");
    }
}
        
- (void)test1008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Therefore"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Therefore"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Therefore without a semi-colon");
    }
}
        
- (void)test1009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Therefore;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Therefore; with a semi-colon");
    }
}
        
- (void)test1010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Theta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Theta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Theta without a semi-colon");
    }
}
        
- (void)test1011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Theta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Theta; with a semi-colon");
    }
}
        
- (void)test1012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ThickSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ThickSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ThickSpace without a semi-colon");
    }
}
        
- (void)test1013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Åü‚Ää"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ThickSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ThickSpace; with a semi-colon");
    }
}
        
- (void)test1014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ThinSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ThinSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ThinSpace without a semi-colon");
    }
}
        
- (void)test1015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ThinSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ThinSpace; with a semi-colon");
    }
}
        
- (void)test1016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tilde without a semi-colon");
    }
}
        
- (void)test1017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tilde; with a semi-colon");
    }
}
        
- (void)test1018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&TildeEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TildeEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: TildeEqual without a semi-colon");
    }
}
        
- (void)test1019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TildeEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: TildeEqual; with a semi-colon");
    }
}
        
- (void)test1020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&TildeFullEqual"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TildeFullEqual"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: TildeFullEqual without a semi-colon");
    }
}
        
- (void)test1021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TildeFullEqual;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: TildeFullEqual; with a semi-colon");
    }
}
        
- (void)test1022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&TildeTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TildeTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: TildeTilde without a semi-colon");
    }
}
        
- (void)test1023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TildeTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: TildeTilde; with a semi-colon");
    }
}
        
- (void)test1024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Topf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Topf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Topf without a semi-colon");
    }
}
        
- (void)test1025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Topf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Topf; with a semi-colon");
    }
}
        
- (void)test1026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&TripleDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TripleDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: TripleDot without a semi-colon");
    }
}
        
- (void)test1027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Éõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&TripleDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: TripleDot; with a semi-colon");
    }
}
        
- (void)test1028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tscr without a semi-colon");
    }
}
        
- (void)test1029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tscr; with a semi-colon");
    }
}
        
- (void)test1030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Tstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Tstrok without a semi-colon");
    }
}
        
- (void)test1031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Tstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Tstrok; with a semi-colon");
    }
}
        
- (void)test1032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uacute without a semi-colon");
    }
}
        
- (void)test1033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uacute; with a semi-colon");
    }
}
        
- (void)test1034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Uarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Uarr without a semi-colon");
    }
}
        
- (void)test1035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uarr; with a semi-colon");
    }
}
        
- (void)test1036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Uarrocir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uarrocir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Uarrocir without a semi-colon");
    }
}
        
- (void)test1037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uarrocir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uarrocir; with a semi-colon");
    }
}
        
- (void)test1038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ubrcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ubrcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ubrcy without a semi-colon");
    }
}
        
- (void)test1039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ubrcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ubrcy; with a semi-colon");
    }
}
        
- (void)test1040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ubreve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ubreve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ubreve without a semi-colon");
    }
}
        
- (void)test1041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ubreve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ubreve; with a semi-colon");
    }
}
        
- (void)test1042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ucirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ucirc without a semi-colon");
    }
}
        
- (void)test1043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ucirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ucirc; with a semi-colon");
    }
}
        
- (void)test1044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ucy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ucy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ucy without a semi-colon");
    }
}
        
- (void)test1045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ucy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ucy; with a semi-colon");
    }
}
        
- (void)test1046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Udblac"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Udblac"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Udblac without a semi-colon");
    }
}
        
- (void)test1047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Udblac;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Udblac; with a semi-colon");
    }
}
        
- (void)test1048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ufr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ufr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ufr without a semi-colon");
    }
}
        
- (void)test1049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ufr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ufr; with a semi-colon");
    }
}
        
- (void)test1050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ugrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ugrave without a semi-colon");
    }
}
        
- (void)test1051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ugrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ugrave; with a semi-colon");
    }
}
        
- (void)test1052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Umacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Umacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Umacr without a semi-colon");
    }
}
        
- (void)test1053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Umacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Umacr; with a semi-colon");
    }
}
        
- (void)test1054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UnderBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UnderBar without a semi-colon");
    }
}
        
- (void)test1055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"_"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UnderBar; with a semi-colon");
    }
}
        
- (void)test1056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UnderBrace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderBrace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UnderBrace without a semi-colon");
    }
}
        
- (void)test1057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚èü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderBrace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UnderBrace; with a semi-colon");
    }
}
        
- (void)test1058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UnderBracket"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderBracket"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UnderBracket without a semi-colon");
    }
}
        
- (void)test1059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚éµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderBracket;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UnderBracket; with a semi-colon");
    }
}
        
- (void)test1060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UnderParenthesis"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderParenthesis"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UnderParenthesis without a semi-colon");
    }
}
        
- (void)test1061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚èù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnderParenthesis;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UnderParenthesis; with a semi-colon");
    }
}
        
- (void)test1062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Union"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Union"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Union without a semi-colon");
    }
}
        
- (void)test1063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Union;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Union; with a semi-colon");
    }
}
        
- (void)test1064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UnionPlus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnionPlus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UnionPlus without a semi-colon");
    }
}
        
- (void)test1065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UnionPlus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UnionPlus; with a semi-colon");
    }
}
        
- (void)test1066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Uogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Uogon without a semi-colon");
    }
}
        
- (void)test1067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uogon; with a semi-colon");
    }
}
        
- (void)test1068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Uopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Uopf without a semi-colon");
    }
}
        
- (void)test1069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uopf; with a semi-colon");
    }
}
        
- (void)test1070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpArrow without a semi-colon");
    }
}
        
- (void)test1071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpArrow; with a semi-colon");
    }
}
        
- (void)test1072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpArrowBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpArrowBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpArrowBar without a semi-colon");
    }
}
        
- (void)test1073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpArrowBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpArrowBar; with a semi-colon");
    }
}
        
- (void)test1074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpArrowDownArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpArrowDownArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpArrowDownArrow without a semi-colon");
    }
}
        
- (void)test1075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpArrowDownArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpArrowDownArrow; with a semi-colon");
    }
}
        
- (void)test1076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpDownArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpDownArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpDownArrow without a semi-colon");
    }
}
        
- (void)test1077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpDownArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpDownArrow; with a semi-colon");
    }
}
        
- (void)test1078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpEquilibrium"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpEquilibrium"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpEquilibrium without a semi-colon");
    }
}
        
- (void)test1079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpEquilibrium;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpEquilibrium; with a semi-colon");
    }
}
        
- (void)test1080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpTee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpTee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpTee without a semi-colon");
    }
}
        
- (void)test1081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpTee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpTee; with a semi-colon");
    }
}
        
- (void)test1082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpTeeArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpTeeArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpTeeArrow without a semi-colon");
    }
}
        
- (void)test1083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpTeeArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpTeeArrow; with a semi-colon");
    }
}
        
- (void)test1084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Uparrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uparrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Uparrow without a semi-colon");
    }
}
        
- (void)test1085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uparrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uparrow; with a semi-colon");
    }
}
        
- (void)test1086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Updownarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Updownarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Updownarrow without a semi-colon");
    }
}
        
- (void)test1087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Updownarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Updownarrow; with a semi-colon");
    }
}
        
- (void)test1088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpperLeftArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpperLeftArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpperLeftArrow without a semi-colon");
    }
}
        
- (void)test1089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpperLeftArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpperLeftArrow; with a semi-colon");
    }
}
        
- (void)test1090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&UpperRightArrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpperRightArrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: UpperRightArrow without a semi-colon");
    }
}
        
- (void)test1091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&UpperRightArrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: UpperRightArrow; with a semi-colon");
    }
}
        
- (void)test1092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Upsi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Upsi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Upsi without a semi-colon");
    }
}
        
- (void)test1093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Upsi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Upsi; with a semi-colon");
    }
}
        
- (void)test1094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Upsilon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Upsilon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Upsilon without a semi-colon");
    }
}
        
- (void)test1095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Upsilon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Upsilon; with a semi-colon");
    }
}
        
- (void)test1096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Uring"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uring"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Uring without a semi-colon");
    }
}
        
- (void)test1097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uring;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uring; with a semi-colon");
    }
}
        
- (void)test1098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Uscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Uscr without a semi-colon");
    }
}
        
- (void)test1099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uscr; with a semi-colon");
    }
}
        
- (void)test1100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Utilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Utilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Utilde without a semi-colon");
    }
}
        
- (void)test1101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Utilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Utilde; with a semi-colon");
    }
}
        
- (void)test1102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uuml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uuml without a semi-colon");
    }
}
        
- (void)test1103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Uuml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Uuml; with a semi-colon");
    }
}
        
- (void)test1104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&VDash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VDash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: VDash without a semi-colon");
    }
}
        
- (void)test1105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VDash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: VDash; with a semi-colon");
    }
}
        
- (void)test1106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vbar without a semi-colon");
    }
}
        
- (void)test1107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vbar; with a semi-colon");
    }
}
        
- (void)test1108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vcy without a semi-colon");
    }
}
        
- (void)test1109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vcy; with a semi-colon");
    }
}
        
- (void)test1110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vdash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vdash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vdash without a semi-colon");
    }
}
        
- (void)test1111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vdash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vdash; with a semi-colon");
    }
}
        
- (void)test1112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vdashl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vdashl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vdashl without a semi-colon");
    }
}
        
- (void)test1113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vdashl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vdashl; with a semi-colon");
    }
}
        
- (void)test1114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vee without a semi-colon");
    }
}
        
- (void)test1115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vee; with a semi-colon");
    }
}
        
- (void)test1116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Verbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Verbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Verbar without a semi-colon");
    }
}
        
- (void)test1117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Verbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Verbar; with a semi-colon");
    }
}
        
- (void)test1118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vert"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vert"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vert without a semi-colon");
    }
}
        
- (void)test1119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vert;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vert; with a semi-colon");
    }
}
        
- (void)test1120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&VerticalBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: VerticalBar without a semi-colon");
    }
}
        
- (void)test1121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: VerticalBar; with a semi-colon");
    }
}
        
- (void)test1122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&VerticalLine"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalLine"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: VerticalLine without a semi-colon");
    }
}
        
- (void)test1123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"|"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalLine;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: VerticalLine; with a semi-colon");
    }
}
        
- (void)test1124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&VerticalSeparator"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalSeparator"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: VerticalSeparator without a semi-colon");
    }
}
        
- (void)test1125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ùò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalSeparator;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: VerticalSeparator; with a semi-colon");
    }
}
        
- (void)test1126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&VerticalTilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalTilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: VerticalTilde without a semi-colon");
    }
}
        
- (void)test1127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VerticalTilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: VerticalTilde; with a semi-colon");
    }
}
        
- (void)test1128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&VeryThinSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VeryThinSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: VeryThinSpace without a semi-colon");
    }
}
        
- (void)test1129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ää"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&VeryThinSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: VeryThinSpace; with a semi-colon");
    }
}
        
- (void)test1130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vfr without a semi-colon");
    }
}
        
- (void)test1131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vfr; with a semi-colon");
    }
}
        
- (void)test1132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vopf without a semi-colon");
    }
}
        
- (void)test1133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vopf; with a semi-colon");
    }
}
        
- (void)test1134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vscr without a semi-colon");
    }
}
        
- (void)test1135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vscr; with a semi-colon");
    }
}
        
- (void)test1136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Vvdash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vvdash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Vvdash without a semi-colon");
    }
}
        
- (void)test1137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Vvdash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Vvdash; with a semi-colon");
    }
}
        
- (void)test1138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Wcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Wcirc without a semi-colon");
    }
}
        
- (void)test1139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Wcirc; with a semi-colon");
    }
}
        
- (void)test1140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Wedge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wedge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Wedge without a semi-colon");
    }
}
        
- (void)test1141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wedge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Wedge; with a semi-colon");
    }
}
        
- (void)test1142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Wfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Wfr without a semi-colon");
    }
}
        
- (void)test1143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Wfr; with a semi-colon");
    }
}
        
- (void)test1144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Wopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Wopf without a semi-colon");
    }
}
        
- (void)test1145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Wopf; with a semi-colon");
    }
}
        
- (void)test1146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Wscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Wscr without a semi-colon");
    }
}
        
- (void)test1147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Wscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Wscr; with a semi-colon");
    }
}
        
- (void)test1148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Xfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Xfr without a semi-colon");
    }
}
        
- (void)test1149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Xfr; with a semi-colon");
    }
}
        
- (void)test1150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Xi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Xi without a semi-colon");
    }
}
        
- (void)test1151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Xi; with a semi-colon");
    }
}
        
- (void)test1152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Xopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Xopf without a semi-colon");
    }
}
        
- (void)test1153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Xopf; with a semi-colon");
    }
}
        
- (void)test1154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Xscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Xscr without a semi-colon");
    }
}
        
- (void)test1155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Xscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Xscr; with a semi-colon");
    }
}
        
- (void)test1156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&YAcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&YAcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: YAcy without a semi-colon");
    }
}
        
- (void)test1157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&YAcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: YAcy; with a semi-colon");
    }
}
        
- (void)test1158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&YIcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&YIcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: YIcy without a semi-colon");
    }
}
        
- (void)test1159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&YIcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: YIcy; with a semi-colon");
    }
}
        
- (void)test1160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&YUcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&YUcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: YUcy without a semi-colon");
    }
}
        
- (void)test1161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&YUcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: YUcy; with a semi-colon");
    }
}
        
- (void)test1162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Yacute without a semi-colon");
    }
}
        
- (void)test1163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Yacute; with a semi-colon");
    }
}
        
- (void)test1164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ycirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ycirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ycirc without a semi-colon");
    }
}
        
- (void)test1165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ycirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ycirc; with a semi-colon");
    }
}
        
- (void)test1166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Ycy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ycy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Ycy without a semi-colon");
    }
}
        
- (void)test1167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Ycy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Ycy; with a semi-colon");
    }
}
        
- (void)test1168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Yfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Yfr without a semi-colon");
    }
}
        
- (void)test1169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Yfr; with a semi-colon");
    }
}
        
- (void)test1170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Yopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Yopf without a semi-colon");
    }
}
        
- (void)test1171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Yopf; with a semi-colon");
    }
}
        
- (void)test1172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Yscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Yscr without a semi-colon");
    }
}
        
- (void)test1173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Yscr; with a semi-colon");
    }
}
        
- (void)test1174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Yuml"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yuml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Yuml without a semi-colon");
    }
}
        
- (void)test1175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Yuml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Yuml; with a semi-colon");
    }
}
        
- (void)test1176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ZHcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ZHcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ZHcy without a semi-colon");
    }
}
        
- (void)test1177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ZHcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ZHcy; with a semi-colon");
    }
}
        
- (void)test1178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zacute without a semi-colon");
    }
}
        
- (void)test1179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zacute; with a semi-colon");
    }
}
        
- (void)test1180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zcaron without a semi-colon");
    }
}
        
- (void)test1181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zcaron; with a semi-colon");
    }
}
        
- (void)test1182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zcy without a semi-colon");
    }
}
        
- (void)test1183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zcy; with a semi-colon");
    }
}
        
- (void)test1184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zdot without a semi-colon");
    }
}
        
- (void)test1185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zdot; with a semi-colon");
    }
}
        
- (void)test1186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ZeroWidthSpace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ZeroWidthSpace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ZeroWidthSpace without a semi-colon");
    }
}
        
- (void)test1187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ZeroWidthSpace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ZeroWidthSpace; with a semi-colon");
    }
}
        
- (void)test1188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zeta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zeta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zeta without a semi-colon");
    }
}
        
- (void)test1189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zeta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zeta; with a semi-colon");
    }
}
        
- (void)test1190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zfr without a semi-colon");
    }
}
        
- (void)test1191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zfr; with a semi-colon");
    }
}
        
- (void)test1192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zopf without a semi-colon");
    }
}
        
- (void)test1193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zopf; with a semi-colon");
    }
}
        
- (void)test1194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&Zscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: Zscr without a semi-colon");
    }
}
        
- (void)test1195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&Zscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: Zscr; with a semi-colon");
    }
}
        
- (void)test1196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aacute without a semi-colon");
    }
}
        
- (void)test1197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aacute; with a semi-colon");
    }
}
        
- (void)test1198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&abreve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&abreve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: abreve without a semi-colon");
    }
}
        
- (void)test1199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&abreve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: abreve; with a semi-colon");
    }
}
        
- (void)test1200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ac"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ac"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ac without a semi-colon");
    }
}
        
- (void)test1201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ac;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ac; with a semi-colon");
    }
}
        
- (void)test1202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&acE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: acE without a semi-colon");
    }
}
        
- (void)test1203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àæÃ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: acE; with a semi-colon");
    }
}
        
- (void)test1204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&acd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: acd without a semi-colon");
    }
}
        
- (void)test1205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: acd; with a semi-colon");
    }
}
        
- (void)test1206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: acirc without a semi-colon");
    }
}
        
- (void)test1207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: acirc; with a semi-colon");
    }
}
        
- (void)test1208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: acute without a semi-colon");
    }
}
        
- (void)test1209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: acute; with a semi-colon");
    }
}
        
- (void)test1210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&acy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: acy without a semi-colon");
    }
}
        
- (void)test1211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&acy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: acy; with a semi-colon");
    }
}
        
- (void)test1212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aelig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aelig without a semi-colon");
    }
}
        
- (void)test1213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aelig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aelig; with a semi-colon");
    }
}
        
- (void)test1214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&af"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&af"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: af without a semi-colon");
    }
}
        
- (void)test1215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Å°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&af;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: af; with a semi-colon");
    }
}
        
- (void)test1216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&afr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&afr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: afr without a semi-colon");
    }
}
        
- (void)test1217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&afr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: afr; with a semi-colon");
    }
}
        
- (void)test1218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&agrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: agrave without a semi-colon");
    }
}
        
- (void)test1219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&agrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: agrave; with a semi-colon");
    }
}
        
- (void)test1220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&alefsym"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&alefsym"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: alefsym without a semi-colon");
    }
}
        
- (void)test1221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&alefsym;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: alefsym; with a semi-colon");
    }
}
        
- (void)test1222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&aleph"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aleph"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: aleph without a semi-colon");
    }
}
        
- (void)test1223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aleph;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aleph; with a semi-colon");
    }
}
        
- (void)test1224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&alpha"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&alpha"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: alpha without a semi-colon");
    }
}
        
- (void)test1225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&alpha;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: alpha; with a semi-colon");
    }
}
        
- (void)test1226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&amacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&amacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: amacr without a semi-colon");
    }
}
        
- (void)test1227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&amacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: amacr; with a semi-colon");
    }
}
        
- (void)test1228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&amalg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&amalg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: amalg without a semi-colon");
    }
}
        
- (void)test1229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&amalg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: amalg; with a semi-colon");
    }
}
        
- (void)test1230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&amp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: amp without a semi-colon");
    }
}
        
- (void)test1231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&amp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: amp; with a semi-colon");
    }
}
        
- (void)test1232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&and"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&and"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: and without a semi-colon");
    }
}
        
- (void)test1233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&and;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: and; with a semi-colon");
    }
}
        
- (void)test1234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&andand"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andand"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: andand without a semi-colon");
    }
}
        
- (void)test1235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andand;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: andand; with a semi-colon");
    }
}
        
- (void)test1236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&andd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: andd without a semi-colon");
    }
}
        
- (void)test1237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: andd; with a semi-colon");
    }
}
        
- (void)test1238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&andslope"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andslope"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: andslope without a semi-colon");
    }
}
        
- (void)test1239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andslope;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: andslope; with a semi-colon");
    }
}
        
- (void)test1240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&andv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: andv without a semi-colon");
    }
}
        
- (void)test1241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&andv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: andv; with a semi-colon");
    }
}
        
- (void)test1242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ang without a semi-colon");
    }
}
        
- (void)test1243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ang; with a semi-colon");
    }
}
        
- (void)test1244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ange"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ange"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ange without a semi-colon");
    }
}
        
- (void)test1245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ange;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ange; with a semi-colon");
    }
}
        
- (void)test1246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angle without a semi-colon");
    }
}
        
- (void)test1247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angle; with a semi-colon");
    }
}
        
- (void)test1248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsd without a semi-colon");
    }
}
        
- (void)test1249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsd; with a semi-colon");
    }
}
        
- (void)test1250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdaa"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdaa"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdaa without a semi-colon");
    }
}
        
- (void)test1251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdaa;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdaa; with a semi-colon");
    }
}
        
- (void)test1252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdab"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdab"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdab without a semi-colon");
    }
}
        
- (void)test1253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdab;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdab; with a semi-colon");
    }
}
        
- (void)test1254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdac"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdac"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdac without a semi-colon");
    }
}
        
- (void)test1255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdac;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdac; with a semi-colon");
    }
}
        
- (void)test1256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdad"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdad"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdad without a semi-colon");
    }
}
        
- (void)test1257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdad;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdad; with a semi-colon");
    }
}
        
- (void)test1258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdae"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdae"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdae without a semi-colon");
    }
}
        
- (void)test1259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdae;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdae; with a semi-colon");
    }
}
        
- (void)test1260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdaf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdaf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdaf without a semi-colon");
    }
}
        
- (void)test1261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdaf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdaf; with a semi-colon");
    }
}
        
- (void)test1262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdag"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdag"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdag without a semi-colon");
    }
}
        
- (void)test1263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdag;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdag; with a semi-colon");
    }
}
        
- (void)test1264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angmsdah"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdah"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angmsdah without a semi-colon");
    }
}
        
- (void)test1265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angmsdah;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angmsdah; with a semi-colon");
    }
}
        
- (void)test1266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angrt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angrt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angrt without a semi-colon");
    }
}
        
- (void)test1267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angrt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angrt; with a semi-colon");
    }
}
        
- (void)test1268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angrtvb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angrtvb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angrtvb without a semi-colon");
    }
}
        
- (void)test1269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angrtvb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angrtvb; with a semi-colon");
    }
}
        
- (void)test1270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angrtvbd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angrtvbd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angrtvbd without a semi-colon");
    }
}
        
- (void)test1271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angrtvbd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angrtvbd; with a semi-colon");
    }
}
        
- (void)test1272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angsph"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angsph"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angsph without a semi-colon");
    }
}
        
- (void)test1273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angsph;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angsph; with a semi-colon");
    }
}
        
- (void)test1274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angst"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angst"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angst without a semi-colon");
    }
}
        
- (void)test1275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angst;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angst; with a semi-colon");
    }
}
        
- (void)test1276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&angzarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angzarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: angzarr without a semi-colon");
    }
}
        
- (void)test1277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚çº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&angzarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: angzarr; with a semi-colon");
    }
}
        
- (void)test1278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&aogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: aogon without a semi-colon");
    }
}
        
- (void)test1279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aogon; with a semi-colon");
    }
}
        
- (void)test1280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&aopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: aopf without a semi-colon");
    }
}
        
- (void)test1281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aopf; with a semi-colon");
    }
}
        
- (void)test1282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ap without a semi-colon");
    }
}
        
- (void)test1283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ap; with a semi-colon");
    }
}
        
- (void)test1284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&apE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: apE without a semi-colon");
    }
}
        
- (void)test1285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: apE; with a semi-colon");
    }
}
        
- (void)test1286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&apacir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apacir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: apacir without a semi-colon");
    }
}
        
- (void)test1287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apacir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: apacir; with a semi-colon");
    }
}
        
- (void)test1288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ape"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ape"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ape without a semi-colon");
    }
}
        
- (void)test1289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ape;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ape; with a semi-colon");
    }
}
        
- (void)test1290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&apid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: apid without a semi-colon");
    }
}
        
- (void)test1291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: apid; with a semi-colon");
    }
}
        
- (void)test1292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&apos"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apos"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: apos without a semi-colon");
    }
}
        
- (void)test1293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&apos;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: apos; with a semi-colon");
    }
}
        
- (void)test1294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&approx"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&approx"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: approx without a semi-colon");
    }
}
        
- (void)test1295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&approx;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: approx; with a semi-colon");
    }
}
        
- (void)test1296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&approxeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&approxeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: approxeq without a semi-colon");
    }
}
        
- (void)test1297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&approxeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: approxeq; with a semi-colon");
    }
}
        
- (void)test1298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aring"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aring without a semi-colon");
    }
}
        
- (void)test1299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&aring;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: aring; with a semi-colon");
    }
}
        
- (void)test1300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ascr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ascr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ascr without a semi-colon");
    }
}
        
- (void)test1301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ascr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ascr; with a semi-colon");
    }
}
        
- (void)test1302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ast"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ast"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ast without a semi-colon");
    }
}
        
- (void)test1303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"*"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ast;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ast; with a semi-colon");
    }
}
        
- (void)test1304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&asymp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&asymp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: asymp without a semi-colon");
    }
}
        
- (void)test1305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&asymp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: asymp; with a semi-colon");
    }
}
        
- (void)test1306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&asympeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&asympeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: asympeq without a semi-colon");
    }
}
        
- (void)test1307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&asympeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: asympeq; with a semi-colon");
    }
}
        
- (void)test1308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&atilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: atilde without a semi-colon");
    }
}
        
- (void)test1309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&atilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: atilde; with a semi-colon");
    }
}
        
- (void)test1310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&auml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: auml without a semi-colon");
    }
}
        
- (void)test1311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&auml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: auml; with a semi-colon");
    }
}
        
- (void)test1312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&awconint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&awconint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: awconint without a semi-colon");
    }
}
        
- (void)test1313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&awconint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: awconint; with a semi-colon");
    }
}
        
- (void)test1314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&awint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&awint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: awint without a semi-colon");
    }
}
        
- (void)test1315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&awint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: awint; with a semi-colon");
    }
}
        
- (void)test1316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bNot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bNot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bNot without a semi-colon");
    }
}
        
- (void)test1317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bNot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bNot; with a semi-colon");
    }
}
        
- (void)test1318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&backcong"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backcong"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: backcong without a semi-colon");
    }
}
        
- (void)test1319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backcong;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: backcong; with a semi-colon");
    }
}
        
- (void)test1320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&backepsilon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backepsilon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: backepsilon without a semi-colon");
    }
}
        
- (void)test1321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œ∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backepsilon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: backepsilon; with a semi-colon");
    }
}
        
- (void)test1322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&backprime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backprime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: backprime without a semi-colon");
    }
}
        
- (void)test1323
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backprime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: backprime; with a semi-colon");
    }
}
        
- (void)test1324
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&backsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: backsim without a semi-colon");
    }
}
        
- (void)test1325
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: backsim; with a semi-colon");
    }
}
        
- (void)test1326
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&backsimeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backsimeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: backsimeq without a semi-colon");
    }
}
        
- (void)test1327
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&backsimeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: backsimeq; with a semi-colon");
    }
}
        
- (void)test1328
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&barvee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&barvee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: barvee without a semi-colon");
    }
}
        
- (void)test1329
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&barvee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: barvee; with a semi-colon");
    }
}
        
- (void)test1330
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&barwed"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&barwed"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: barwed without a semi-colon");
    }
}
        
- (void)test1331
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&barwed;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: barwed; with a semi-colon");
    }
}
        
- (void)test1332
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&barwedge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&barwedge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: barwedge without a semi-colon");
    }
}
        
- (void)test1333
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&barwedge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: barwedge; with a semi-colon");
    }
}
        
- (void)test1334
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bbrk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bbrk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bbrk without a semi-colon");
    }
}
        
- (void)test1335
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚éµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bbrk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bbrk; with a semi-colon");
    }
}
        
- (void)test1336
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bbrktbrk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bbrktbrk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bbrktbrk without a semi-colon");
    }
}
        
- (void)test1337
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚é∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bbrktbrk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bbrktbrk; with a semi-colon");
    }
}
        
- (void)test1338
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bcong"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bcong"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bcong without a semi-colon");
    }
}
        
- (void)test1339
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bcong;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bcong; with a semi-colon");
    }
}
        
- (void)test1340
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bcy without a semi-colon");
    }
}
        
- (void)test1341
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bcy; with a semi-colon");
    }
}
        
- (void)test1342
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bdquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bdquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bdquo without a semi-colon");
    }
}
        
- (void)test1343
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bdquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bdquo; with a semi-colon");
    }
}
        
- (void)test1344
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&becaus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&becaus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: becaus without a semi-colon");
    }
}
        
- (void)test1345
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&becaus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: becaus; with a semi-colon");
    }
}
        
- (void)test1346
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&because"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&because"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: because without a semi-colon");
    }
}
        
- (void)test1347
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&because;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: because; with a semi-colon");
    }
}
        
- (void)test1348
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bemptyv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bemptyv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bemptyv without a semi-colon");
    }
}
        
- (void)test1349
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bemptyv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bemptyv; with a semi-colon");
    }
}
        
- (void)test1350
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bepsi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bepsi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bepsi without a semi-colon");
    }
}
        
- (void)test1351
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œ∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bepsi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bepsi; with a semi-colon");
    }
}
        
- (void)test1352
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bernou"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bernou"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bernou without a semi-colon");
    }
}
        
- (void)test1353
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bernou;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bernou; with a semi-colon");
    }
}
        
- (void)test1354
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&beta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&beta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: beta without a semi-colon");
    }
}
        
- (void)test1355
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&beta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: beta; with a semi-colon");
    }
}
        
- (void)test1356
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&beth"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&beth"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: beth without a semi-colon");
    }
}
        
- (void)test1357
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&beth;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: beth; with a semi-colon");
    }
}
        
- (void)test1358
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&between"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&between"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: between without a semi-colon");
    }
}
        
- (void)test1359
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&between;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: between; with a semi-colon");
    }
}
        
- (void)test1360
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bfr without a semi-colon");
    }
}
        
- (void)test1361
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bfr; with a semi-colon");
    }
}
        
- (void)test1362
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigcap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigcap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigcap without a semi-colon");
    }
}
        
- (void)test1363
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigcap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigcap; with a semi-colon");
    }
}
        
- (void)test1364
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigcirc without a semi-colon");
    }
}
        
- (void)test1365
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigcirc; with a semi-colon");
    }
}
        
- (void)test1366
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigcup without a semi-colon");
    }
}
        
- (void)test1367
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigcup; with a semi-colon");
    }
}
        
- (void)test1368
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigodot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigodot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigodot without a semi-colon");
    }
}
        
- (void)test1369
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigodot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigodot; with a semi-colon");
    }
}
        
- (void)test1370
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigoplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigoplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigoplus without a semi-colon");
    }
}
        
- (void)test1371
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigoplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigoplus; with a semi-colon");
    }
}
        
- (void)test1372
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigotimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigotimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigotimes without a semi-colon");
    }
}
        
- (void)test1373
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigotimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigotimes; with a semi-colon");
    }
}
        
- (void)test1374
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigsqcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigsqcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigsqcup without a semi-colon");
    }
}
        
- (void)test1375
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigsqcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigsqcup; with a semi-colon");
    }
}
        
- (void)test1376
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigstar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigstar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigstar without a semi-colon");
    }
}
        
- (void)test1377
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚òÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigstar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigstar; with a semi-colon");
    }
}
        
- (void)test1378
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigtriangledown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigtriangledown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigtriangledown without a semi-colon");
    }
}
        
- (void)test1379
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigtriangledown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigtriangledown; with a semi-colon");
    }
}
        
- (void)test1380
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigtriangleup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigtriangleup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigtriangleup without a semi-colon");
    }
}
        
- (void)test1381
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigtriangleup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigtriangleup; with a semi-colon");
    }
}
        
- (void)test1382
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&biguplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&biguplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: biguplus without a semi-colon");
    }
}
        
- (void)test1383
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&biguplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: biguplus; with a semi-colon");
    }
}
        
- (void)test1384
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigvee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigvee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigvee without a semi-colon");
    }
}
        
- (void)test1385
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigvee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigvee; with a semi-colon");
    }
}
        
- (void)test1386
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bigwedge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigwedge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bigwedge without a semi-colon");
    }
}
        
- (void)test1387
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bigwedge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bigwedge; with a semi-colon");
    }
}
        
- (void)test1388
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bkarow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bkarow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bkarow without a semi-colon");
    }
}
        
- (void)test1389
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bkarow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bkarow; with a semi-colon");
    }
}
        
- (void)test1390
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blacklozenge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacklozenge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blacklozenge without a semi-colon");
    }
}
        
- (void)test1391
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ß´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacklozenge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blacklozenge; with a semi-colon");
    }
}
        
- (void)test1392
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blacksquare"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacksquare"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blacksquare without a semi-colon");
    }
}
        
- (void)test1393
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacksquare;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blacksquare; with a semi-colon");
    }
}
        
- (void)test1394
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blacktriangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blacktriangle without a semi-colon");
    }
}
        
- (void)test1395
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blacktriangle; with a semi-colon");
    }
}
        
- (void)test1396
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blacktriangledown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangledown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blacktriangledown without a semi-colon");
    }
}
        
- (void)test1397
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangledown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blacktriangledown; with a semi-colon");
    }
}
        
- (void)test1398
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blacktriangleleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangleleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blacktriangleleft without a semi-colon");
    }
}
        
- (void)test1399
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangleleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blacktriangleleft; with a semi-colon");
    }
}
        
- (void)test1400
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blacktriangleright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangleright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blacktriangleright without a semi-colon");
    }
}
        
- (void)test1401
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blacktriangleright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blacktriangleright; with a semi-colon");
    }
}
        
- (void)test1402
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blank"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blank"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blank without a semi-colon");
    }
}
        
- (void)test1403
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ê£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blank;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blank; with a semi-colon");
    }
}
        
- (void)test1404
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blk12"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blk12"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blk12 without a semi-colon");
    }
}
        
- (void)test1405
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blk12;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blk12; with a semi-colon");
    }
}
        
- (void)test1406
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blk14"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blk14"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blk14 without a semi-colon");
    }
}
        
- (void)test1407
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blk14;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blk14; with a semi-colon");
    }
}
        
- (void)test1408
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&blk34"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blk34"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: blk34 without a semi-colon");
    }
}
        
- (void)test1409
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&blk34;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: blk34; with a semi-colon");
    }
}
        
- (void)test1410
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&block"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&block"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: block without a semi-colon");
    }
}
        
- (void)test1411
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&block;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: block; with a semi-colon");
    }
}
        
- (void)test1412
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bne without a semi-colon");
    }
}
        
- (void)test1413
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"=‚É•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bne; with a semi-colon");
    }
}
        
- (void)test1414
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bnequiv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bnequiv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bnequiv without a semi-colon");
    }
}
        
- (void)test1415
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â°‚É•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bnequiv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bnequiv; with a semi-colon");
    }
}
        
- (void)test1416
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bnot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bnot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bnot without a semi-colon");
    }
}
        
- (void)test1417
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bnot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bnot; with a semi-colon");
    }
}
        
- (void)test1418
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bopf without a semi-colon");
    }
}
        
- (void)test1419
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bopf; with a semi-colon");
    }
}
        
- (void)test1420
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bot without a semi-colon");
    }
}
        
- (void)test1421
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bot; with a semi-colon");
    }
}
        
- (void)test1422
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bottom"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bottom"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bottom without a semi-colon");
    }
}
        
- (void)test1423
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bottom;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bottom; with a semi-colon");
    }
}
        
- (void)test1424
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bowtie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bowtie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bowtie without a semi-colon");
    }
}
        
- (void)test1425
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bowtie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bowtie; with a semi-colon");
    }
}
        
- (void)test1426
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxDL"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDL"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxDL without a semi-colon");
    }
}
        
- (void)test1427
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDL;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxDL; with a semi-colon");
    }
}
        
- (void)test1428
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxDR"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDR"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxDR without a semi-colon");
    }
}
        
- (void)test1429
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDR;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxDR; with a semi-colon");
    }
}
        
- (void)test1430
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxDl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxDl without a semi-colon");
    }
}
        
- (void)test1431
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxDl; with a semi-colon");
    }
}
        
- (void)test1432
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxDr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxDr without a semi-colon");
    }
}
        
- (void)test1433
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxDr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxDr; with a semi-colon");
    }
}
        
- (void)test1434
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxH"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxH"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxH without a semi-colon");
    }
}
        
- (void)test1435
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxH;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxH; with a semi-colon");
    }
}
        
- (void)test1436
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxHD"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHD"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxHD without a semi-colon");
    }
}
        
- (void)test1437
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxHD; with a semi-colon");
    }
}
        
- (void)test1438
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxHU"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHU"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxHU without a semi-colon");
    }
}
        
- (void)test1439
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHU;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxHU; with a semi-colon");
    }
}
        
- (void)test1440
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxHd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxHd without a semi-colon");
    }
}
        
- (void)test1441
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxHd; with a semi-colon");
    }
}
        
- (void)test1442
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxHu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxHu without a semi-colon");
    }
}
        
- (void)test1443
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxHu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxHu; with a semi-colon");
    }
}
        
- (void)test1444
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxUL"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUL"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxUL without a semi-colon");
    }
}
        
- (void)test1445
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUL;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxUL; with a semi-colon");
    }
}
        
- (void)test1446
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxUR"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUR"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxUR without a semi-colon");
    }
}
        
- (void)test1447
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUR;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxUR; with a semi-colon");
    }
}
        
- (void)test1448
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxUl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxUl without a semi-colon");
    }
}
        
- (void)test1449
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxUl; with a semi-colon");
    }
}
        
- (void)test1450
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxUr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxUr without a semi-colon");
    }
}
        
- (void)test1451
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxUr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxUr; with a semi-colon");
    }
}
        
- (void)test1452
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxV"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxV"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxV without a semi-colon");
    }
}
        
- (void)test1453
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxV;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxV; with a semi-colon");
    }
}
        
- (void)test1454
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxVH"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVH"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxVH without a semi-colon");
    }
}
        
- (void)test1455
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVH;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxVH; with a semi-colon");
    }
}
        
- (void)test1456
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxVL"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVL"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxVL without a semi-colon");
    }
}
        
- (void)test1457
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVL;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxVL; with a semi-colon");
    }
}
        
- (void)test1458
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxVR"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVR"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxVR without a semi-colon");
    }
}
        
- (void)test1459
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVR;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxVR; with a semi-colon");
    }
}
        
- (void)test1460
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxVh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxVh without a semi-colon");
    }
}
        
- (void)test1461
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxVh; with a semi-colon");
    }
}
        
- (void)test1462
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxVl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxVl without a semi-colon");
    }
}
        
- (void)test1463
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxVl; with a semi-colon");
    }
}
        
- (void)test1464
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxVr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxVr without a semi-colon");
    }
}
        
- (void)test1465
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxVr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxVr; with a semi-colon");
    }
}
        
- (void)test1466
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxbox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxbox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxbox without a semi-colon");
    }
}
        
- (void)test1467
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxbox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxbox; with a semi-colon");
    }
}
        
- (void)test1468
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxdL"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdL"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxdL without a semi-colon");
    }
}
        
- (void)test1469
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdL;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxdL; with a semi-colon");
    }
}
        
- (void)test1470
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxdR"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdR"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxdR without a semi-colon");
    }
}
        
- (void)test1471
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdR;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxdR; with a semi-colon");
    }
}
        
- (void)test1472
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxdl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxdl without a semi-colon");
    }
}
        
- (void)test1473
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxdl; with a semi-colon");
    }
}
        
- (void)test1474
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxdr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxdr without a semi-colon");
    }
}
        
- (void)test1475
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxdr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxdr; with a semi-colon");
    }
}
        
- (void)test1476
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxh without a semi-colon");
    }
}
        
- (void)test1477
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxh; with a semi-colon");
    }
}
        
- (void)test1478
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxhD"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhD"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxhD without a semi-colon");
    }
}
        
- (void)test1479
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxhD; with a semi-colon");
    }
}
        
- (void)test1480
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxhU"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhU"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxhU without a semi-colon");
    }
}
        
- (void)test1481
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhU;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxhU; with a semi-colon");
    }
}
        
- (void)test1482
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxhd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxhd without a semi-colon");
    }
}
        
- (void)test1483
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚î¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxhd; with a semi-colon");
    }
}
        
- (void)test1484
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxhu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxhu without a semi-colon");
    }
}
        
- (void)test1485
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚î¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxhu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxhu; with a semi-colon");
    }
}
        
- (void)test1486
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxminus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxminus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxminus without a semi-colon");
    }
}
        
- (void)test1487
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxminus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxminus; with a semi-colon");
    }
}
        
- (void)test1488
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxplus without a semi-colon");
    }
}
        
- (void)test1489
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxplus; with a semi-colon");
    }
}
        
- (void)test1490
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxtimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxtimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxtimes without a semi-colon");
    }
}
        
- (void)test1491
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxtimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxtimes; with a semi-colon");
    }
}
        
- (void)test1492
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxuL"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxuL"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxuL without a semi-colon");
    }
}
        
- (void)test1493
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxuL;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxuL; with a semi-colon");
    }
}
        
- (void)test1494
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxuR"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxuR"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxuR without a semi-colon");
    }
}
        
- (void)test1495
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxuR;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxuR; with a semi-colon");
    }
}
        
- (void)test1496
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxul"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxul"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxul without a semi-colon");
    }
}
        
- (void)test1497
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxul;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxul; with a semi-colon");
    }
}
        
- (void)test1498
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxur"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxur"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxur without a semi-colon");
    }
}
        
- (void)test1499
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxur;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxur; with a semi-colon");
    }
}
        
- (void)test1500
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxv without a semi-colon");
    }
}
        
- (void)test1501
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxv; with a semi-colon");
    }
}
        
- (void)test1502
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxvH"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvH"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxvH without a semi-colon");
    }
}
        
- (void)test1503
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvH;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxvH; with a semi-colon");
    }
}
        
- (void)test1504
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxvL"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvL"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxvL without a semi-colon");
    }
}
        
- (void)test1505
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ï°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvL;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxvL; with a semi-colon");
    }
}
        
- (void)test1506
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxvR"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvR"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxvR without a semi-colon");
    }
}
        
- (void)test1507
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ïû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvR;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxvR; with a semi-colon");
    }
}
        
- (void)test1508
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxvh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxvh without a semi-colon");
    }
}
        
- (void)test1509
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxvh; with a semi-colon");
    }
}
        
- (void)test1510
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxvl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxvl without a semi-colon");
    }
}
        
- (void)test1511
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚î§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxvl; with a semi-colon");
    }
}
        
- (void)test1512
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&boxvr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: boxvr without a semi-colon");
    }
}
        
- (void)test1513
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚îú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&boxvr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: boxvr; with a semi-colon");
    }
}
        
- (void)test1514
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bprime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bprime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bprime without a semi-colon");
    }
}
        
- (void)test1515
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bprime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bprime; with a semi-colon");
    }
}
        
- (void)test1516
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&breve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&breve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: breve without a semi-colon");
    }
}
        
- (void)test1517
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&breve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: breve; with a semi-colon");
    }
}
        
- (void)test1518
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&brvbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: brvbar without a semi-colon");
    }
}
        
- (void)test1519
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&brvbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: brvbar; with a semi-colon");
    }
}
        
- (void)test1520
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bscr without a semi-colon");
    }
}
        
- (void)test1521
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bscr; with a semi-colon");
    }
}
        
- (void)test1522
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bsemi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsemi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bsemi without a semi-colon");
    }
}
        
- (void)test1523
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Åè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsemi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bsemi; with a semi-colon");
    }
}
        
- (void)test1524
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bsim without a semi-colon");
    }
}
        
- (void)test1525
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bsim; with a semi-colon");
    }
}
        
- (void)test1526
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bsime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bsime without a semi-colon");
    }
}
        
- (void)test1527
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bsime; with a semi-colon");
    }
}
        
- (void)test1528
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bsol"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsol"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bsol without a semi-colon");
    }
}
        
- (void)test1529
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\\"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsol;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bsol; with a semi-colon");
    }
}
        
- (void)test1530
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bsolb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsolb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bsolb without a semi-colon");
    }
}
        
- (void)test1531
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsolb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bsolb; with a semi-colon");
    }
}
        
- (void)test1532
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bsolhsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsolhsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bsolhsub without a semi-colon");
    }
}
        
- (void)test1533
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bsolhsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bsolhsub; with a semi-colon");
    }
}
        
- (void)test1534
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bull"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bull"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bull without a semi-colon");
    }
}
        
- (void)test1535
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bull;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bull; with a semi-colon");
    }
}
        
- (void)test1536
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bullet"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bullet"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bullet without a semi-colon");
    }
}
        
- (void)test1537
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bullet;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bullet; with a semi-colon");
    }
}
        
- (void)test1538
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bump"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bump"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bump without a semi-colon");
    }
}
        
- (void)test1539
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bump;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bump; with a semi-colon");
    }
}
        
- (void)test1540
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bumpE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bumpE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bumpE without a semi-colon");
    }
}
        
- (void)test1541
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bumpE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bumpE; with a semi-colon");
    }
}
        
- (void)test1542
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bumpe"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bumpe"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bumpe without a semi-colon");
    }
}
        
- (void)test1543
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bumpe;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bumpe; with a semi-colon");
    }
}
        
- (void)test1544
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&bumpeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bumpeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: bumpeq without a semi-colon");
    }
}
        
- (void)test1545
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&bumpeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: bumpeq; with a semi-colon");
    }
}
        
- (void)test1546
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cacute without a semi-colon");
    }
}
        
- (void)test1547
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cacute; with a semi-colon");
    }
}
        
- (void)test1548
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cap without a semi-colon");
    }
}
        
- (void)test1549
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cap; with a semi-colon");
    }
}
        
- (void)test1550
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&capand"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capand"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: capand without a semi-colon");
    }
}
        
- (void)test1551
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capand;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: capand; with a semi-colon");
    }
}
        
- (void)test1552
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&capbrcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capbrcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: capbrcup without a semi-colon");
    }
}
        
- (void)test1553
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capbrcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: capbrcup; with a semi-colon");
    }
}
        
- (void)test1554
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&capcap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capcap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: capcap without a semi-colon");
    }
}
        
- (void)test1555
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capcap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: capcap; with a semi-colon");
    }
}
        
- (void)test1556
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&capcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: capcup without a semi-colon");
    }
}
        
- (void)test1557
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: capcup; with a semi-colon");
    }
}
        
- (void)test1558
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&capdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: capdot without a semi-colon");
    }
}
        
- (void)test1559
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&capdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: capdot; with a semi-colon");
    }
}
        
- (void)test1560
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&caps"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&caps"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: caps without a semi-colon");
    }
}
        
- (void)test1561
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à©Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&caps;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: caps; with a semi-colon");
    }
}
        
- (void)test1562
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&caret"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&caret"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: caret without a semi-colon");
    }
}
        
- (void)test1563
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÅÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&caret;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: caret; with a semi-colon");
    }
}
        
- (void)test1564
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&caron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&caron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: caron without a semi-colon");
    }
}
        
- (void)test1565
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&caron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: caron; with a semi-colon");
    }
}
        
- (void)test1566
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ccaps"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccaps"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ccaps without a semi-colon");
    }
}
        
- (void)test1567
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccaps;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ccaps; with a semi-colon");
    }
}
        
- (void)test1568
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ccaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ccaron without a semi-colon");
    }
}
        
- (void)test1569
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ccaron; with a semi-colon");
    }
}
        
- (void)test1570
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ccedil without a semi-colon");
    }
}
        
- (void)test1571
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ccedil; with a semi-colon");
    }
}
        
- (void)test1572
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ccirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ccirc without a semi-colon");
    }
}
        
- (void)test1573
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ccirc; with a semi-colon");
    }
}
        
- (void)test1574
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ccups"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccups"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ccups without a semi-colon");
    }
}
        
- (void)test1575
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccups;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ccups; with a semi-colon");
    }
}
        
- (void)test1576
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ccupssm"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccupssm"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ccupssm without a semi-colon");
    }
}
        
- (void)test1577
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ccupssm;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ccupssm; with a semi-colon");
    }
}
        
- (void)test1578
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cdot without a semi-colon");
    }
}
        
- (void)test1579
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cdot; with a semi-colon");
    }
}
        
- (void)test1580
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cedil without a semi-colon");
    }
}
        
- (void)test1581
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cedil; with a semi-colon");
    }
}
        
- (void)test1582
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cemptyv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cemptyv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cemptyv without a semi-colon");
    }
}
        
- (void)test1583
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cemptyv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cemptyv; with a semi-colon");
    }
}
        
- (void)test1584
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cent"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cent without a semi-colon");
    }
}
        
- (void)test1585
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cent;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cent; with a semi-colon");
    }
}
        
- (void)test1586
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&centerdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: centerdot; with a semi-colon");
    }
}
        
- (void)test1587
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cfr without a semi-colon");
    }
}
        
- (void)test1588
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cfr; with a semi-colon");
    }
}
        
- (void)test1589
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&chcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&chcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: chcy without a semi-colon");
    }
}
        
- (void)test1590
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&chcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: chcy; with a semi-colon");
    }
}
        
- (void)test1591
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&check"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&check"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: check without a semi-colon");
    }
}
        
- (void)test1592
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚úì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&check;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: check; with a semi-colon");
    }
}
        
- (void)test1593
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&checkmark"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&checkmark"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: checkmark without a semi-colon");
    }
}
        
- (void)test1594
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚úì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&checkmark;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: checkmark; with a semi-colon");
    }
}
        
- (void)test1595
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&chi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&chi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: chi without a semi-colon");
    }
}
        
- (void)test1596
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&chi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: chi; with a semi-colon");
    }
}
        
- (void)test1597
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cir without a semi-colon");
    }
}
        
- (void)test1598
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cir; with a semi-colon");
    }
}
        
- (void)test1599
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cirE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cirE without a semi-colon");
    }
}
        
- (void)test1600
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cirE; with a semi-colon");
    }
}
        
- (void)test1601
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circ without a semi-colon");
    }
}
        
- (void)test1602
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ÀÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circ;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circ; with a semi-colon");
    }
}
        
- (void)test1603
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circeq without a semi-colon");
    }
}
        
- (void)test1604
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circeq; with a semi-colon");
    }
}
        
- (void)test1605
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circlearrowleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circlearrowleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circlearrowleft without a semi-colon");
    }
}
        
- (void)test1606
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circlearrowleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circlearrowleft; with a semi-colon");
    }
}
        
- (void)test1607
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circlearrowright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circlearrowright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circlearrowright without a semi-colon");
    }
}
        
- (void)test1608
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circlearrowright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circlearrowright; with a semi-colon");
    }
}
        
- (void)test1609
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circledR"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledR"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circledR without a semi-colon");
    }
}
        
- (void)test1610
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledR;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circledR; with a semi-colon");
    }
}
        
- (void)test1611
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circledS"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledS"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circledS without a semi-colon");
    }
}
        
- (void)test1612
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ìà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledS;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circledS; with a semi-colon");
    }
}
        
- (void)test1613
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circledast"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledast"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circledast without a semi-colon");
    }
}
        
- (void)test1614
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledast;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circledast; with a semi-colon");
    }
}
        
- (void)test1615
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circledcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circledcirc without a semi-colon");
    }
}
        
- (void)test1616
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circledcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circledcirc; with a semi-colon");
    }
}
        
- (void)test1617
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&circleddash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circleddash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: circleddash without a semi-colon");
    }
}
        
- (void)test1618
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&circleddash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: circleddash; with a semi-colon");
    }
}
        
- (void)test1619
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cire"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cire"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cire without a semi-colon");
    }
}
        
- (void)test1620
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cire;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cire; with a semi-colon");
    }
}
        
- (void)test1621
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cirfnint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirfnint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cirfnint without a semi-colon");
    }
}
        
- (void)test1622
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirfnint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cirfnint; with a semi-colon");
    }
}
        
- (void)test1623
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cirmid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirmid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cirmid without a semi-colon");
    }
}
        
- (void)test1624
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirmid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cirmid; with a semi-colon");
    }
}
        
- (void)test1625
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cirscir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirscir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cirscir without a semi-colon");
    }
}
        
- (void)test1626
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cirscir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cirscir; with a semi-colon");
    }
}
        
- (void)test1627
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&clubs"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&clubs"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: clubs without a semi-colon");
    }
}
        
- (void)test1628
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&clubs;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: clubs; with a semi-colon");
    }
}
        
- (void)test1629
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&clubsuit"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&clubsuit"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: clubsuit without a semi-colon");
    }
}
        
- (void)test1630
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&clubsuit;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: clubsuit; with a semi-colon");
    }
}
        
- (void)test1631
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&colon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&colon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: colon without a semi-colon");
    }
}
        
- (void)test1632
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @":"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&colon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: colon; with a semi-colon");
    }
}
        
- (void)test1633
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&colone"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&colone"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: colone without a semi-colon");
    }
}
        
- (void)test1634
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&colone;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: colone; with a semi-colon");
    }
}
        
- (void)test1635
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&coloneq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&coloneq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: coloneq without a semi-colon");
    }
}
        
- (void)test1636
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&coloneq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: coloneq; with a semi-colon");
    }
}
        
- (void)test1637
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&comma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&comma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: comma without a semi-colon");
    }
}
        
- (void)test1638
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @","]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&comma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: comma; with a semi-colon");
    }
}
        
- (void)test1639
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&commat"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&commat"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: commat without a semi-colon");
    }
}
        
- (void)test1640
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&commat;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: commat; with a semi-colon");
    }
}
        
- (void)test1641
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&comp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&comp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: comp without a semi-colon");
    }
}
        
- (void)test1642
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&comp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: comp; with a semi-colon");
    }
}
        
- (void)test1643
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&compfn"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&compfn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: compfn without a semi-colon");
    }
}
        
- (void)test1644
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&compfn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: compfn; with a semi-colon");
    }
}
        
- (void)test1645
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&complement"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&complement"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: complement without a semi-colon");
    }
}
        
- (void)test1646
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&complement;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: complement; with a semi-colon");
    }
}
        
- (void)test1647
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&complexes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&complexes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: complexes without a semi-colon");
    }
}
        
- (void)test1648
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÑÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&complexes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: complexes; with a semi-colon");
    }
}
        
- (void)test1649
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cong"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cong"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cong without a semi-colon");
    }
}
        
- (void)test1650
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cong;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cong; with a semi-colon");
    }
}
        
- (void)test1651
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&congdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&congdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: congdot without a semi-colon");
    }
}
        
- (void)test1652
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&congdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: congdot; with a semi-colon");
    }
}
        
- (void)test1653
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&conint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&conint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: conint without a semi-colon");
    }
}
        
- (void)test1654
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&conint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: conint; with a semi-colon");
    }
}
        
- (void)test1655
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&copf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&copf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: copf without a semi-colon");
    }
}
        
- (void)test1656
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&copf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: copf; with a semi-colon");
    }
}
        
- (void)test1657
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&coprod"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&coprod"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: coprod without a semi-colon");
    }
}
        
- (void)test1658
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&coprod;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: coprod; with a semi-colon");
    }
}
        
- (void)test1659
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&copy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: copy without a semi-colon");
    }
}
        
- (void)test1660
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&copy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: copy; with a semi-colon");
    }
}
        
- (void)test1661
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&copysr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: copysr; with a semi-colon");
    }
}
        
- (void)test1662
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&crarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&crarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: crarr without a semi-colon");
    }
}
        
- (void)test1663
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&crarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: crarr; with a semi-colon");
    }
}
        
- (void)test1664
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cross"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cross"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cross without a semi-colon");
    }
}
        
- (void)test1665
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚úó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cross;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cross; with a semi-colon");
    }
}
        
- (void)test1666
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cscr without a semi-colon");
    }
}
        
- (void)test1667
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùí∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cscr; with a semi-colon");
    }
}
        
- (void)test1668
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&csub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: csub without a semi-colon");
    }
}
        
- (void)test1669
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: csub; with a semi-colon");
    }
}
        
- (void)test1670
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&csube"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csube"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: csube without a semi-colon");
    }
}
        
- (void)test1671
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csube;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: csube; with a semi-colon");
    }
}
        
- (void)test1672
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&csup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: csup without a semi-colon");
    }
}
        
- (void)test1673
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: csup; with a semi-colon");
    }
}
        
- (void)test1674
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&csupe"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csupe"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: csupe without a semi-colon");
    }
}
        
- (void)test1675
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&csupe;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: csupe; with a semi-colon");
    }
}
        
- (void)test1676
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ctdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ctdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ctdot without a semi-colon");
    }
}
        
- (void)test1677
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ctdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ctdot; with a semi-colon");
    }
}
        
- (void)test1678
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cudarrl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cudarrl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cudarrl without a semi-colon");
    }
}
        
- (void)test1679
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cudarrl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cudarrl; with a semi-colon");
    }
}
        
- (void)test1680
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cudarrr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cudarrr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cudarrr without a semi-colon");
    }
}
        
- (void)test1681
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cudarrr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cudarrr; with a semi-colon");
    }
}
        
- (void)test1682
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cuepr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuepr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cuepr without a semi-colon");
    }
}
        
- (void)test1683
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuepr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cuepr; with a semi-colon");
    }
}
        
- (void)test1684
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cuesc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuesc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cuesc without a semi-colon");
    }
}
        
- (void)test1685
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuesc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cuesc; with a semi-colon");
    }
}
        
- (void)test1686
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cularr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cularr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cularr without a semi-colon");
    }
}
        
- (void)test1687
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cularr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cularr; with a semi-colon");
    }
}
        
- (void)test1688
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cularrp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cularrp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cularrp without a semi-colon");
    }
}
        
- (void)test1689
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cularrp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cularrp; with a semi-colon");
    }
}
        
- (void)test1690
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cup without a semi-colon");
    }
}
        
- (void)test1691
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cup; with a semi-colon");
    }
}
        
- (void)test1692
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cupbrcap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupbrcap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cupbrcap without a semi-colon");
    }
}
        
- (void)test1693
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupbrcap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cupbrcap; with a semi-colon");
    }
}
        
- (void)test1694
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cupcap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupcap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cupcap without a semi-colon");
    }
}
        
- (void)test1695
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupcap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cupcap; with a semi-colon");
    }
}
        
- (void)test1696
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cupcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cupcup without a semi-colon");
    }
}
        
- (void)test1697
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cupcup; with a semi-colon");
    }
}
        
- (void)test1698
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cupdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cupdot without a semi-colon");
    }
}
        
- (void)test1699
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cupdot; with a semi-colon");
    }
}
        
- (void)test1700
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cupor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cupor without a semi-colon");
    }
}
        
- (void)test1701
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cupor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cupor; with a semi-colon");
    }
}
        
- (void)test1702
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cups"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cups"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cups without a semi-colon");
    }
}
        
- (void)test1703
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à™Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cups;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cups; with a semi-colon");
    }
}
        
- (void)test1704
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curarr without a semi-colon");
    }
}
        
- (void)test1705
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curarr; with a semi-colon");
    }
}
        
- (void)test1706
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curarrm"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curarrm"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curarrm without a semi-colon");
    }
}
        
- (void)test1707
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curarrm;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curarrm; with a semi-colon");
    }
}
        
- (void)test1708
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curlyeqprec"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlyeqprec"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curlyeqprec without a semi-colon");
    }
}
        
- (void)test1709
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlyeqprec;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curlyeqprec; with a semi-colon");
    }
}
        
- (void)test1710
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curlyeqsucc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlyeqsucc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curlyeqsucc without a semi-colon");
    }
}
        
- (void)test1711
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlyeqsucc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curlyeqsucc; with a semi-colon");
    }
}
        
- (void)test1712
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curlyvee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlyvee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curlyvee without a semi-colon");
    }
}
        
- (void)test1713
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlyvee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curlyvee; with a semi-colon");
    }
}
        
- (void)test1714
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curlywedge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlywedge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curlywedge without a semi-colon");
    }
}
        
- (void)test1715
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curlywedge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curlywedge; with a semi-colon");
    }
}
        
- (void)test1716
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curren"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curren without a semi-colon");
    }
}
        
- (void)test1717
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curren;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curren; with a semi-colon");
    }
}
        
- (void)test1718
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curvearrowleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curvearrowleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curvearrowleft without a semi-colon");
    }
}
        
- (void)test1719
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curvearrowleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curvearrowleft; with a semi-colon");
    }
}
        
- (void)test1720
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&curvearrowright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curvearrowright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: curvearrowright without a semi-colon");
    }
}
        
- (void)test1721
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&curvearrowright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: curvearrowright; with a semi-colon");
    }
}
        
- (void)test1722
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cuvee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuvee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cuvee without a semi-colon");
    }
}
        
- (void)test1723
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuvee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cuvee; with a semi-colon");
    }
}
        
- (void)test1724
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cuwed"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuwed"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cuwed without a semi-colon");
    }
}
        
- (void)test1725
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cuwed;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cuwed; with a semi-colon");
    }
}
        
- (void)test1726
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cwconint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cwconint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cwconint without a semi-colon");
    }
}
        
- (void)test1727
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cwconint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cwconint; with a semi-colon");
    }
}
        
- (void)test1728
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cwint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cwint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cwint without a semi-colon");
    }
}
        
- (void)test1729
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cwint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cwint; with a semi-colon");
    }
}
        
- (void)test1730
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&cylcty"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cylcty"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: cylcty without a semi-colon");
    }
}
        
- (void)test1731
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚å≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&cylcty;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: cylcty; with a semi-colon");
    }
}
        
- (void)test1732
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dArr without a semi-colon");
    }
}
        
- (void)test1733
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dArr; with a semi-colon");
    }
}
        
- (void)test1734
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dHar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dHar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dHar without a semi-colon");
    }
}
        
- (void)test1735
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚••"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dHar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dHar; with a semi-colon");
    }
}
        
- (void)test1736
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dagger"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dagger"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dagger without a semi-colon");
    }
}
        
- (void)test1737
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dagger;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dagger; with a semi-colon");
    }
}
        
- (void)test1738
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&daleth"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&daleth"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: daleth without a semi-colon");
    }
}
        
- (void)test1739
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&daleth;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: daleth; with a semi-colon");
    }
}
        
- (void)test1740
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&darr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&darr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: darr without a semi-colon");
    }
}
        
- (void)test1741
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&darr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: darr; with a semi-colon");
    }
}
        
- (void)test1742
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dash without a semi-colon");
    }
}
        
- (void)test1743
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dash; with a semi-colon");
    }
}
        
- (void)test1744
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dashv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dashv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dashv without a semi-colon");
    }
}
        
- (void)test1745
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dashv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dashv; with a semi-colon");
    }
}
        
- (void)test1746
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dbkarow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dbkarow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dbkarow without a semi-colon");
    }
}
        
- (void)test1747
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dbkarow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dbkarow; with a semi-colon");
    }
}
        
- (void)test1748
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dblac"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dblac"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dblac without a semi-colon");
    }
}
        
- (void)test1749
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dblac;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dblac; with a semi-colon");
    }
}
        
- (void)test1750
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dcaron without a semi-colon");
    }
}
        
- (void)test1751
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dcaron; with a semi-colon");
    }
}
        
- (void)test1752
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dcy without a semi-colon");
    }
}
        
- (void)test1753
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dcy; with a semi-colon");
    }
}
        
- (void)test1754
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dd without a semi-colon");
    }
}
        
- (void)test1755
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÖÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dd; with a semi-colon");
    }
}
        
- (void)test1756
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ddagger"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ddagger"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ddagger without a semi-colon");
    }
}
        
- (void)test1757
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ddagger;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ddagger; with a semi-colon");
    }
}
        
- (void)test1758
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ddarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ddarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ddarr without a semi-colon");
    }
}
        
- (void)test1759
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ddarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ddarr; with a semi-colon");
    }
}
        
- (void)test1760
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ddotseq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ddotseq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ddotseq without a semi-colon");
    }
}
        
- (void)test1761
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ddotseq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ddotseq; with a semi-colon");
    }
}
        
- (void)test1762
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&deg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: deg without a semi-colon");
    }
}
        
- (void)test1763
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&deg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: deg; with a semi-colon");
    }
}
        
- (void)test1764
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&delta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&delta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: delta without a semi-colon");
    }
}
        
- (void)test1765
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&delta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: delta; with a semi-colon");
    }
}
        
- (void)test1766
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&demptyv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&demptyv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: demptyv without a semi-colon");
    }
}
        
- (void)test1767
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&demptyv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: demptyv; with a semi-colon");
    }
}
        
- (void)test1768
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dfisht"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dfisht"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dfisht without a semi-colon");
    }
}
        
- (void)test1769
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dfisht;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dfisht; with a semi-colon");
    }
}
        
- (void)test1770
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dfr without a semi-colon");
    }
}
        
- (void)test1771
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dfr; with a semi-colon");
    }
}
        
- (void)test1772
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dharl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dharl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dharl without a semi-colon");
    }
}
        
- (void)test1773
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dharl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dharl; with a semi-colon");
    }
}
        
- (void)test1774
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dharr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dharr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dharr without a semi-colon");
    }
}
        
- (void)test1775
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dharr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dharr; with a semi-colon");
    }
}
        
- (void)test1776
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&diam"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diam"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: diam without a semi-colon");
    }
}
        
- (void)test1777
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diam;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: diam; with a semi-colon");
    }
}
        
- (void)test1778
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&diamond"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diamond"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: diamond without a semi-colon");
    }
}
        
- (void)test1779
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diamond;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: diamond; with a semi-colon");
    }
}
        
- (void)test1780
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&diamondsuit"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diamondsuit"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: diamondsuit without a semi-colon");
    }
}
        
- (void)test1781
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diamondsuit;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: diamondsuit; with a semi-colon");
    }
}
        
- (void)test1782
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&diams"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diams"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: diams without a semi-colon");
    }
}
        
- (void)test1783
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&diams;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: diams; with a semi-colon");
    }
}
        
- (void)test1784
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&die"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&die"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: die without a semi-colon");
    }
}
        
- (void)test1785
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&die;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: die; with a semi-colon");
    }
}
        
- (void)test1786
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&digamma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&digamma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: digamma without a semi-colon");
    }
}
        
- (void)test1787
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&digamma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: digamma; with a semi-colon");
    }
}
        
- (void)test1788
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&disin"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&disin"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: disin without a semi-colon");
    }
}
        
- (void)test1789
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&disin;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: disin; with a semi-colon");
    }
}
        
- (void)test1790
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&div"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&div"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: div without a semi-colon");
    }
}
        
- (void)test1791
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&div;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: div; with a semi-colon");
    }
}
        
- (void)test1792
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&divide"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: divide without a semi-colon");
    }
}
        
- (void)test1793
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&divide;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: divide; with a semi-colon");
    }
}
        
- (void)test1794
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&divideontimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: divideontimes; with a semi-colon");
    }
}
        
- (void)test1795
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&divonx"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&divonx"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: divonx without a semi-colon");
    }
}
        
- (void)test1796
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&divonx;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: divonx; with a semi-colon");
    }
}
        
- (void)test1797
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&djcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&djcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: djcy without a semi-colon");
    }
}
        
- (void)test1798
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&djcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: djcy; with a semi-colon");
    }
}
        
- (void)test1799
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dlcorn"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dlcorn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dlcorn without a semi-colon");
    }
}
        
- (void)test1800
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dlcorn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dlcorn; with a semi-colon");
    }
}
        
- (void)test1801
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dlcrop"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dlcrop"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dlcrop without a semi-colon");
    }
}
        
- (void)test1802
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dlcrop;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dlcrop; with a semi-colon");
    }
}
        
- (void)test1803
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dollar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dollar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dollar without a semi-colon");
    }
}
        
- (void)test1804
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"$"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dollar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dollar; with a semi-colon");
    }
}
        
- (void)test1805
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dopf without a semi-colon");
    }
}
        
- (void)test1806
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dopf; with a semi-colon");
    }
}
        
- (void)test1807
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dot without a semi-colon");
    }
}
        
- (void)test1808
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dot; with a semi-colon");
    }
}
        
- (void)test1809
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&doteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&doteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: doteq without a semi-colon");
    }
}
        
- (void)test1810
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&doteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: doteq; with a semi-colon");
    }
}
        
- (void)test1811
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&doteqdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&doteqdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: doteqdot without a semi-colon");
    }
}
        
- (void)test1812
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&doteqdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: doteqdot; with a semi-colon");
    }
}
        
- (void)test1813
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dotminus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dotminus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dotminus without a semi-colon");
    }
}
        
- (void)test1814
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dotminus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dotminus; with a semi-colon");
    }
}
        
- (void)test1815
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dotplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dotplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dotplus without a semi-colon");
    }
}
        
- (void)test1816
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dotplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dotplus; with a semi-colon");
    }
}
        
- (void)test1817
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dotsquare"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dotsquare"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dotsquare without a semi-colon");
    }
}
        
- (void)test1818
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dotsquare;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dotsquare; with a semi-colon");
    }
}
        
- (void)test1819
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&doublebarwedge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&doublebarwedge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: doublebarwedge without a semi-colon");
    }
}
        
- (void)test1820
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&doublebarwedge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: doublebarwedge; with a semi-colon");
    }
}
        
- (void)test1821
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&downarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: downarrow without a semi-colon");
    }
}
        
- (void)test1822
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: downarrow; with a semi-colon");
    }
}
        
- (void)test1823
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&downdownarrows"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downdownarrows"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: downdownarrows without a semi-colon");
    }
}
        
- (void)test1824
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downdownarrows;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: downdownarrows; with a semi-colon");
    }
}
        
- (void)test1825
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&downharpoonleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downharpoonleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: downharpoonleft without a semi-colon");
    }
}
        
- (void)test1826
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downharpoonleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: downharpoonleft; with a semi-colon");
    }
}
        
- (void)test1827
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&downharpoonright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downharpoonright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: downharpoonright without a semi-colon");
    }
}
        
- (void)test1828
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&downharpoonright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: downharpoonright; with a semi-colon");
    }
}
        
- (void)test1829
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&drbkarow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&drbkarow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: drbkarow without a semi-colon");
    }
}
        
- (void)test1830
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&drbkarow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: drbkarow; with a semi-colon");
    }
}
        
- (void)test1831
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&drcorn"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&drcorn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: drcorn without a semi-colon");
    }
}
        
- (void)test1832
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&drcorn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: drcorn; with a semi-colon");
    }
}
        
- (void)test1833
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&drcrop"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&drcrop"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: drcrop without a semi-colon");
    }
}
        
- (void)test1834
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&drcrop;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: drcrop; with a semi-colon");
    }
}
        
- (void)test1835
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dscr without a semi-colon");
    }
}
        
- (void)test1836
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dscr; with a semi-colon");
    }
}
        
- (void)test1837
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dscy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dscy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dscy without a semi-colon");
    }
}
        
- (void)test1838
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dscy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dscy; with a semi-colon");
    }
}
        
- (void)test1839
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dsol"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dsol"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dsol without a semi-colon");
    }
}
        
- (void)test1840
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ß∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dsol;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dsol; with a semi-colon");
    }
}
        
- (void)test1841
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dstrok without a semi-colon");
    }
}
        
- (void)test1842
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dstrok; with a semi-colon");
    }
}
        
- (void)test1843
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dtdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dtdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dtdot without a semi-colon");
    }
}
        
- (void)test1844
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dtdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dtdot; with a semi-colon");
    }
}
        
- (void)test1845
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dtri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dtri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dtri without a semi-colon");
    }
}
        
- (void)test1846
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dtri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dtri; with a semi-colon");
    }
}
        
- (void)test1847
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dtrif"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dtrif"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dtrif without a semi-colon");
    }
}
        
- (void)test1848
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dtrif;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dtrif; with a semi-colon");
    }
}
        
- (void)test1849
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&duarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&duarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: duarr without a semi-colon");
    }
}
        
- (void)test1850
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&duarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: duarr; with a semi-colon");
    }
}
        
- (void)test1851
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&duhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&duhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: duhar without a semi-colon");
    }
}
        
- (void)test1852
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&duhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: duhar; with a semi-colon");
    }
}
        
- (void)test1853
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dwangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dwangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dwangle without a semi-colon");
    }
}
        
- (void)test1854
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dwangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dwangle; with a semi-colon");
    }
}
        
- (void)test1855
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dzcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dzcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dzcy without a semi-colon");
    }
}
        
- (void)test1856
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dzcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dzcy; with a semi-colon");
    }
}
        
- (void)test1857
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&dzigrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dzigrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: dzigrarr without a semi-colon");
    }
}
        
- (void)test1858
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&dzigrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: dzigrarr; with a semi-colon");
    }
}
        
- (void)test1859
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eDDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eDDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eDDot without a semi-colon");
    }
}
        
- (void)test1860
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eDDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eDDot; with a semi-colon");
    }
}
        
- (void)test1861
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eDot without a semi-colon");
    }
}
        
- (void)test1862
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eDot; with a semi-colon");
    }
}
        
- (void)test1863
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eacute without a semi-colon");
    }
}
        
- (void)test1864
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eacute; with a semi-colon");
    }
}
        
- (void)test1865
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&easter"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&easter"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: easter without a semi-colon");
    }
}
        
- (void)test1866
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&easter;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: easter; with a semi-colon");
    }
}
        
- (void)test1867
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ecaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ecaron without a semi-colon");
    }
}
        
- (void)test1868
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ecaron; with a semi-colon");
    }
}
        
- (void)test1869
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ecir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ecir without a semi-colon");
    }
}
        
- (void)test1870
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ecir; with a semi-colon");
    }
}
        
- (void)test1871
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ecirc without a semi-colon");
    }
}
        
- (void)test1872
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ecirc; with a semi-colon");
    }
}
        
- (void)test1873
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ecolon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecolon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ecolon without a semi-colon");
    }
}
        
- (void)test1874
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecolon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ecolon; with a semi-colon");
    }
}
        
- (void)test1875
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ecy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ecy without a semi-colon");
    }
}
        
- (void)test1876
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ecy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ecy; with a semi-colon");
    }
}
        
- (void)test1877
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&edot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&edot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: edot without a semi-colon");
    }
}
        
- (void)test1878
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&edot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: edot; with a semi-colon");
    }
}
        
- (void)test1879
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ee without a semi-colon");
    }
}
        
- (void)test1880
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ee; with a semi-colon");
    }
}
        
- (void)test1881
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&efDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&efDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: efDot without a semi-colon");
    }
}
        
- (void)test1882
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&efDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: efDot; with a semi-colon");
    }
}
        
- (void)test1883
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&efr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&efr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: efr without a semi-colon");
    }
}
        
- (void)test1884
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&efr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: efr; with a semi-colon");
    }
}
        
- (void)test1885
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eg without a semi-colon");
    }
}
        
- (void)test1886
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eg; with a semi-colon");
    }
}
        
- (void)test1887
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&egrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: egrave without a semi-colon");
    }
}
        
- (void)test1888
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&egrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: egrave; with a semi-colon");
    }
}
        
- (void)test1889
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&egs"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&egs"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: egs without a semi-colon");
    }
}
        
- (void)test1890
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&egs;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: egs; with a semi-colon");
    }
}
        
- (void)test1891
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&egsdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&egsdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: egsdot without a semi-colon");
    }
}
        
- (void)test1892
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&egsdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: egsdot; with a semi-colon");
    }
}
        
- (void)test1893
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&el"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&el"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: el without a semi-colon");
    }
}
        
- (void)test1894
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&el;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: el; with a semi-colon");
    }
}
        
- (void)test1895
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&elinters"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&elinters"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: elinters without a semi-colon");
    }
}
        
- (void)test1896
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚èß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&elinters;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: elinters; with a semi-colon");
    }
}
        
- (void)test1897
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ell"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ell"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ell without a semi-colon");
    }
}
        
- (void)test1898
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ell;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ell; with a semi-colon");
    }
}
        
- (void)test1899
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&els"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&els"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: els without a semi-colon");
    }
}
        
- (void)test1900
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&els;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: els; with a semi-colon");
    }
}
        
- (void)test1901
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&elsdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&elsdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: elsdot without a semi-colon");
    }
}
        
- (void)test1902
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&elsdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: elsdot; with a semi-colon");
    }
}
        
- (void)test1903
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&emacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: emacr without a semi-colon");
    }
}
        
- (void)test1904
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: emacr; with a semi-colon");
    }
}
        
- (void)test1905
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&empty"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&empty"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: empty without a semi-colon");
    }
}
        
- (void)test1906
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&empty;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: empty; with a semi-colon");
    }
}
        
- (void)test1907
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&emptyset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emptyset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: emptyset without a semi-colon");
    }
}
        
- (void)test1908
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emptyset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: emptyset; with a semi-colon");
    }
}
        
- (void)test1909
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&emptyv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emptyv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: emptyv without a semi-colon");
    }
}
        
- (void)test1910
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emptyv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: emptyv; with a semi-colon");
    }
}
        
- (void)test1911
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&emsp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emsp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: emsp without a semi-colon");
    }
}
        
- (void)test1912
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&emsp13"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emsp13"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: emsp13 without a semi-colon");
    }
}
        
- (void)test1913
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÄÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emsp13;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: emsp13; with a semi-colon");
    }
}
        
- (void)test1914
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&emsp14"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emsp14"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: emsp14 without a semi-colon");
    }
}
        
- (void)test1915
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÄÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emsp14;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: emsp14; with a semi-colon");
    }
}
        
- (void)test1916
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÄÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&emsp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: emsp; with a semi-colon");
    }
}
        
- (void)test1917
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eng"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eng"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eng without a semi-colon");
    }
}
        
- (void)test1918
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eng;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eng; with a semi-colon");
    }
}
        
- (void)test1919
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ensp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ensp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ensp without a semi-colon");
    }
}
        
- (void)test1920
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÄÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ensp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ensp; with a semi-colon");
    }
}
        
- (void)test1921
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eogon without a semi-colon");
    }
}
        
- (void)test1922
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eogon; with a semi-colon");
    }
}
        
- (void)test1923
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eopf without a semi-colon");
    }
}
        
- (void)test1924
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eopf; with a semi-colon");
    }
}
        
- (void)test1925
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&epar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: epar without a semi-colon");
    }
}
        
- (void)test1926
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: epar; with a semi-colon");
    }
}
        
- (void)test1927
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eparsl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eparsl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eparsl without a semi-colon");
    }
}
        
- (void)test1928
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ß£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eparsl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eparsl; with a semi-colon");
    }
}
        
- (void)test1929
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eplus without a semi-colon");
    }
}
        
- (void)test1930
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eplus; with a semi-colon");
    }
}
        
- (void)test1931
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&epsi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epsi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: epsi without a semi-colon");
    }
}
        
- (void)test1932
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epsi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: epsi; with a semi-colon");
    }
}
        
- (void)test1933
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&epsilon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epsilon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: epsilon without a semi-colon");
    }
}
        
- (void)test1934
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epsilon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: epsilon; with a semi-colon");
    }
}
        
- (void)test1935
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&epsiv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epsiv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: epsiv without a semi-colon");
    }
}
        
- (void)test1936
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&epsiv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: epsiv; with a semi-colon");
    }
}
        
- (void)test1937
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eqcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eqcirc without a semi-colon");
    }
}
        
- (void)test1938
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eqcirc; with a semi-colon");
    }
}
        
- (void)test1939
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eqcolon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqcolon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eqcolon without a semi-colon");
    }
}
        
- (void)test1940
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqcolon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eqcolon; with a semi-colon");
    }
}
        
- (void)test1941
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eqsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eqsim without a semi-colon");
    }
}
        
- (void)test1942
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eqsim; with a semi-colon");
    }
}
        
- (void)test1943
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eqslantgtr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqslantgtr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eqslantgtr without a semi-colon");
    }
}
        
- (void)test1944
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqslantgtr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eqslantgtr; with a semi-colon");
    }
}
        
- (void)test1945
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eqslantless"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqslantless"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eqslantless without a semi-colon");
    }
}
        
- (void)test1946
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqslantless;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eqslantless; with a semi-colon");
    }
}
        
- (void)test1947
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&equals"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equals"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: equals without a semi-colon");
    }
}
        
- (void)test1948
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equals;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: equals; with a semi-colon");
    }
}
        
- (void)test1949
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&equest"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equest"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: equest without a semi-colon");
    }
}
        
- (void)test1950
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equest;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: equest; with a semi-colon");
    }
}
        
- (void)test1951
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&equiv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equiv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: equiv without a semi-colon");
    }
}
        
- (void)test1952
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equiv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: equiv; with a semi-colon");
    }
}
        
- (void)test1953
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&equivDD"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equivDD"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: equivDD without a semi-colon");
    }
}
        
- (void)test1954
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&equivDD;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: equivDD; with a semi-colon");
    }
}
        
- (void)test1955
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eqvparsl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqvparsl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eqvparsl without a semi-colon");
    }
}
        
- (void)test1956
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ß•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eqvparsl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eqvparsl; with a semi-colon");
    }
}
        
- (void)test1957
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&erDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&erDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: erDot without a semi-colon");
    }
}
        
- (void)test1958
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&erDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: erDot; with a semi-colon");
    }
}
        
- (void)test1959
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&erarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&erarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: erarr without a semi-colon");
    }
}
        
- (void)test1960
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&erarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: erarr; with a semi-colon");
    }
}
        
- (void)test1961
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&escr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&escr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: escr without a semi-colon");
    }
}
        
- (void)test1962
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÑØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&escr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: escr; with a semi-colon");
    }
}
        
- (void)test1963
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&esdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&esdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: esdot without a semi-colon");
    }
}
        
- (void)test1964
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&esdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: esdot; with a semi-colon");
    }
}
        
- (void)test1965
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&esim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&esim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: esim without a semi-colon");
    }
}
        
- (void)test1966
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&esim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: esim; with a semi-colon");
    }
}
        
- (void)test1967
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&eta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: eta without a semi-colon");
    }
}
        
- (void)test1968
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eta; with a semi-colon");
    }
}
        
- (void)test1969
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eth"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eth without a semi-colon");
    }
}
        
- (void)test1970
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&eth;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: eth; with a semi-colon");
    }
}
        
- (void)test1971
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&euml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: euml without a semi-colon");
    }
}
        
- (void)test1972
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&euml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: euml; with a semi-colon");
    }
}
        
- (void)test1973
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&euro"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&euro"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: euro without a semi-colon");
    }
}
        
- (void)test1974
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ç¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&euro;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: euro; with a semi-colon");
    }
}
        
- (void)test1975
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&excl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&excl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: excl without a semi-colon");
    }
}
        
- (void)test1976
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&excl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: excl; with a semi-colon");
    }
}
        
- (void)test1977
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&exist"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&exist"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: exist without a semi-colon");
    }
}
        
- (void)test1978
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&exist;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: exist; with a semi-colon");
    }
}
        
- (void)test1979
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&expectation"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&expectation"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: expectation without a semi-colon");
    }
}
        
- (void)test1980
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&expectation;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: expectation; with a semi-colon");
    }
}
        
- (void)test1981
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&exponentiale"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&exponentiale"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: exponentiale without a semi-colon");
    }
}
        
- (void)test1982
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&exponentiale;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: exponentiale; with a semi-colon");
    }
}
        
- (void)test1983
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fallingdotseq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fallingdotseq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fallingdotseq without a semi-colon");
    }
}
        
- (void)test1984
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fallingdotseq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fallingdotseq; with a semi-colon");
    }
}
        
- (void)test1985
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fcy without a semi-colon");
    }
}
        
- (void)test1986
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fcy; with a semi-colon");
    }
}
        
- (void)test1987
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&female"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&female"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: female without a semi-colon");
    }
}
        
- (void)test1988
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ôÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&female;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: female; with a semi-colon");
    }
}
        
- (void)test1989
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ffilig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ffilig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ffilig without a semi-colon");
    }
}
        
- (void)test1990
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ô¨É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ffilig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ffilig; with a semi-colon");
    }
}
        
- (void)test1991
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fflig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fflig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fflig without a semi-colon");
    }
}
        
- (void)test1992
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ô¨Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fflig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fflig; with a semi-colon");
    }
}
        
- (void)test1993
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ffllig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ffllig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ffllig without a semi-colon");
    }
}
        
- (void)test1994
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ô¨Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ffllig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ffllig; with a semi-colon");
    }
}
        
- (void)test1995
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ffr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ffr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ffr without a semi-colon");
    }
}
        
- (void)test1996
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ffr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ffr; with a semi-colon");
    }
}
        
- (void)test1997
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&filig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&filig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: filig without a semi-colon");
    }
}
        
- (void)test1998
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ô¨Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&filig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: filig; with a semi-colon");
    }
}
        
- (void)test1999
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fjlig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fjlig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fjlig without a semi-colon");
    }
}
        
- (void)test2000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"fj"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fjlig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fjlig; with a semi-colon");
    }
}
        
- (void)test2001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&flat"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&flat"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: flat without a semi-colon");
    }
}
        
- (void)test2002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&flat;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: flat; with a semi-colon");
    }
}
        
- (void)test2003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fllig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fllig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fllig without a semi-colon");
    }
}
        
- (void)test2004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ô¨Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fllig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fllig; with a semi-colon");
    }
}
        
- (void)test2005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fltns"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fltns"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fltns without a semi-colon");
    }
}
        
- (void)test2006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fltns;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fltns; with a semi-colon");
    }
}
        
- (void)test2007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fnof"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fnof"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fnof without a semi-colon");
    }
}
        
- (void)test2008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"∆í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fnof;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fnof; with a semi-colon");
    }
}
        
- (void)test2009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fopf without a semi-colon");
    }
}
        
- (void)test2010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fopf; with a semi-colon");
    }
}
        
- (void)test2011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&forall"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&forall"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: forall without a semi-colon");
    }
}
        
- (void)test2012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&forall;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: forall; with a semi-colon");
    }
}
        
- (void)test2013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fork"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fork"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fork without a semi-colon");
    }
}
        
- (void)test2014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fork;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fork; with a semi-colon");
    }
}
        
- (void)test2015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&forkv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&forkv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: forkv without a semi-colon");
    }
}
        
- (void)test2016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&forkv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: forkv; with a semi-colon");
    }
}
        
- (void)test2017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fpartint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fpartint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fpartint without a semi-colon");
    }
}
        
- (void)test2018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fpartint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fpartint; with a semi-colon");
    }
}
        
- (void)test2019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac12"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac12 without a semi-colon");
    }
}
        
- (void)test2020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac12;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac12; with a semi-colon");
    }
}
        
- (void)test2021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac13"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac13"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac13 without a semi-colon");
    }
}
        
- (void)test2022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac13;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac13; with a semi-colon");
    }
}
        
- (void)test2023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac14"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac14 without a semi-colon");
    }
}
        
- (void)test2024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac14;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac14; with a semi-colon");
    }
}
        
- (void)test2025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac15"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac15"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac15 without a semi-colon");
    }
}
        
- (void)test2026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac15;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac15; with a semi-colon");
    }
}
        
- (void)test2027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac16"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac16"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac16 without a semi-colon");
    }
}
        
- (void)test2028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac16;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac16; with a semi-colon");
    }
}
        
- (void)test2029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac18"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac18"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac18 without a semi-colon");
    }
}
        
- (void)test2030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac18;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac18; with a semi-colon");
    }
}
        
- (void)test2031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac23"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac23"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac23 without a semi-colon");
    }
}
        
- (void)test2032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac23;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac23; with a semi-colon");
    }
}
        
- (void)test2033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac25"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac25"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac25 without a semi-colon");
    }
}
        
- (void)test2034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac25;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac25; with a semi-colon");
    }
}
        
- (void)test2035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac34"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac34 without a semi-colon");
    }
}
        
- (void)test2036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac34;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac34; with a semi-colon");
    }
}
        
- (void)test2037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac35"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac35"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac35 without a semi-colon");
    }
}
        
- (void)test2038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac35;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac35; with a semi-colon");
    }
}
        
- (void)test2039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac38"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac38"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac38 without a semi-colon");
    }
}
        
- (void)test2040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac38;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac38; with a semi-colon");
    }
}
        
- (void)test2041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac45"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac45"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac45 without a semi-colon");
    }
}
        
- (void)test2042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac45;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac45; with a semi-colon");
    }
}
        
- (void)test2043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac56"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac56"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac56 without a semi-colon");
    }
}
        
- (void)test2044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac56;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac56; with a semi-colon");
    }
}
        
- (void)test2045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac58"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac58"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac58 without a semi-colon");
    }
}
        
- (void)test2046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac58;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac58; with a semi-colon");
    }
}
        
- (void)test2047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frac78"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac78"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frac78 without a semi-colon");
    }
}
        
- (void)test2048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frac78;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frac78; with a semi-colon");
    }
}
        
- (void)test2049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frasl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frasl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frasl without a semi-colon");
    }
}
        
- (void)test2050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÅÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frasl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frasl; with a semi-colon");
    }
}
        
- (void)test2051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&frown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: frown without a semi-colon");
    }
}
        
- (void)test2052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚å¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&frown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: frown; with a semi-colon");
    }
}
        
- (void)test2053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&fscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: fscr without a semi-colon");
    }
}
        
- (void)test2054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&fscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: fscr; with a semi-colon");
    }
}
        
- (void)test2055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gE without a semi-colon");
    }
}
        
- (void)test2056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gE; with a semi-colon");
    }
}
        
- (void)test2057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gEl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gEl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gEl without a semi-colon");
    }
}
        
- (void)test2058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gEl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gEl; with a semi-colon");
    }
}
        
- (void)test2059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gacute without a semi-colon");
    }
}
        
- (void)test2060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"«µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gacute; with a semi-colon");
    }
}
        
- (void)test2061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gamma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gamma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gamma without a semi-colon");
    }
}
        
- (void)test2062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gamma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gamma; with a semi-colon");
    }
}
        
- (void)test2063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gammad"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gammad"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gammad without a semi-colon");
    }
}
        
- (void)test2064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gammad;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gammad; with a semi-colon");
    }
}
        
- (void)test2065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gap without a semi-colon");
    }
}
        
- (void)test2066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gap; with a semi-colon");
    }
}
        
- (void)test2067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gbreve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gbreve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gbreve without a semi-colon");
    }
}
        
- (void)test2068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gbreve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gbreve; with a semi-colon");
    }
}
        
- (void)test2069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gcirc without a semi-colon");
    }
}
        
- (void)test2070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gcirc; with a semi-colon");
    }
}
        
- (void)test2071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gcy without a semi-colon");
    }
}
        
- (void)test2072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gcy; with a semi-colon");
    }
}
        
- (void)test2073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gdot without a semi-colon");
    }
}
        
- (void)test2074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gdot; with a semi-colon");
    }
}
        
- (void)test2075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ge without a semi-colon");
    }
}
        
- (void)test2076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ge; with a semi-colon");
    }
}
        
- (void)test2077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gel"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gel"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gel without a semi-colon");
    }
}
        
- (void)test2078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gel;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gel; with a semi-colon");
    }
}
        
- (void)test2079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&geq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&geq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: geq without a semi-colon");
    }
}
        
- (void)test2080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&geq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: geq; with a semi-colon");
    }
}
        
- (void)test2081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&geqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&geqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: geqq without a semi-colon");
    }
}
        
- (void)test2082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&geqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: geqq; with a semi-colon");
    }
}
        
- (void)test2083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&geqslant"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&geqslant"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: geqslant without a semi-colon");
    }
}
        
- (void)test2084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&geqslant;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: geqslant; with a semi-colon");
    }
}
        
- (void)test2085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ges"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ges"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ges without a semi-colon");
    }
}
        
- (void)test2086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ges;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ges; with a semi-colon");
    }
}
        
- (void)test2087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gescc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gescc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gescc without a semi-colon");
    }
}
        
- (void)test2088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gescc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gescc; with a semi-colon");
    }
}
        
- (void)test2089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gesdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gesdot without a semi-colon");
    }
}
        
- (void)test2090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gesdot; with a semi-colon");
    }
}
        
- (void)test2091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gesdoto"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesdoto"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gesdoto without a semi-colon");
    }
}
        
- (void)test2092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesdoto;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gesdoto; with a semi-colon");
    }
}
        
- (void)test2093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gesdotol"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesdotol"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gesdotol without a semi-colon");
    }
}
        
- (void)test2094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesdotol;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gesdotol; with a semi-colon");
    }
}
        
- (void)test2095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gesl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gesl without a semi-colon");
    }
}
        
- (void)test2096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãõÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gesl; with a semi-colon");
    }
}
        
- (void)test2097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gesles"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesles"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gesles without a semi-colon");
    }
}
        
- (void)test2098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gesles;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gesles; with a semi-colon");
    }
}
        
- (void)test2099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gfr without a semi-colon");
    }
}
        
- (void)test2100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gfr; with a semi-colon");
    }
}
        
- (void)test2101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gg without a semi-colon");
    }
}
        
- (void)test2102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gg; with a semi-colon");
    }
}
        
- (void)test2103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ggg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ggg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ggg without a semi-colon");
    }
}
        
- (void)test2104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ggg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ggg; with a semi-colon");
    }
}
        
- (void)test2105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gimel"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gimel"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gimel without a semi-colon");
    }
}
        
- (void)test2106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gimel;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gimel; with a semi-colon");
    }
}
        
- (void)test2107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gjcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gjcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gjcy without a semi-colon");
    }
}
        
- (void)test2108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gjcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gjcy; with a semi-colon");
    }
}
        
- (void)test2109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gl without a semi-colon");
    }
}
        
- (void)test2110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gl; with a semi-colon");
    }
}
        
- (void)test2111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&glE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&glE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: glE without a semi-colon");
    }
}
        
- (void)test2112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&glE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: glE; with a semi-colon");
    }
}
        
- (void)test2113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gla"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gla"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gla without a semi-colon");
    }
}
        
- (void)test2114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gla;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gla; with a semi-colon");
    }
}
        
- (void)test2115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&glj"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&glj"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: glj without a semi-colon");
    }
}
        
- (void)test2116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&glj;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: glj; with a semi-colon");
    }
}
        
- (void)test2117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gnE without a semi-colon");
    }
}
        
- (void)test2118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gnE; with a semi-colon");
    }
}
        
- (void)test2119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gnap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gnap without a semi-colon");
    }
}
        
- (void)test2120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gnap; with a semi-colon");
    }
}
        
- (void)test2121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gnapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gnapprox without a semi-colon");
    }
}
        
- (void)test2122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gnapprox; with a semi-colon");
    }
}
        
- (void)test2123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gne without a semi-colon");
    }
}
        
- (void)test2124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gne; with a semi-colon");
    }
}
        
- (void)test2125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gneq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gneq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gneq without a semi-colon");
    }
}
        
- (void)test2126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gneq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gneq; with a semi-colon");
    }
}
        
- (void)test2127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gneqq without a semi-colon");
    }
}
        
- (void)test2128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gneqq; with a semi-colon");
    }
}
        
- (void)test2129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gnsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gnsim without a semi-colon");
    }
}
        
- (void)test2130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gnsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gnsim; with a semi-colon");
    }
}
        
- (void)test2131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gopf without a semi-colon");
    }
}
        
- (void)test2132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gopf; with a semi-colon");
    }
}
        
- (void)test2133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&grave"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&grave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: grave without a semi-colon");
    }
}
        
- (void)test2134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&grave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: grave; with a semi-colon");
    }
}
        
- (void)test2135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gscr without a semi-colon");
    }
}
        
- (void)test2136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gscr; with a semi-colon");
    }
}
        
- (void)test2137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gsim without a semi-colon");
    }
}
        
- (void)test2138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gsim; with a semi-colon");
    }
}
        
- (void)test2139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gsime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gsime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gsime without a semi-colon");
    }
}
        
- (void)test2140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gsime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gsime; with a semi-colon");
    }
}
        
- (void)test2141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gsiml"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gsiml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gsiml without a semi-colon");
    }
}
        
- (void)test2142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gsiml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gsiml; with a semi-colon");
    }
}
        
- (void)test2143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @">"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gt without a semi-colon");
    }
}
        
- (void)test2144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @">"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gt; with a semi-colon");
    }
}
        
- (void)test2145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtcc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtcc; with a semi-colon");
    }
}
        
- (void)test2146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtcir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtcir; with a semi-colon");
    }
}
        
- (void)test2147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtdot; with a semi-colon");
    }
}
        
- (void)test2148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtlPar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtlPar; with a semi-colon");
    }
}
        
- (void)test2149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtquest;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtquest; with a semi-colon");
    }
}
        
- (void)test2150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtrapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtrapprox; with a semi-colon");
    }
}
        
- (void)test2151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtrarr; with a semi-colon");
    }
}
        
- (void)test2152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtrdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtrdot; with a semi-colon");
    }
}
        
- (void)test2153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtreqless;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtreqless; with a semi-colon");
    }
}
        
- (void)test2154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtreqqless;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtreqqless; with a semi-colon");
    }
}
        
- (void)test2155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtrless;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtrless; with a semi-colon");
    }
}
        
- (void)test2156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gtrsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gtrsim; with a semi-colon");
    }
}
        
- (void)test2157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gvertneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gvertneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gvertneqq without a semi-colon");
    }
}
        
- (void)test2158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â©Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gvertneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gvertneqq; with a semi-colon");
    }
}
        
- (void)test2159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&gvnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gvnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: gvnE without a semi-colon");
    }
}
        
- (void)test2160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â©Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&gvnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: gvnE; with a semi-colon");
    }
}
        
- (void)test2161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hArr without a semi-colon");
    }
}
        
- (void)test2162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hArr; with a semi-colon");
    }
}
        
- (void)test2163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hairsp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hairsp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hairsp without a semi-colon");
    }
}
        
- (void)test2164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ää"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hairsp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hairsp; with a semi-colon");
    }
}
        
- (void)test2165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&half"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&half"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: half without a semi-colon");
    }
}
        
- (void)test2166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&half;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: half; with a semi-colon");
    }
}
        
- (void)test2167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hamilt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hamilt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hamilt without a semi-colon");
    }
}
        
- (void)test2168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hamilt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hamilt; with a semi-colon");
    }
}
        
- (void)test2169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hardcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hardcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hardcy without a semi-colon");
    }
}
        
- (void)test2170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hardcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hardcy; with a semi-colon");
    }
}
        
- (void)test2171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&harr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&harr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: harr without a semi-colon");
    }
}
        
- (void)test2172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&harr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: harr; with a semi-colon");
    }
}
        
- (void)test2173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&harrcir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&harrcir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: harrcir without a semi-colon");
    }
}
        
- (void)test2174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&harrcir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: harrcir; with a semi-colon");
    }
}
        
- (void)test2175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&harrw"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&harrw"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: harrw without a semi-colon");
    }
}
        
- (void)test2176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&harrw;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: harrw; with a semi-colon");
    }
}
        
- (void)test2177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hbar without a semi-colon");
    }
}
        
- (void)test2178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hbar; with a semi-colon");
    }
}
        
- (void)test2179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hcirc without a semi-colon");
    }
}
        
- (void)test2180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hcirc; with a semi-colon");
    }
}
        
- (void)test2181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hearts"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hearts"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hearts without a semi-colon");
    }
}
        
- (void)test2182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hearts;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hearts; with a semi-colon");
    }
}
        
- (void)test2183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&heartsuit"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&heartsuit"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: heartsuit without a semi-colon");
    }
}
        
- (void)test2184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&heartsuit;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: heartsuit; with a semi-colon");
    }
}
        
- (void)test2185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hellip"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hellip"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hellip without a semi-colon");
    }
}
        
- (void)test2186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hellip;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hellip; with a semi-colon");
    }
}
        
- (void)test2187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hercon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hercon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hercon without a semi-colon");
    }
}
        
- (void)test2188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hercon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hercon; with a semi-colon");
    }
}
        
- (void)test2189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hfr without a semi-colon");
    }
}
        
- (void)test2190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hfr; with a semi-colon");
    }
}
        
- (void)test2191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hksearow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hksearow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hksearow without a semi-colon");
    }
}
        
- (void)test2192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hksearow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hksearow; with a semi-colon");
    }
}
        
- (void)test2193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hkswarow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hkswarow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hkswarow without a semi-colon");
    }
}
        
- (void)test2194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hkswarow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hkswarow; with a semi-colon");
    }
}
        
- (void)test2195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hoarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hoarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hoarr without a semi-colon");
    }
}
        
- (void)test2196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hoarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hoarr; with a semi-colon");
    }
}
        
- (void)test2197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&homtht"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&homtht"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: homtht without a semi-colon");
    }
}
        
- (void)test2198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&homtht;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: homtht; with a semi-colon");
    }
}
        
- (void)test2199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hookleftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hookleftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hookleftarrow without a semi-colon");
    }
}
        
- (void)test2200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hookleftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hookleftarrow; with a semi-colon");
    }
}
        
- (void)test2201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hookrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hookrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hookrightarrow without a semi-colon");
    }
}
        
- (void)test2202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hookrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hookrightarrow; with a semi-colon");
    }
}
        
- (void)test2203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hopf without a semi-colon");
    }
}
        
- (void)test2204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hopf; with a semi-colon");
    }
}
        
- (void)test2205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&horbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&horbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: horbar without a semi-colon");
    }
}
        
- (void)test2206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&horbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: horbar; with a semi-colon");
    }
}
        
- (void)test2207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hscr without a semi-colon");
    }
}
        
- (void)test2208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hscr; with a semi-colon");
    }
}
        
- (void)test2209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hslash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hslash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hslash without a semi-colon");
    }
}
        
- (void)test2210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hslash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hslash; with a semi-colon");
    }
}
        
- (void)test2211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hstrok without a semi-colon");
    }
}
        
- (void)test2212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hstrok; with a semi-colon");
    }
}
        
- (void)test2213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hybull"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hybull"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hybull without a semi-colon");
    }
}
        
- (void)test2214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÅÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hybull;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hybull; with a semi-colon");
    }
}
        
- (void)test2215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&hyphen"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hyphen"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: hyphen without a semi-colon");
    }
}
        
- (void)test2216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&hyphen;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: hyphen; with a semi-colon");
    }
}
        
- (void)test2217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iacute without a semi-colon");
    }
}
        
- (void)test2218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iacute; with a semi-colon");
    }
}
        
- (void)test2219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ic"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ic"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ic without a semi-colon");
    }
}
        
- (void)test2220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Å£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ic;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ic; with a semi-colon");
    }
}
        
- (void)test2221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&icirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: icirc without a semi-colon");
    }
}
        
- (void)test2222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&icirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: icirc; with a semi-colon");
    }
}
        
- (void)test2223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&icy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&icy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: icy without a semi-colon");
    }
}
        
- (void)test2224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&icy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: icy; with a semi-colon");
    }
}
        
- (void)test2225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iecy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iecy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iecy without a semi-colon");
    }
}
        
- (void)test2226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iecy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iecy; with a semi-colon");
    }
}
        
- (void)test2227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iexcl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iexcl without a semi-colon");
    }
}
        
- (void)test2228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iexcl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iexcl; with a semi-colon");
    }
}
        
- (void)test2229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iff"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iff"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iff without a semi-colon");
    }
}
        
- (void)test2230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iff;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iff; with a semi-colon");
    }
}
        
- (void)test2231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ifr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ifr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ifr without a semi-colon");
    }
}
        
- (void)test2232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ifr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ifr; with a semi-colon");
    }
}
        
- (void)test2233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&igrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: igrave without a semi-colon");
    }
}
        
- (void)test2234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&igrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: igrave; with a semi-colon");
    }
}
        
- (void)test2235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ii"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ii"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ii without a semi-colon");
    }
}
        
- (void)test2236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Öà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ii;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ii; with a semi-colon");
    }
}
        
- (void)test2237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iiiint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iiiint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iiiint without a semi-colon");
    }
}
        
- (void)test2238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iiiint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iiiint; with a semi-colon");
    }
}
        
- (void)test2239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iiint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iiint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iiint without a semi-colon");
    }
}
        
- (void)test2240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iiint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iiint; with a semi-colon");
    }
}
        
- (void)test2241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iinfin"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iinfin"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iinfin without a semi-colon");
    }
}
        
- (void)test2242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iinfin;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iinfin; with a semi-colon");
    }
}
        
- (void)test2243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iiota"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iiota"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iiota without a semi-colon");
    }
}
        
- (void)test2244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iiota;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iiota; with a semi-colon");
    }
}
        
- (void)test2245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ijlig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ijlig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ijlig without a semi-colon");
    }
}
        
- (void)test2246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ijlig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ijlig; with a semi-colon");
    }
}
        
- (void)test2247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&imacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: imacr without a semi-colon");
    }
}
        
- (void)test2248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: imacr; with a semi-colon");
    }
}
        
- (void)test2249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&image"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&image"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: image without a semi-colon");
    }
}
        
- (void)test2250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&image;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: image; with a semi-colon");
    }
}
        
- (void)test2251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&imagline"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imagline"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: imagline without a semi-colon");
    }
}
        
- (void)test2252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imagline;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: imagline; with a semi-colon");
    }
}
        
- (void)test2253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&imagpart"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imagpart"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: imagpart without a semi-colon");
    }
}
        
- (void)test2254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imagpart;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: imagpart; with a semi-colon");
    }
}
        
- (void)test2255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&imath"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imath"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: imath without a semi-colon");
    }
}
        
- (void)test2256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imath;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: imath; with a semi-colon");
    }
}
        
- (void)test2257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&imof"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imof"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: imof without a semi-colon");
    }
}
        
- (void)test2258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imof;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: imof; with a semi-colon");
    }
}
        
- (void)test2259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&imped"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imped"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: imped without a semi-colon");
    }
}
        
- (void)test2260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"∆µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&imped;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: imped; with a semi-colon");
    }
}
        
- (void)test2261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&in"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&in"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: in without a semi-colon");
    }
}
        
- (void)test2262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&in;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: in; with a semi-colon");
    }
}
        
- (void)test2263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&incare"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&incare"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: incare without a semi-colon");
    }
}
        
- (void)test2264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÑÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&incare;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: incare; with a semi-colon");
    }
}
        
- (void)test2265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&infin"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&infin"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: infin without a semi-colon");
    }
}
        
- (void)test2266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&infin;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: infin; with a semi-colon");
    }
}
        
- (void)test2267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&infintie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&infintie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: infintie without a semi-colon");
    }
}
        
- (void)test2268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&infintie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: infintie; with a semi-colon");
    }
}
        
- (void)test2269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&inodot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&inodot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: inodot without a semi-colon");
    }
}
        
- (void)test2270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&inodot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: inodot; with a semi-colon");
    }
}
        
- (void)test2271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&int"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&int"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: int without a semi-colon");
    }
}
        
- (void)test2272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&int;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: int; with a semi-colon");
    }
}
        
- (void)test2273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&intcal"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intcal"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: intcal without a semi-colon");
    }
}
        
- (void)test2274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intcal;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: intcal; with a semi-colon");
    }
}
        
- (void)test2275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&integers"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&integers"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: integers without a semi-colon");
    }
}
        
- (void)test2276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&integers;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: integers; with a semi-colon");
    }
}
        
- (void)test2277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&intercal"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intercal"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: intercal without a semi-colon");
    }
}
        
- (void)test2278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intercal;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: intercal; with a semi-colon");
    }
}
        
- (void)test2279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&intlarhk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intlarhk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: intlarhk without a semi-colon");
    }
}
        
- (void)test2280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intlarhk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: intlarhk; with a semi-colon");
    }
}
        
- (void)test2281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&intprod"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intprod"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: intprod without a semi-colon");
    }
}
        
- (void)test2282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&intprod;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: intprod; with a semi-colon");
    }
}
        
- (void)test2283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iocy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iocy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iocy without a semi-colon");
    }
}
        
- (void)test2284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iocy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iocy; with a semi-colon");
    }
}
        
- (void)test2285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iogon without a semi-colon");
    }
}
        
- (void)test2286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iogon; with a semi-colon");
    }
}
        
- (void)test2287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iopf without a semi-colon");
    }
}
        
- (void)test2288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iopf; with a semi-colon");
    }
}
        
- (void)test2289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iota"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iota"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iota without a semi-colon");
    }
}
        
- (void)test2290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iota;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iota; with a semi-colon");
    }
}
        
- (void)test2291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iprod"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iprod"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iprod without a semi-colon");
    }
}
        
- (void)test2292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iprod;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iprod; with a semi-colon");
    }
}
        
- (void)test2293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iquest"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iquest without a semi-colon");
    }
}
        
- (void)test2294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iquest;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iquest; with a semi-colon");
    }
}
        
- (void)test2295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iscr without a semi-colon");
    }
}
        
- (void)test2296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iscr; with a semi-colon");
    }
}
        
- (void)test2297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&isin"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isin"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: isin without a semi-colon");
    }
}
        
- (void)test2298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isin;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: isin; with a semi-colon");
    }
}
        
- (void)test2299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&isinE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isinE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: isinE without a semi-colon");
    }
}
        
- (void)test2300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isinE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: isinE; with a semi-colon");
    }
}
        
- (void)test2301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&isindot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isindot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: isindot without a semi-colon");
    }
}
        
- (void)test2302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isindot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: isindot; with a semi-colon");
    }
}
        
- (void)test2303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&isins"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isins"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: isins without a semi-colon");
    }
}
        
- (void)test2304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isins;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: isins; with a semi-colon");
    }
}
        
- (void)test2305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&isinsv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isinsv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: isinsv without a semi-colon");
    }
}
        
- (void)test2306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isinsv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: isinsv; with a semi-colon");
    }
}
        
- (void)test2307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&isinv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isinv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: isinv without a semi-colon");
    }
}
        
- (void)test2308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&isinv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: isinv; with a semi-colon");
    }
}
        
- (void)test2309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&it"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&it"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: it without a semi-colon");
    }
}
        
- (void)test2310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Å¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&it;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: it; with a semi-colon");
    }
}
        
- (void)test2311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&itilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&itilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: itilde without a semi-colon");
    }
}
        
- (void)test2312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&itilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: itilde; with a semi-colon");
    }
}
        
- (void)test2313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&iukcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iukcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: iukcy without a semi-colon");
    }
}
        
- (void)test2314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iukcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iukcy; with a semi-colon");
    }
}
        
- (void)test2315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iuml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iuml without a semi-colon");
    }
}
        
- (void)test2316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&iuml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: iuml; with a semi-colon");
    }
}
        
- (void)test2317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jcirc without a semi-colon");
    }
}
        
- (void)test2318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jcirc; with a semi-colon");
    }
}
        
- (void)test2319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jcy without a semi-colon");
    }
}
        
- (void)test2320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jcy; with a semi-colon");
    }
}
        
- (void)test2321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jfr without a semi-colon");
    }
}
        
- (void)test2322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jfr; with a semi-colon");
    }
}
        
- (void)test2323
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jmath"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jmath"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jmath without a semi-colon");
    }
}
        
- (void)test2324
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"»∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jmath;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jmath; with a semi-colon");
    }
}
        
- (void)test2325
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jopf without a semi-colon");
    }
}
        
- (void)test2326
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jopf; with a semi-colon");
    }
}
        
- (void)test2327
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jscr without a semi-colon");
    }
}
        
- (void)test2328
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùíø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jscr; with a semi-colon");
    }
}
        
- (void)test2329
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jsercy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jsercy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jsercy without a semi-colon");
    }
}
        
- (void)test2330
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jsercy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jsercy; with a semi-colon");
    }
}
        
- (void)test2331
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&jukcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jukcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: jukcy without a semi-colon");
    }
}
        
- (void)test2332
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&jukcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: jukcy; with a semi-colon");
    }
}
        
- (void)test2333
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kappa"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kappa"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kappa without a semi-colon");
    }
}
        
- (void)test2334
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kappa;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kappa; with a semi-colon");
    }
}
        
- (void)test2335
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kappav"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kappav"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kappav without a semi-colon");
    }
}
        
- (void)test2336
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œ∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kappav;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kappav; with a semi-colon");
    }
}
        
- (void)test2337
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kcedil without a semi-colon");
    }
}
        
- (void)test2338
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kcedil; with a semi-colon");
    }
}
        
- (void)test2339
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kcy without a semi-colon");
    }
}
        
- (void)test2340
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kcy; with a semi-colon");
    }
}
        
- (void)test2341
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kfr without a semi-colon");
    }
}
        
- (void)test2342
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kfr; with a semi-colon");
    }
}
        
- (void)test2343
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kgreen"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kgreen"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kgreen without a semi-colon");
    }
}
        
- (void)test2344
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kgreen;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kgreen; with a semi-colon");
    }
}
        
- (void)test2345
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&khcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&khcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: khcy without a semi-colon");
    }
}
        
- (void)test2346
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&khcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: khcy; with a semi-colon");
    }
}
        
- (void)test2347
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kjcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kjcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kjcy without a semi-colon");
    }
}
        
- (void)test2348
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kjcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kjcy; with a semi-colon");
    }
}
        
- (void)test2349
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kopf without a semi-colon");
    }
}
        
- (void)test2350
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kopf; with a semi-colon");
    }
}
        
- (void)test2351
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&kscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: kscr without a semi-colon");
    }
}
        
- (void)test2352
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&kscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: kscr; with a semi-colon");
    }
}
        
- (void)test2353
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lAarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lAarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lAarr without a semi-colon");
    }
}
        
- (void)test2354
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lAarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lAarr; with a semi-colon");
    }
}
        
- (void)test2355
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lArr without a semi-colon");
    }
}
        
- (void)test2356
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lArr; with a semi-colon");
    }
}
        
- (void)test2357
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lAtail"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lAtail"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lAtail without a semi-colon");
    }
}
        
- (void)test2358
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lAtail;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lAtail; with a semi-colon");
    }
}
        
- (void)test2359
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lBarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lBarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lBarr without a semi-colon");
    }
}
        
- (void)test2360
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lBarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lBarr; with a semi-colon");
    }
}
        
- (void)test2361
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lE without a semi-colon");
    }
}
        
- (void)test2362
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lE; with a semi-colon");
    }
}
        
- (void)test2363
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lEg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lEg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lEg without a semi-colon");
    }
}
        
- (void)test2364
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lEg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lEg; with a semi-colon");
    }
}
        
- (void)test2365
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lHar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lHar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lHar without a semi-colon");
    }
}
        
- (void)test2366
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lHar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lHar; with a semi-colon");
    }
}
        
- (void)test2367
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lacute without a semi-colon");
    }
}
        
- (void)test2368
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒ∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lacute; with a semi-colon");
    }
}
        
- (void)test2369
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&laemptyv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&laemptyv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: laemptyv without a semi-colon");
    }
}
        
- (void)test2370
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&laemptyv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: laemptyv; with a semi-colon");
    }
}
        
- (void)test2371
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lagran"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lagran"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lagran without a semi-colon");
    }
}
        
- (void)test2372
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lagran;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lagran; with a semi-colon");
    }
}
        
- (void)test2373
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lambda"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lambda"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lambda without a semi-colon");
    }
}
        
- (void)test2374
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lambda;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lambda; with a semi-colon");
    }
}
        
- (void)test2375
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lang without a semi-colon");
    }
}
        
- (void)test2376
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lang; with a semi-colon");
    }
}
        
- (void)test2377
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&langd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&langd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: langd without a semi-colon");
    }
}
        
- (void)test2378
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&langd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: langd; with a semi-colon");
    }
}
        
- (void)test2379
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&langle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&langle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: langle without a semi-colon");
    }
}
        
- (void)test2380
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&langle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: langle; with a semi-colon");
    }
}
        
- (void)test2381
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lap without a semi-colon");
    }
}
        
- (void)test2382
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lap; with a semi-colon");
    }
}
        
- (void)test2383
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&laquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: laquo without a semi-colon");
    }
}
        
- (void)test2384
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&laquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: laquo; with a semi-colon");
    }
}
        
- (void)test2385
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larr without a semi-colon");
    }
}
        
- (void)test2386
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larr; with a semi-colon");
    }
}
        
- (void)test2387
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrb without a semi-colon");
    }
}
        
- (void)test2388
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚á§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrb; with a semi-colon");
    }
}
        
- (void)test2389
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrbfs"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrbfs"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrbfs without a semi-colon");
    }
}
        
- (void)test2390
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrbfs;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrbfs; with a semi-colon");
    }
}
        
- (void)test2391
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrfs"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrfs"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrfs without a semi-colon");
    }
}
        
- (void)test2392
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrfs;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrfs; with a semi-colon");
    }
}
        
- (void)test2393
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrhk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrhk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrhk without a semi-colon");
    }
}
        
- (void)test2394
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrhk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrhk; with a semi-colon");
    }
}
        
- (void)test2395
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrlp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrlp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrlp without a semi-colon");
    }
}
        
- (void)test2396
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrlp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrlp; with a semi-colon");
    }
}
        
- (void)test2397
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrpl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrpl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrpl without a semi-colon");
    }
}
        
- (void)test2398
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrpl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrpl; with a semi-colon");
    }
}
        
- (void)test2399
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrsim without a semi-colon");
    }
}
        
- (void)test2400
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrsim; with a semi-colon");
    }
}
        
- (void)test2401
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&larrtl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrtl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: larrtl without a semi-colon");
    }
}
        
- (void)test2402
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&larrtl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: larrtl; with a semi-colon");
    }
}
        
- (void)test2403
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lat"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lat"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lat without a semi-colon");
    }
}
        
- (void)test2404
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lat;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lat; with a semi-colon");
    }
}
        
- (void)test2405
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&latail"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&latail"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: latail without a semi-colon");
    }
}
        
- (void)test2406
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&latail;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: latail; with a semi-colon");
    }
}
        
- (void)test2407
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&late"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&late"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: late without a semi-colon");
    }
}
        
- (void)test2408
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&late;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: late; with a semi-colon");
    }
}
        
- (void)test2409
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lates"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lates"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lates without a semi-colon");
    }
}
        
- (void)test2410
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™≠Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lates;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lates; with a semi-colon");
    }
}
        
- (void)test2411
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lbarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lbarr without a semi-colon");
    }
}
        
- (void)test2412
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lbarr; with a semi-colon");
    }
}
        
- (void)test2413
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lbbrk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbbrk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lbbrk without a semi-colon");
    }
}
        
- (void)test2414
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ù≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbbrk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lbbrk; with a semi-colon");
    }
}
        
- (void)test2415
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lbrace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lbrace without a semi-colon");
    }
}
        
- (void)test2416
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lbrace; with a semi-colon");
    }
}
        
- (void)test2417
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lbrack"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrack"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lbrack without a semi-colon");
    }
}
        
- (void)test2418
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"["]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrack;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lbrack; with a semi-colon");
    }
}
        
- (void)test2419
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lbrke"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrke"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lbrke without a semi-colon");
    }
}
        
- (void)test2420
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrke;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lbrke; with a semi-colon");
    }
}
        
- (void)test2421
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lbrksld"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrksld"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lbrksld without a semi-colon");
    }
}
        
- (void)test2422
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrksld;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lbrksld; with a semi-colon");
    }
}
        
- (void)test2423
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lbrkslu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrkslu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lbrkslu without a semi-colon");
    }
}
        
- (void)test2424
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lbrkslu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lbrkslu; with a semi-colon");
    }
}
        
- (void)test2425
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lcaron without a semi-colon");
    }
}
        
- (void)test2426
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lcaron; with a semi-colon");
    }
}
        
- (void)test2427
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lcedil without a semi-colon");
    }
}
        
- (void)test2428
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ƒº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lcedil; with a semi-colon");
    }
}
        
- (void)test2429
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lceil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lceil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lceil without a semi-colon");
    }
}
        
- (void)test2430
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lceil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lceil; with a semi-colon");
    }
}
        
- (void)test2431
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lcub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lcub without a semi-colon");
    }
}
        
- (void)test2432
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lcub; with a semi-colon");
    }
}
        
- (void)test2433
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lcy without a semi-colon");
    }
}
        
- (void)test2434
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lcy; with a semi-colon");
    }
}
        
- (void)test2435
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ldca"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldca"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ldca without a semi-colon");
    }
}
        
- (void)test2436
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldca;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ldca; with a semi-colon");
    }
}
        
- (void)test2437
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ldquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ldquo without a semi-colon");
    }
}
        
- (void)test2438
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ldquo; with a semi-colon");
    }
}
        
- (void)test2439
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ldquor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldquor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ldquor without a semi-colon");
    }
}
        
- (void)test2440
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldquor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ldquor; with a semi-colon");
    }
}
        
- (void)test2441
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ldrdhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldrdhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ldrdhar without a semi-colon");
    }
}
        
- (void)test2442
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldrdhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ldrdhar; with a semi-colon");
    }
}
        
- (void)test2443
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ldrushar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldrushar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ldrushar without a semi-colon");
    }
}
        
- (void)test2444
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldrushar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ldrushar; with a semi-colon");
    }
}
        
- (void)test2445
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ldsh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldsh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ldsh without a semi-colon");
    }
}
        
- (void)test2446
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ldsh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ldsh; with a semi-colon");
    }
}
        
- (void)test2447
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&le"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&le"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: le without a semi-colon");
    }
}
        
- (void)test2448
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&le;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: le; with a semi-colon");
    }
}
        
- (void)test2449
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftarrow without a semi-colon");
    }
}
        
- (void)test2450
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftarrow; with a semi-colon");
    }
}
        
- (void)test2451
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftarrowtail"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftarrowtail"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftarrowtail without a semi-colon");
    }
}
        
- (void)test2452
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftarrowtail;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftarrowtail; with a semi-colon");
    }
}
        
- (void)test2453
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftharpoondown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftharpoondown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftharpoondown without a semi-colon");
    }
}
        
- (void)test2454
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÜΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftharpoondown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftharpoondown; with a semi-colon");
    }
}
        
- (void)test2455
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftharpoonup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftharpoonup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftharpoonup without a semi-colon");
    }
}
        
- (void)test2456
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftharpoonup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftharpoonup; with a semi-colon");
    }
}
        
- (void)test2457
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftleftarrows"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftleftarrows"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftleftarrows without a semi-colon");
    }
}
        
- (void)test2458
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftleftarrows;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftleftarrows; with a semi-colon");
    }
}
        
- (void)test2459
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftrightarrow without a semi-colon");
    }
}
        
- (void)test2460
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftrightarrow; with a semi-colon");
    }
}
        
- (void)test2461
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftrightarrows"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightarrows"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftrightarrows without a semi-colon");
    }
}
        
- (void)test2462
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightarrows;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftrightarrows; with a semi-colon");
    }
}
        
- (void)test2463
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftrightharpoons"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightharpoons"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftrightharpoons without a semi-colon");
    }
}
        
- (void)test2464
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightharpoons;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftrightharpoons; with a semi-colon");
    }
}
        
- (void)test2465
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftrightsquigarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightsquigarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftrightsquigarrow without a semi-colon");
    }
}
        
- (void)test2466
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftrightsquigarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftrightsquigarrow; with a semi-colon");
    }
}
        
- (void)test2467
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leftthreetimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftthreetimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leftthreetimes without a semi-colon");
    }
}
        
- (void)test2468
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leftthreetimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leftthreetimes; with a semi-colon");
    }
}
        
- (void)test2469
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leg without a semi-colon");
    }
}
        
- (void)test2470
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leg; with a semi-colon");
    }
}
        
- (void)test2471
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leq without a semi-colon");
    }
}
        
- (void)test2472
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leq; with a semi-colon");
    }
}
        
- (void)test2473
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leqq without a semi-colon");
    }
}
        
- (void)test2474
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leqq; with a semi-colon");
    }
}
        
- (void)test2475
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&leqslant"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leqslant"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: leqslant without a semi-colon");
    }
}
        
- (void)test2476
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&leqslant;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: leqslant; with a semi-colon");
    }
}
        
- (void)test2477
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&les"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&les"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: les without a semi-colon");
    }
}
        
- (void)test2478
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&les;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: les; with a semi-colon");
    }
}
        
- (void)test2479
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lescc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lescc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lescc without a semi-colon");
    }
}
        
- (void)test2480
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lescc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lescc; with a semi-colon");
    }
}
        
- (void)test2481
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesdot without a semi-colon");
    }
}
        
- (void)test2482
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesdot; with a semi-colon");
    }
}
        
- (void)test2483
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesdoto"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesdoto"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesdoto without a semi-colon");
    }
}
        
- (void)test2484
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesdoto;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesdoto; with a semi-colon");
    }
}
        
- (void)test2485
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesdotor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesdotor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesdotor without a semi-colon");
    }
}
        
- (void)test2486
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesdotor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesdotor; with a semi-colon");
    }
}
        
- (void)test2487
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesg without a semi-colon");
    }
}
        
- (void)test2488
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãöÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesg; with a semi-colon");
    }
}
        
- (void)test2489
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesges"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesges"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesges without a semi-colon");
    }
}
        
- (void)test2490
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesges;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesges; with a semi-colon");
    }
}
        
- (void)test2491
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lessapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lessapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lessapprox without a semi-colon");
    }
}
        
- (void)test2492
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lessapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lessapprox; with a semi-colon");
    }
}
        
- (void)test2493
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lessdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lessdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lessdot without a semi-colon");
    }
}
        
- (void)test2494
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lessdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lessdot; with a semi-colon");
    }
}
        
- (void)test2495
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesseqgtr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesseqgtr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesseqgtr without a semi-colon");
    }
}
        
- (void)test2496
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesseqgtr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesseqgtr; with a semi-colon");
    }
}
        
- (void)test2497
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesseqqgtr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesseqqgtr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesseqqgtr without a semi-colon");
    }
}
        
- (void)test2498
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesseqqgtr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesseqqgtr; with a semi-colon");
    }
}
        
- (void)test2499
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lessgtr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lessgtr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lessgtr without a semi-colon");
    }
}
        
- (void)test2500
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lessgtr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lessgtr; with a semi-colon");
    }
}
        
- (void)test2501
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lesssim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesssim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lesssim without a semi-colon");
    }
}
        
- (void)test2502
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lesssim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lesssim; with a semi-colon");
    }
}
        
- (void)test2503
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lfisht"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lfisht"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lfisht without a semi-colon");
    }
}
        
- (void)test2504
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lfisht;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lfisht; with a semi-colon");
    }
}
        
- (void)test2505
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lfloor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lfloor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lfloor without a semi-colon");
    }
}
        
- (void)test2506
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lfloor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lfloor; with a semi-colon");
    }
}
        
- (void)test2507
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lfr without a semi-colon");
    }
}
        
- (void)test2508
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lfr; with a semi-colon");
    }
}
        
- (void)test2509
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lg without a semi-colon");
    }
}
        
- (void)test2510
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lg; with a semi-colon");
    }
}
        
- (void)test2511
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lgE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lgE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lgE without a semi-colon");
    }
}
        
- (void)test2512
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lgE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lgE; with a semi-colon");
    }
}
        
- (void)test2513
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lhard"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lhard"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lhard without a semi-colon");
    }
}
        
- (void)test2514
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÜΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lhard;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lhard; with a semi-colon");
    }
}
        
- (void)test2515
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lharu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lharu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lharu without a semi-colon");
    }
}
        
- (void)test2516
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lharu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lharu; with a semi-colon");
    }
}
        
- (void)test2517
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lharul"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lharul"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lharul without a semi-colon");
    }
}
        
- (void)test2518
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lharul;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lharul; with a semi-colon");
    }
}
        
- (void)test2519
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lhblk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lhblk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lhblk without a semi-colon");
    }
}
        
- (void)test2520
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lhblk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lhblk; with a semi-colon");
    }
}
        
- (void)test2521
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ljcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ljcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ljcy without a semi-colon");
    }
}
        
- (void)test2522
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ljcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ljcy; with a semi-colon");
    }
}
        
- (void)test2523
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ll"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ll"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ll without a semi-colon");
    }
}
        
- (void)test2524
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ll;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ll; with a semi-colon");
    }
}
        
- (void)test2525
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&llarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&llarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: llarr without a semi-colon");
    }
}
        
- (void)test2526
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&llarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: llarr; with a semi-colon");
    }
}
        
- (void)test2527
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&llcorner"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&llcorner"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: llcorner without a semi-colon");
    }
}
        
- (void)test2528
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&llcorner;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: llcorner; with a semi-colon");
    }
}
        
- (void)test2529
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&llhard"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&llhard"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: llhard without a semi-colon");
    }
}
        
- (void)test2530
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&llhard;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: llhard; with a semi-colon");
    }
}
        
- (void)test2531
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lltri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lltri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lltri without a semi-colon");
    }
}
        
- (void)test2532
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ó∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lltri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lltri; with a semi-colon");
    }
}
        
- (void)test2533
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lmidot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lmidot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lmidot without a semi-colon");
    }
}
        
- (void)test2534
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lmidot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lmidot; with a semi-colon");
    }
}
        
- (void)test2535
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lmoust"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lmoust"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lmoust without a semi-colon");
    }
}
        
- (void)test2536
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚é∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lmoust;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lmoust; with a semi-colon");
    }
}
        
- (void)test2537
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lmoustache"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lmoustache"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lmoustache without a semi-colon");
    }
}
        
- (void)test2538
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚é∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lmoustache;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lmoustache; with a semi-colon");
    }
}
        
- (void)test2539
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lnE without a semi-colon");
    }
}
        
- (void)test2540
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lnE; with a semi-colon");
    }
}
        
- (void)test2541
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lnap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lnap without a semi-colon");
    }
}
        
- (void)test2542
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lnap; with a semi-colon");
    }
}
        
- (void)test2543
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lnapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lnapprox without a semi-colon");
    }
}
        
- (void)test2544
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lnapprox; with a semi-colon");
    }
}
        
- (void)test2545
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lne without a semi-colon");
    }
}
        
- (void)test2546
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lne; with a semi-colon");
    }
}
        
- (void)test2547
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lneq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lneq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lneq without a semi-colon");
    }
}
        
- (void)test2548
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lneq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lneq; with a semi-colon");
    }
}
        
- (void)test2549
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lneqq without a semi-colon");
    }
}
        
- (void)test2550
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lneqq; with a semi-colon");
    }
}
        
- (void)test2551
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lnsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lnsim without a semi-colon");
    }
}
        
- (void)test2552
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lnsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lnsim; with a semi-colon");
    }
}
        
- (void)test2553
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&loang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: loang without a semi-colon");
    }
}
        
- (void)test2554
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: loang; with a semi-colon");
    }
}
        
- (void)test2555
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&loarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: loarr without a semi-colon");
    }
}
        
- (void)test2556
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: loarr; with a semi-colon");
    }
}
        
- (void)test2557
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lobrk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lobrk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lobrk without a semi-colon");
    }
}
        
- (void)test2558
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lobrk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lobrk; with a semi-colon");
    }
}
        
- (void)test2559
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&longleftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longleftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: longleftarrow without a semi-colon");
    }
}
        
- (void)test2560
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longleftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: longleftarrow; with a semi-colon");
    }
}
        
- (void)test2561
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&longleftrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longleftrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: longleftrightarrow without a semi-colon");
    }
}
        
- (void)test2562
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longleftrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: longleftrightarrow; with a semi-colon");
    }
}
        
- (void)test2563
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&longmapsto"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longmapsto"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: longmapsto without a semi-colon");
    }
}
        
- (void)test2564
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longmapsto;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: longmapsto; with a semi-colon");
    }
}
        
- (void)test2565
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&longrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: longrightarrow without a semi-colon");
    }
}
        
- (void)test2566
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&longrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: longrightarrow; with a semi-colon");
    }
}
        
- (void)test2567
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&looparrowleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&looparrowleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: looparrowleft without a semi-colon");
    }
}
        
- (void)test2568
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&looparrowleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: looparrowleft; with a semi-colon");
    }
}
        
- (void)test2569
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&looparrowright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&looparrowright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: looparrowright without a semi-colon");
    }
}
        
- (void)test2570
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&looparrowright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: looparrowright; with a semi-colon");
    }
}
        
- (void)test2571
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lopar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lopar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lopar without a semi-colon");
    }
}
        
- (void)test2572
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lopar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lopar; with a semi-colon");
    }
}
        
- (void)test2573
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lopf without a semi-colon");
    }
}
        
- (void)test2574
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lopf; with a semi-colon");
    }
}
        
- (void)test2575
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&loplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: loplus without a semi-colon");
    }
}
        
- (void)test2576
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: loplus; with a semi-colon");
    }
}
        
- (void)test2577
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lotimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lotimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lotimes without a semi-colon");
    }
}
        
- (void)test2578
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lotimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lotimes; with a semi-colon");
    }
}
        
- (void)test2579
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lowast"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lowast"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lowast without a semi-colon");
    }
}
        
- (void)test2580
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lowast;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lowast; with a semi-colon");
    }
}
        
- (void)test2581
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lowbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lowbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lowbar without a semi-colon");
    }
}
        
- (void)test2582
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"_"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lowbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lowbar; with a semi-colon");
    }
}
        
- (void)test2583
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&loz"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loz"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: loz without a semi-colon");
    }
}
        
- (void)test2584
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&loz;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: loz; with a semi-colon");
    }
}
        
- (void)test2585
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lozenge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lozenge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lozenge without a semi-colon");
    }
}
        
- (void)test2586
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lozenge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lozenge; with a semi-colon");
    }
}
        
- (void)test2587
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lozf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lozf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lozf without a semi-colon");
    }
}
        
- (void)test2588
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ß´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lozf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lozf; with a semi-colon");
    }
}
        
- (void)test2589
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lpar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lpar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lpar without a semi-colon");
    }
}
        
- (void)test2590
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"("]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lpar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lpar; with a semi-colon");
    }
}
        
- (void)test2591
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lparlt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lparlt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lparlt without a semi-colon");
    }
}
        
- (void)test2592
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lparlt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lparlt; with a semi-colon");
    }
}
        
- (void)test2593
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lrarr without a semi-colon");
    }
}
        
- (void)test2594
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lrarr; with a semi-colon");
    }
}
        
- (void)test2595
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lrcorner"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrcorner"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lrcorner without a semi-colon");
    }
}
        
- (void)test2596
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrcorner;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lrcorner; with a semi-colon");
    }
}
        
- (void)test2597
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lrhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lrhar without a semi-colon");
    }
}
        
- (void)test2598
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lrhar; with a semi-colon");
    }
}
        
- (void)test2599
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lrhard"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrhard"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lrhard without a semi-colon");
    }
}
        
- (void)test2600
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrhard;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lrhard; with a semi-colon");
    }
}
        
- (void)test2601
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lrm"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrm"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lrm without a semi-colon");
    }
}
        
- (void)test2602
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrm;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lrm; with a semi-colon");
    }
}
        
- (void)test2603
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lrtri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrtri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lrtri without a semi-colon");
    }
}
        
- (void)test2604
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lrtri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lrtri; with a semi-colon");
    }
}
        
- (void)test2605
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsaquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsaquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsaquo without a semi-colon");
    }
}
        
- (void)test2606
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsaquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsaquo; with a semi-colon");
    }
}
        
- (void)test2607
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lscr without a semi-colon");
    }
}
        
- (void)test2608
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lscr; with a semi-colon");
    }
}
        
- (void)test2609
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsh without a semi-colon");
    }
}
        
- (void)test2610
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsh; with a semi-colon");
    }
}
        
- (void)test2611
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsim without a semi-colon");
    }
}
        
- (void)test2612
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsim; with a semi-colon");
    }
}
        
- (void)test2613
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsime without a semi-colon");
    }
}
        
- (void)test2614
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsime; with a semi-colon");
    }
}
        
- (void)test2615
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsimg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsimg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsimg without a semi-colon");
    }
}
        
- (void)test2616
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsimg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsimg; with a semi-colon");
    }
}
        
- (void)test2617
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsqb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsqb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsqb without a semi-colon");
    }
}
        
- (void)test2618
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"["]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsqb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsqb; with a semi-colon");
    }
}
        
- (void)test2619
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsquo without a semi-colon");
    }
}
        
- (void)test2620
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsquo; with a semi-colon");
    }
}
        
- (void)test2621
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lsquor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsquor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lsquor without a semi-colon");
    }
}
        
- (void)test2622
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lsquor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lsquor; with a semi-colon");
    }
}
        
- (void)test2623
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lstrok without a semi-colon");
    }
}
        
- (void)test2624
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lstrok; with a semi-colon");
    }
}
        
- (void)test2625
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lt without a semi-colon");
    }
}
        
- (void)test2626
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lt; with a semi-colon");
    }
}
        
- (void)test2627
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltcc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltcc; with a semi-colon");
    }
}
        
- (void)test2628
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltcir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltcir; with a semi-colon");
    }
}
        
- (void)test2629
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltdot; with a semi-colon");
    }
}
        
- (void)test2630
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lthree;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lthree; with a semi-colon");
    }
}
        
- (void)test2631
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltimes; with a semi-colon");
    }
}
        
- (void)test2632
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltlarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltlarr; with a semi-colon");
    }
}
        
- (void)test2633
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltquest;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltquest; with a semi-colon");
    }
}
        
- (void)test2634
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltrPar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltrPar; with a semi-colon");
    }
}
        
- (void)test2635
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltri; with a semi-colon");
    }
}
        
- (void)test2636
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltrie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltrie; with a semi-colon");
    }
}
        
- (void)test2637
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ltrif;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ltrif; with a semi-colon");
    }
}
        
- (void)test2638
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lurdshar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lurdshar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lurdshar without a semi-colon");
    }
}
        
- (void)test2639
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lurdshar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lurdshar; with a semi-colon");
    }
}
        
- (void)test2640
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&luruhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&luruhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: luruhar without a semi-colon");
    }
}
        
- (void)test2641
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&luruhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: luruhar; with a semi-colon");
    }
}
        
- (void)test2642
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lvertneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lvertneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lvertneqq without a semi-colon");
    }
}
        
- (void)test2643
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â®Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lvertneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lvertneqq; with a semi-colon");
    }
}
        
- (void)test2644
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&lvnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lvnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: lvnE without a semi-colon");
    }
}
        
- (void)test2645
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â®Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&lvnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: lvnE; with a semi-colon");
    }
}
        
- (void)test2646
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mDDot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mDDot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mDDot without a semi-colon");
    }
}
        
- (void)test2647
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mDDot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mDDot; with a semi-colon");
    }
}
        
- (void)test2648
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&macr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: macr without a semi-colon");
    }
}
        
- (void)test2649
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&macr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: macr; with a semi-colon");
    }
}
        
- (void)test2650
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&male"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&male"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: male without a semi-colon");
    }
}
        
- (void)test2651
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ôÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&male;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: male; with a semi-colon");
    }
}
        
- (void)test2652
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&malt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&malt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: malt without a semi-colon");
    }
}
        
- (void)test2653
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ú†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&malt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: malt; with a semi-colon");
    }
}
        
- (void)test2654
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&maltese"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&maltese"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: maltese without a semi-colon");
    }
}
        
- (void)test2655
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ú†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&maltese;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: maltese; with a semi-colon");
    }
}
        
- (void)test2656
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&map"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&map"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: map without a semi-colon");
    }
}
        
- (void)test2657
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&map;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: map; with a semi-colon");
    }
}
        
- (void)test2658
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mapsto"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapsto"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mapsto without a semi-colon");
    }
}
        
- (void)test2659
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapsto;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mapsto; with a semi-colon");
    }
}
        
- (void)test2660
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mapstodown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapstodown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mapstodown without a semi-colon");
    }
}
        
- (void)test2661
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapstodown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mapstodown; with a semi-colon");
    }
}
        
- (void)test2662
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mapstoleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapstoleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mapstoleft without a semi-colon");
    }
}
        
- (void)test2663
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapstoleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mapstoleft; with a semi-colon");
    }
}
        
- (void)test2664
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mapstoup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapstoup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mapstoup without a semi-colon");
    }
}
        
- (void)test2665
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mapstoup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mapstoup; with a semi-colon");
    }
}
        
- (void)test2666
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&marker"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&marker"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: marker without a semi-colon");
    }
}
        
- (void)test2667
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&marker;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: marker; with a semi-colon");
    }
}
        
- (void)test2668
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mcomma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mcomma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mcomma without a semi-colon");
    }
}
        
- (void)test2669
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mcomma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mcomma; with a semi-colon");
    }
}
        
- (void)test2670
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mcy without a semi-colon");
    }
}
        
- (void)test2671
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mcy; with a semi-colon");
    }
}
        
- (void)test2672
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mdash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mdash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mdash without a semi-colon");
    }
}
        
- (void)test2673
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mdash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mdash; with a semi-colon");
    }
}
        
- (void)test2674
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&measuredangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&measuredangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: measuredangle without a semi-colon");
    }
}
        
- (void)test2675
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&measuredangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: measuredangle; with a semi-colon");
    }
}
        
- (void)test2676
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mfr without a semi-colon");
    }
}
        
- (void)test2677
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mfr; with a semi-colon");
    }
}
        
- (void)test2678
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mho"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mho"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mho without a semi-colon");
    }
}
        
- (void)test2679
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mho;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mho; with a semi-colon");
    }
}
        
- (void)test2680
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&micro"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: micro without a semi-colon");
    }
}
        
- (void)test2681
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&micro;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: micro; with a semi-colon");
    }
}
        
- (void)test2682
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mid without a semi-colon");
    }
}
        
- (void)test2683
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mid; with a semi-colon");
    }
}
        
- (void)test2684
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&midast"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&midast"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: midast without a semi-colon");
    }
}
        
- (void)test2685
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"*"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&midast;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: midast; with a semi-colon");
    }
}
        
- (void)test2686
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&midcir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&midcir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: midcir without a semi-colon");
    }
}
        
- (void)test2687
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&midcir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: midcir; with a semi-colon");
    }
}
        
- (void)test2688
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&middot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: middot without a semi-colon");
    }
}
        
- (void)test2689
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&middot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: middot; with a semi-colon");
    }
}
        
- (void)test2690
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&minus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: minus without a semi-colon");
    }
}
        
- (void)test2691
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: minus; with a semi-colon");
    }
}
        
- (void)test2692
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&minusb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minusb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: minusb without a semi-colon");
    }
}
        
- (void)test2693
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minusb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: minusb; with a semi-colon");
    }
}
        
- (void)test2694
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&minusd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minusd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: minusd without a semi-colon");
    }
}
        
- (void)test2695
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minusd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: minusd; with a semi-colon");
    }
}
        
- (void)test2696
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&minusdu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minusdu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: minusdu without a semi-colon");
    }
}
        
- (void)test2697
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&minusdu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: minusdu; with a semi-colon");
    }
}
        
- (void)test2698
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mlcp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mlcp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mlcp without a semi-colon");
    }
}
        
- (void)test2699
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mlcp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mlcp; with a semi-colon");
    }
}
        
- (void)test2700
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mldr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mldr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mldr without a semi-colon");
    }
}
        
- (void)test2701
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mldr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mldr; with a semi-colon");
    }
}
        
- (void)test2702
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mnplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mnplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mnplus without a semi-colon");
    }
}
        
- (void)test2703
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mnplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mnplus; with a semi-colon");
    }
}
        
- (void)test2704
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&models"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&models"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: models without a semi-colon");
    }
}
        
- (void)test2705
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&models;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: models; with a semi-colon");
    }
}
        
- (void)test2706
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mopf without a semi-colon");
    }
}
        
- (void)test2707
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mopf; with a semi-colon");
    }
}
        
- (void)test2708
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mp without a semi-colon");
    }
}
        
- (void)test2709
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mp; with a semi-colon");
    }
}
        
- (void)test2710
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mscr without a semi-colon");
    }
}
        
- (void)test2711
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mscr; with a semi-colon");
    }
}
        
- (void)test2712
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mstpos"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mstpos"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mstpos without a semi-colon");
    }
}
        
- (void)test2713
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mstpos;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mstpos; with a semi-colon");
    }
}
        
- (void)test2714
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mu without a semi-colon");
    }
}
        
- (void)test2715
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mu; with a semi-colon");
    }
}
        
- (void)test2716
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&multimap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&multimap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: multimap without a semi-colon");
    }
}
        
- (void)test2717
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&multimap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: multimap; with a semi-colon");
    }
}
        
- (void)test2718
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&mumap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mumap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: mumap without a semi-colon");
    }
}
        
- (void)test2719
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&mumap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: mumap; with a semi-colon");
    }
}
        
- (void)test2720
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nGg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nGg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nGg without a semi-colon");
    }
}
        
- (void)test2721
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãôÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nGg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nGg; with a semi-colon");
    }
}
        
- (void)test2722
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nGt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nGt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nGt without a semi-colon");
    }
}
        
- (void)test2723
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â´‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nGt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nGt; with a semi-colon");
    }
}
        
- (void)test2724
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nGtv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nGtv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nGtv without a semi-colon");
    }
}
        
- (void)test2725
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â´Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nGtv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nGtv; with a semi-colon");
    }
}
        
- (void)test2726
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nLeftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLeftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nLeftarrow without a semi-colon");
    }
}
        
- (void)test2727
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLeftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nLeftarrow; with a semi-colon");
    }
}
        
- (void)test2728
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nLeftrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLeftrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nLeftrightarrow without a semi-colon");
    }
}
        
- (void)test2729
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLeftrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nLeftrightarrow; with a semi-colon");
    }
}
        
- (void)test2730
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nLl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nLl without a semi-colon");
    }
}
        
- (void)test2731
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãòÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nLl; with a semi-colon");
    }
}
        
- (void)test2732
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nLt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nLt without a semi-colon");
    }
}
        
- (void)test2733
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â™‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nLt; with a semi-colon");
    }
}
        
- (void)test2734
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nLtv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLtv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nLtv without a semi-colon");
    }
}
        
- (void)test2735
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â™Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nLtv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nLtv; with a semi-colon");
    }
}
        
- (void)test2736
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nRightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nRightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nRightarrow without a semi-colon");
    }
}
        
- (void)test2737
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nRightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nRightarrow; with a semi-colon");
    }
}
        
- (void)test2738
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nVDash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nVDash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nVDash without a semi-colon");
    }
}
        
- (void)test2739
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nVDash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nVDash; with a semi-colon");
    }
}
        
- (void)test2740
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nVdash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nVdash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nVdash without a semi-colon");
    }
}
        
- (void)test2741
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nVdash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nVdash; with a semi-colon");
    }
}
        
- (void)test2742
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nabla"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nabla"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nabla without a semi-colon");
    }
}
        
- (void)test2743
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nabla;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nabla; with a semi-colon");
    }
}
        
- (void)test2744
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nacute without a semi-colon");
    }
}
        
- (void)test2745
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nacute; with a semi-colon");
    }
}
        
- (void)test2746
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nang without a semi-colon");
    }
}
        
- (void)test2747
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à†‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nang; with a semi-colon");
    }
}
        
- (void)test2748
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nap without a semi-colon");
    }
}
        
- (void)test2749
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ââ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nap; with a semi-colon");
    }
}
        
- (void)test2750
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&napE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: napE without a semi-colon");
    }
}
        
- (void)test2751
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©∞Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: napE; with a semi-colon");
    }
}
        
- (void)test2752
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&napid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: napid without a semi-colon");
    }
}
        
- (void)test2753
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âãÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: napid; with a semi-colon");
    }
}
        
- (void)test2754
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&napos"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napos"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: napos without a semi-colon");
    }
}
        
- (void)test2755
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napos;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: napos; with a semi-colon");
    }
}
        
- (void)test2756
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&napprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: napprox without a semi-colon");
    }
}
        
- (void)test2757
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ââ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&napprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: napprox; with a semi-colon");
    }
}
        
- (void)test2758
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&natur"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&natur"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: natur without a semi-colon");
    }
}
        
- (void)test2759
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ôÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&natur;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: natur; with a semi-colon");
    }
}
        
- (void)test2760
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&natural"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&natural"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: natural without a semi-colon");
    }
}
        
- (void)test2761
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ôÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&natural;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: natural; with a semi-colon");
    }
}
        
- (void)test2762
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&naturals"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&naturals"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: naturals without a semi-colon");
    }
}
        
- (void)test2763
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&naturals;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: naturals; with a semi-colon");
    }
}
        
- (void)test2764
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nbsp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nbsp without a semi-colon");
    }
}
        
- (void)test2765
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nbsp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nbsp; with a semi-colon");
    }
}
        
- (void)test2766
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nbump"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nbump"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nbump without a semi-colon");
    }
}
        
- (void)test2767
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âéÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nbump;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nbump; with a semi-colon");
    }
}
        
- (void)test2768
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nbumpe"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nbumpe"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nbumpe without a semi-colon");
    }
}
        
- (void)test2769
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âèÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nbumpe;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nbumpe; with a semi-colon");
    }
}
        
- (void)test2770
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ncap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ncap without a semi-colon");
    }
}
        
- (void)test2771
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ncap; with a semi-colon");
    }
}
        
- (void)test2772
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ncaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ncaron without a semi-colon");
    }
}
        
- (void)test2773
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ncaron; with a semi-colon");
    }
}
        
- (void)test2774
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ncedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ncedil without a semi-colon");
    }
}
        
- (void)test2775
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ncedil; with a semi-colon");
    }
}
        
- (void)test2776
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ncong"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncong"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ncong without a semi-colon");
    }
}
        
- (void)test2777
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncong;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ncong; with a semi-colon");
    }
}
        
- (void)test2778
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ncongdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncongdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ncongdot without a semi-colon");
    }
}
        
- (void)test2779
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©≠Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncongdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ncongdot; with a semi-colon");
    }
}
        
- (void)test2780
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ncup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ncup without a semi-colon");
    }
}
        
- (void)test2781
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ncup; with a semi-colon");
    }
}
        
- (void)test2782
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ncy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ncy without a semi-colon");
    }
}
        
- (void)test2783
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ncy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ncy; with a semi-colon");
    }
}
        
- (void)test2784
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ndash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ndash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ndash without a semi-colon");
    }
}
        
- (void)test2785
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ndash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ndash; with a semi-colon");
    }
}
        
- (void)test2786
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ne without a semi-colon");
    }
}
        
- (void)test2787
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ne; with a semi-colon");
    }
}
        
- (void)test2788
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&neArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&neArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: neArr without a semi-colon");
    }
}
        
- (void)test2789
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&neArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: neArr; with a semi-colon");
    }
}
        
- (void)test2790
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nearhk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nearhk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nearhk without a semi-colon");
    }
}
        
- (void)test2791
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nearhk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nearhk; with a semi-colon");
    }
}
        
- (void)test2792
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nearr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nearr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nearr without a semi-colon");
    }
}
        
- (void)test2793
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nearr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nearr; with a semi-colon");
    }
}
        
- (void)test2794
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nearrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nearrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nearrow without a semi-colon");
    }
}
        
- (void)test2795
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nearrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nearrow; with a semi-colon");
    }
}
        
- (void)test2796
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nedot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nedot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nedot without a semi-colon");
    }
}
        
- (void)test2797
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âêÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nedot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nedot; with a semi-colon");
    }
}
        
- (void)test2798
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nequiv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nequiv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nequiv without a semi-colon");
    }
}
        
- (void)test2799
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nequiv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nequiv; with a semi-colon");
    }
}
        
- (void)test2800
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nesear"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nesear"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nesear without a semi-colon");
    }
}
        
- (void)test2801
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nesear;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nesear; with a semi-colon");
    }
}
        
- (void)test2802
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nesim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nesim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nesim without a semi-colon");
    }
}
        
- (void)test2803
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÇÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nesim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nesim; with a semi-colon");
    }
}
        
- (void)test2804
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nexist"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nexist"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nexist without a semi-colon");
    }
}
        
- (void)test2805
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nexist;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nexist; with a semi-colon");
    }
}
        
- (void)test2806
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nexists"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nexists"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nexists without a semi-colon");
    }
}
        
- (void)test2807
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nexists;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nexists; with a semi-colon");
    }
}
        
- (void)test2808
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nfr without a semi-colon");
    }
}
        
- (void)test2809
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nfr; with a semi-colon");
    }
}
        
- (void)test2810
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ngE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ngE without a semi-colon");
    }
}
        
- (void)test2811
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âßÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ngE; with a semi-colon");
    }
}
        
- (void)test2812
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nge without a semi-colon");
    }
}
        
- (void)test2813
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nge; with a semi-colon");
    }
}
        
- (void)test2814
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ngeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ngeq without a semi-colon");
    }
}
        
- (void)test2815
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ngeq; with a semi-colon");
    }
}
        
- (void)test2816
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ngeqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngeqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ngeqq without a semi-colon");
    }
}
        
- (void)test2817
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âßÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngeqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ngeqq; with a semi-colon");
    }
}
        
- (void)test2818
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ngeqslant"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngeqslant"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ngeqslant without a semi-colon");
    }
}
        
- (void)test2819
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©æÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngeqslant;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ngeqslant; with a semi-colon");
    }
}
        
- (void)test2820
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nges"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nges"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nges without a semi-colon");
    }
}
        
- (void)test2821
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©æÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nges;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nges; with a semi-colon");
    }
}
        
- (void)test2822
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ngsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ngsim without a semi-colon");
    }
}
        
- (void)test2823
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ngsim; with a semi-colon");
    }
}
        
- (void)test2824
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ngt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ngt without a semi-colon");
    }
}
        
- (void)test2825
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ngt; with a semi-colon");
    }
}
        
- (void)test2826
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ngtr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngtr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ngtr without a semi-colon");
    }
}
        
- (void)test2827
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ngtr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ngtr; with a semi-colon");
    }
}
        
- (void)test2828
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nhArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nhArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nhArr without a semi-colon");
    }
}
        
- (void)test2829
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nhArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nhArr; with a semi-colon");
    }
}
        
- (void)test2830
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nharr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nharr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nharr without a semi-colon");
    }
}
        
- (void)test2831
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÜÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nharr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nharr; with a semi-colon");
    }
}
        
- (void)test2832
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nhpar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nhpar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nhpar without a semi-colon");
    }
}
        
- (void)test2833
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nhpar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nhpar; with a semi-colon");
    }
}
        
- (void)test2834
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ni"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ni"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ni without a semi-colon");
    }
}
        
- (void)test2835
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ni;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ni; with a semi-colon");
    }
}
        
- (void)test2836
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nis"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nis"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nis without a semi-colon");
    }
}
        
- (void)test2837
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nis;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nis; with a semi-colon");
    }
}
        
- (void)test2838
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nisd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nisd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nisd without a semi-colon");
    }
}
        
- (void)test2839
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nisd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nisd; with a semi-colon");
    }
}
        
- (void)test2840
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&niv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&niv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: niv without a semi-colon");
    }
}
        
- (void)test2841
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&niv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: niv; with a semi-colon");
    }
}
        
- (void)test2842
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&njcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&njcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: njcy without a semi-colon");
    }
}
        
- (void)test2843
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&njcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: njcy; with a semi-colon");
    }
}
        
- (void)test2844
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nlArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nlArr without a semi-colon");
    }
}
        
- (void)test2845
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nlArr; with a semi-colon");
    }
}
        
- (void)test2846
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nlE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nlE without a semi-colon");
    }
}
        
- (void)test2847
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¶Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nlE; with a semi-colon");
    }
}
        
- (void)test2848
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nlarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nlarr without a semi-colon");
    }
}
        
- (void)test2849
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nlarr; with a semi-colon");
    }
}
        
- (void)test2850
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nldr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nldr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nldr without a semi-colon");
    }
}
        
- (void)test2851
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nldr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nldr; with a semi-colon");
    }
}
        
- (void)test2852
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nle without a semi-colon");
    }
}
        
- (void)test2853
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nle; with a semi-colon");
    }
}
        
- (void)test2854
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nleftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nleftarrow without a semi-colon");
    }
}
        
- (void)test2855
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nleftarrow; with a semi-colon");
    }
}
        
- (void)test2856
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nleftrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleftrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nleftrightarrow without a semi-colon");
    }
}
        
- (void)test2857
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÜÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleftrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nleftrightarrow; with a semi-colon");
    }
}
        
- (void)test2858
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nleq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nleq without a semi-colon");
    }
}
        
- (void)test2859
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nleq; with a semi-colon");
    }
}
        
- (void)test2860
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nleqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nleqq without a semi-colon");
    }
}
        
- (void)test2861
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¶Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nleqq; with a semi-colon");
    }
}
        
- (void)test2862
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nleqslant"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleqslant"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nleqslant without a semi-colon");
    }
}
        
- (void)test2863
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ΩÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nleqslant;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nleqslant; with a semi-colon");
    }
}
        
- (void)test2864
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nles"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nles"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nles without a semi-colon");
    }
}
        
- (void)test2865
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ΩÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nles;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nles; with a semi-colon");
    }
}
        
- (void)test2866
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nless"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nless"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nless without a semi-colon");
    }
}
        
- (void)test2867
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nless;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nless; with a semi-colon");
    }
}
        
- (void)test2868
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nlsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nlsim without a semi-colon");
    }
}
        
- (void)test2869
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nlsim; with a semi-colon");
    }
}
        
- (void)test2870
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nlt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nlt without a semi-colon");
    }
}
        
- (void)test2871
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nlt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nlt; with a semi-colon");
    }
}
        
- (void)test2872
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nltri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nltri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nltri without a semi-colon");
    }
}
        
- (void)test2873
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nltri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nltri; with a semi-colon");
    }
}
        
- (void)test2874
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nltrie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nltrie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nltrie without a semi-colon");
    }
}
        
- (void)test2875
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nltrie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nltrie; with a semi-colon");
    }
}
        
- (void)test2876
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nmid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nmid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nmid without a semi-colon");
    }
}
        
- (void)test2877
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nmid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nmid; with a semi-colon");
    }
}
        
- (void)test2878
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nopf without a semi-colon");
    }
}
        
- (void)test2879
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nopf; with a semi-colon");
    }
}
        
- (void)test2880
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&not"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: not without a semi-colon");
    }
}
        
- (void)test2881
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&not;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: not; with a semi-colon");
    }
}
        
- (void)test2882
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notin;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notin; with a semi-colon");
    }
}
        
- (void)test2883
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãπÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notinE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notinE; with a semi-colon");
    }
}
        
- (void)test2884
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãµÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notindot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notindot; with a semi-colon");
    }
}
        
- (void)test2885
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notinva;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notinva; with a semi-colon");
    }
}
        
- (void)test2886
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notinvb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notinvb; with a semi-colon");
    }
}
        
- (void)test2887
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notinvc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notinvc; with a semi-colon");
    }
}
        
- (void)test2888
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notni;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notni; with a semi-colon");
    }
}
        
- (void)test2889
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notniva;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notniva; with a semi-colon");
    }
}
        
- (void)test2890
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notnivb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notnivb; with a semi-colon");
    }
}
        
- (void)test2891
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&notnivc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: notnivc; with a semi-colon");
    }
}
        
- (void)test2892
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&npar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: npar without a semi-colon");
    }
}
        
- (void)test2893
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: npar; with a semi-colon");
    }
}
        
- (void)test2894
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nparallel"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nparallel"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nparallel without a semi-colon");
    }
}
        
- (void)test2895
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nparallel;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nparallel; with a semi-colon");
    }
}
        
- (void)test2896
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nparsl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nparsl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nparsl without a semi-colon");
    }
}
        
- (void)test2897
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ω‚É•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nparsl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nparsl; with a semi-colon");
    }
}
        
- (void)test2898
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&npart"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npart"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: npart without a semi-colon");
    }
}
        
- (void)test2899
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÇÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npart;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: npart; with a semi-colon");
    }
}
        
- (void)test2900
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&npolint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npolint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: npolint without a semi-colon");
    }
}
        
- (void)test2901
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npolint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: npolint; with a semi-colon");
    }
}
        
- (void)test2902
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&npr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: npr without a semi-colon");
    }
}
        
- (void)test2903
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: npr; with a semi-colon");
    }
}
        
- (void)test2904
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nprcue"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nprcue"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nprcue without a semi-colon");
    }
}
        
- (void)test2905
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nprcue;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nprcue; with a semi-colon");
    }
}
        
- (void)test2906
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&npre"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npre"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: npre without a semi-colon");
    }
}
        
- (void)test2907
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ØÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npre;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: npre; with a semi-colon");
    }
}
        
- (void)test2908
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nprec"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nprec"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nprec without a semi-colon");
    }
}
        
- (void)test2909
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nprec;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nprec; with a semi-colon");
    }
}
        
- (void)test2910
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&npreceq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npreceq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: npreceq without a semi-colon");
    }
}
        
- (void)test2911
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ØÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&npreceq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: npreceq; with a semi-colon");
    }
}
        
- (void)test2912
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nrArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nrArr without a semi-colon");
    }
}
        
- (void)test2913
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nrArr; with a semi-colon");
    }
}
        
- (void)test2914
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nrarr without a semi-colon");
    }
}
        
- (void)test2915
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nrarr; with a semi-colon");
    }
}
        
- (void)test2916
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nrarrc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrarrc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nrarrc without a semi-colon");
    }
}
        
- (void)test2917
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§≥Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrarrc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nrarrc; with a semi-colon");
    }
}
        
- (void)test2918
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nrarrw"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrarrw"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nrarrw without a semi-colon");
    }
}
        
- (void)test2919
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ÜùÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrarrw;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nrarrw; with a semi-colon");
    }
}
        
- (void)test2920
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nrightarrow without a semi-colon");
    }
}
        
- (void)test2921
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nrightarrow; with a semi-colon");
    }
}
        
- (void)test2922
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nrtri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrtri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nrtri without a semi-colon");
    }
}
        
- (void)test2923
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrtri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nrtri; with a semi-colon");
    }
}
        
- (void)test2924
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nrtrie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrtrie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nrtrie without a semi-colon");
    }
}
        
- (void)test2925
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nrtrie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nrtrie; with a semi-colon");
    }
}
        
- (void)test2926
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsc without a semi-colon");
    }
}
        
- (void)test2927
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsc; with a semi-colon");
    }
}
        
- (void)test2928
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsccue"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsccue"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsccue without a semi-colon");
    }
}
        
- (void)test2929
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsccue;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsccue; with a semi-colon");
    }
}
        
- (void)test2930
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsce"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsce"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsce without a semi-colon");
    }
}
        
- (void)test2931
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∞Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsce;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsce; with a semi-colon");
    }
}
        
- (void)test2932
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nscr without a semi-colon");
    }
}
        
- (void)test2933
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nscr; with a semi-colon");
    }
}
        
- (void)test2934
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nshortmid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nshortmid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nshortmid without a semi-colon");
    }
}
        
- (void)test2935
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nshortmid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nshortmid; with a semi-colon");
    }
}
        
- (void)test2936
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nshortparallel"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nshortparallel"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nshortparallel without a semi-colon");
    }
}
        
- (void)test2937
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nshortparallel;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nshortparallel; with a semi-colon");
    }
}
        
- (void)test2938
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsim without a semi-colon");
    }
}
        
- (void)test2939
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsim; with a semi-colon");
    }
}
        
- (void)test2940
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsime without a semi-colon");
    }
}
        
- (void)test2941
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsime; with a semi-colon");
    }
}
        
- (void)test2942
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsimeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsimeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsimeq without a semi-colon");
    }
}
        
- (void)test2943
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsimeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsimeq; with a semi-colon");
    }
}
        
- (void)test2944
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsmid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsmid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsmid without a semi-colon");
    }
}
        
- (void)test2945
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsmid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsmid; with a semi-colon");
    }
}
        
- (void)test2946
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nspar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nspar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nspar without a semi-colon");
    }
}
        
- (void)test2947
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nspar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nspar; with a semi-colon");
    }
}
        
- (void)test2948
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsqsube"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsqsube"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsqsube without a semi-colon");
    }
}
        
- (void)test2949
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsqsube;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsqsube; with a semi-colon");
    }
}
        
- (void)test2950
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsqsupe"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsqsupe"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsqsupe without a semi-colon");
    }
}
        
- (void)test2951
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsqsupe;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsqsupe; with a semi-colon");
    }
}
        
- (void)test2952
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsub without a semi-colon");
    }
}
        
- (void)test2953
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsub; with a semi-colon");
    }
}
        
- (void)test2954
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsubE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsubE without a semi-colon");
    }
}
        
- (void)test2955
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ÖÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsubE; with a semi-colon");
    }
}
        
- (void)test2956
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsube"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsube"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsube without a semi-colon");
    }
}
        
- (void)test2957
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsube;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsube; with a semi-colon");
    }
}
        
- (void)test2958
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsubset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsubset without a semi-colon");
    }
}
        
- (void)test2959
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÇ‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsubset; with a semi-colon");
    }
}
        
- (void)test2960
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsubseteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubseteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsubseteq without a semi-colon");
    }
}
        
- (void)test2961
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubseteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsubseteq; with a semi-colon");
    }
}
        
- (void)test2962
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsubseteqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubseteqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsubseteqq without a semi-colon");
    }
}
        
- (void)test2963
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ÖÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsubseteqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsubseteqq; with a semi-colon");
    }
}
        
- (void)test2964
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsucc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsucc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsucc without a semi-colon");
    }
}
        
- (void)test2965
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsucc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsucc; with a semi-colon");
    }
}
        
- (void)test2966
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsucceq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsucceq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsucceq without a semi-colon");
    }
}
        
- (void)test2967
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∞Ã∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsucceq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsucceq; with a semi-colon");
    }
}
        
- (void)test2968
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsup without a semi-colon");
    }
}
        
- (void)test2969
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsup; with a semi-colon");
    }
}
        
- (void)test2970
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsupE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsupE without a semi-colon");
    }
}
        
- (void)test2971
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ÜÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsupE; with a semi-colon");
    }
}
        
- (void)test2972
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsupe"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupe"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsupe without a semi-colon");
    }
}
        
- (void)test2973
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupe;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsupe; with a semi-colon");
    }
}
        
- (void)test2974
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsupset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsupset without a semi-colon");
    }
}
        
- (void)test2975
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÉ‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsupset; with a semi-colon");
    }
}
        
- (void)test2976
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsupseteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupseteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsupseteq without a semi-colon");
    }
}
        
- (void)test2977
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupseteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsupseteq; with a semi-colon");
    }
}
        
- (void)test2978
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nsupseteqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupseteqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nsupseteqq without a semi-colon");
    }
}
        
- (void)test2979
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ÜÃ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nsupseteqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nsupseteqq; with a semi-colon");
    }
}
        
- (void)test2980
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ntgl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntgl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ntgl without a semi-colon");
    }
}
        
- (void)test2981
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntgl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntgl; with a semi-colon");
    }
}
        
- (void)test2982
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntilde without a semi-colon");
    }
}
        
- (void)test2983
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntilde; with a semi-colon");
    }
}
        
- (void)test2984
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ntlg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntlg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ntlg without a semi-colon");
    }
}
        
- (void)test2985
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntlg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntlg; with a semi-colon");
    }
}
        
- (void)test2986
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ntriangleleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntriangleleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ntriangleleft without a semi-colon");
    }
}
        
- (void)test2987
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntriangleleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntriangleleft; with a semi-colon");
    }
}
        
- (void)test2988
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ntrianglelefteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntrianglelefteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ntrianglelefteq without a semi-colon");
    }
}
        
- (void)test2989
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntrianglelefteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntrianglelefteq; with a semi-colon");
    }
}
        
- (void)test2990
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ntriangleright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntriangleright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ntriangleright without a semi-colon");
    }
}
        
- (void)test2991
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntriangleright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntriangleright; with a semi-colon");
    }
}
        
- (void)test2992
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ntrianglerighteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntrianglerighteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ntrianglerighteq without a semi-colon");
    }
}
        
- (void)test2993
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ntrianglerighteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ntrianglerighteq; with a semi-colon");
    }
}
        
- (void)test2994
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nu without a semi-colon");
    }
}
        
- (void)test2995
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ŒΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nu; with a semi-colon");
    }
}
        
- (void)test2996
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&num"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&num"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: num without a semi-colon");
    }
}
        
- (void)test2997
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"#"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&num;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: num; with a semi-colon");
    }
}
        
- (void)test2998
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&numero"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&numero"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: numero without a semi-colon");
    }
}
        
- (void)test2999
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ññ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&numero;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: numero; with a semi-colon");
    }
}
        
- (void)test3000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&numsp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&numsp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: numsp without a semi-colon");
    }
}
        
- (void)test3001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&numsp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: numsp; with a semi-colon");
    }
}
        
- (void)test3002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvDash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvDash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvDash without a semi-colon");
    }
}
        
- (void)test3003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvDash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvDash; with a semi-colon");
    }
}
        
- (void)test3004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvHarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvHarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvHarr without a semi-colon");
    }
}
        
- (void)test3005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvHarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvHarr; with a semi-colon");
    }
}
        
- (void)test3006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvap without a semi-colon");
    }
}
        
- (void)test3007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âç‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvap; with a semi-colon");
    }
}
        
- (void)test3008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvdash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvdash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvdash without a semi-colon");
    }
}
        
- (void)test3009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvdash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvdash; with a semi-colon");
    }
}
        
- (void)test3010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvge without a semi-colon");
    }
}
        
- (void)test3011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â•‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvge; with a semi-colon");
    }
}
        
- (void)test3012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvgt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvgt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvgt without a semi-colon");
    }
}
        
- (void)test3013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @">‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvgt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvgt; with a semi-colon");
    }
}
        
- (void)test3014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvinfin"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvinfin"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvinfin without a semi-colon");
    }
}
        
- (void)test3015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvinfin;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvinfin; with a semi-colon");
    }
}
        
- (void)test3016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvlArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvlArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvlArr without a semi-colon");
    }
}
        
- (void)test3017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvlArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvlArr; with a semi-colon");
    }
}
        
- (void)test3018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvle without a semi-colon");
    }
}
        
- (void)test3019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â§‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvle; with a semi-colon");
    }
}
        
- (void)test3020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvlt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvlt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvlt without a semi-colon");
    }
}
        
- (void)test3021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"<‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvlt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvlt; with a semi-colon");
    }
}
        
- (void)test3022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvltrie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvltrie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvltrie without a semi-colon");
    }
}
        
- (void)test3023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä¥‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvltrie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvltrie; with a semi-colon");
    }
}
        
- (void)test3024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvrArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvrArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvrArr without a semi-colon");
    }
}
        
- (void)test3025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvrArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvrArr; with a semi-colon");
    }
}
        
- (void)test3026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvrtrie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvrtrie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvrtrie without a semi-colon");
    }
}
        
- (void)test3027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äµ‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvrtrie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvrtrie; with a semi-colon");
    }
}
        
- (void)test3028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nvsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nvsim without a semi-colon");
    }
}
        
- (void)test3029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àº‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nvsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nvsim; with a semi-colon");
    }
}
        
- (void)test3030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nwArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nwArr without a semi-colon");
    }
}
        
- (void)test3031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nwArr; with a semi-colon");
    }
}
        
- (void)test3032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nwarhk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwarhk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nwarhk without a semi-colon");
    }
}
        
- (void)test3033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwarhk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nwarhk; with a semi-colon");
    }
}
        
- (void)test3034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nwarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nwarr without a semi-colon");
    }
}
        
- (void)test3035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nwarr; with a semi-colon");
    }
}
        
- (void)test3036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nwarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nwarrow without a semi-colon");
    }
}
        
- (void)test3037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nwarrow; with a semi-colon");
    }
}
        
- (void)test3038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&nwnear"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwnear"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: nwnear without a semi-colon");
    }
}
        
- (void)test3039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&nwnear;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: nwnear; with a semi-colon");
    }
}
        
- (void)test3040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oS"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oS"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oS without a semi-colon");
    }
}
        
- (void)test3041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ìà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oS;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oS; with a semi-colon");
    }
}
        
- (void)test3042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oacute without a semi-colon");
    }
}
        
- (void)test3043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oacute; with a semi-colon");
    }
}
        
- (void)test3044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oast"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oast"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oast without a semi-colon");
    }
}
        
- (void)test3045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oast;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oast; with a semi-colon");
    }
}
        
- (void)test3046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ocir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ocir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ocir without a semi-colon");
    }
}
        
- (void)test3047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ocir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ocir; with a semi-colon");
    }
}
        
- (void)test3048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ocirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ocirc without a semi-colon");
    }
}
        
- (void)test3049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ocirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ocirc; with a semi-colon");
    }
}
        
- (void)test3050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ocy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ocy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ocy without a semi-colon");
    }
}
        
- (void)test3051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ocy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ocy; with a semi-colon");
    }
}
        
- (void)test3052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&odash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: odash without a semi-colon");
    }
}
        
- (void)test3053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: odash; with a semi-colon");
    }
}
        
- (void)test3054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&odblac"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odblac"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: odblac without a semi-colon");
    }
}
        
- (void)test3055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odblac;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: odblac; with a semi-colon");
    }
}
        
- (void)test3056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&odiv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odiv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: odiv without a semi-colon");
    }
}
        
- (void)test3057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odiv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: odiv; with a semi-colon");
    }
}
        
- (void)test3058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&odot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: odot without a semi-colon");
    }
}
        
- (void)test3059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: odot; with a semi-colon");
    }
}
        
- (void)test3060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&odsold"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odsold"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: odsold without a semi-colon");
    }
}
        
- (void)test3061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&odsold;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: odsold; with a semi-colon");
    }
}
        
- (void)test3062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oelig"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oelig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oelig without a semi-colon");
    }
}
        
- (void)test3063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oelig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oelig; with a semi-colon");
    }
}
        
- (void)test3064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ofcir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ofcir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ofcir without a semi-colon");
    }
}
        
- (void)test3065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ofcir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ofcir; with a semi-colon");
    }
}
        
- (void)test3066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ofr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ofr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ofr without a semi-colon");
    }
}
        
- (void)test3067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ofr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ofr; with a semi-colon");
    }
}
        
- (void)test3068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ogon without a semi-colon");
    }
}
        
- (void)test3069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ogon; with a semi-colon");
    }
}
        
- (void)test3070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ograve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ograve without a semi-colon");
    }
}
        
- (void)test3071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ograve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ograve; with a semi-colon");
    }
}
        
- (void)test3072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ogt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ogt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ogt without a semi-colon");
    }
}
        
- (void)test3073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ogt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ogt; with a semi-colon");
    }
}
        
- (void)test3074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ohbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ohbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ohbar without a semi-colon");
    }
}
        
- (void)test3075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ohbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ohbar; with a semi-colon");
    }
}
        
- (void)test3076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ohm"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ohm"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ohm without a semi-colon");
    }
}
        
- (void)test3077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ohm;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ohm; with a semi-colon");
    }
}
        
- (void)test3078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oint without a semi-colon");
    }
}
        
- (void)test3079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oint; with a semi-colon");
    }
}
        
- (void)test3080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&olarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: olarr without a semi-colon");
    }
}
        
- (void)test3081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: olarr; with a semi-colon");
    }
}
        
- (void)test3082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&olcir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olcir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: olcir without a semi-colon");
    }
}
        
- (void)test3083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olcir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: olcir; with a semi-colon");
    }
}
        
- (void)test3084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&olcross"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olcross"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: olcross without a semi-colon");
    }
}
        
- (void)test3085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olcross;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: olcross; with a semi-colon");
    }
}
        
- (void)test3086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oline"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oline"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oline without a semi-colon");
    }
}
        
- (void)test3087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oline;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oline; with a semi-colon");
    }
}
        
- (void)test3088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&olt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: olt without a semi-colon");
    }
}
        
- (void)test3089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&olt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: olt; with a semi-colon");
    }
}
        
- (void)test3090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&omacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: omacr without a semi-colon");
    }
}
        
- (void)test3091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: omacr; with a semi-colon");
    }
}
        
- (void)test3092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&omega"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omega"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: omega without a semi-colon");
    }
}
        
- (void)test3093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omega;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: omega; with a semi-colon");
    }
}
        
- (void)test3094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&omicron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omicron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: omicron without a semi-colon");
    }
}
        
- (void)test3095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omicron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: omicron; with a semi-colon");
    }
}
        
- (void)test3096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&omid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: omid without a semi-colon");
    }
}
        
- (void)test3097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&omid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: omid; with a semi-colon");
    }
}
        
- (void)test3098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ominus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ominus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ominus without a semi-colon");
    }
}
        
- (void)test3099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ominus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ominus; with a semi-colon");
    }
}
        
- (void)test3100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oopf without a semi-colon");
    }
}
        
- (void)test3101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oopf; with a semi-colon");
    }
}
        
- (void)test3102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&opar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&opar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: opar without a semi-colon");
    }
}
        
- (void)test3103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&opar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: opar; with a semi-colon");
    }
}
        
- (void)test3104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&operp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&operp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: operp without a semi-colon");
    }
}
        
- (void)test3105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&operp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: operp; with a semi-colon");
    }
}
        
- (void)test3106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oplus without a semi-colon");
    }
}
        
- (void)test3107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oplus; with a semi-colon");
    }
}
        
- (void)test3108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&or"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&or"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: or without a semi-colon");
    }
}
        
- (void)test3109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&or;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: or; with a semi-colon");
    }
}
        
- (void)test3110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&orarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: orarr without a semi-colon");
    }
}
        
- (void)test3111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: orarr; with a semi-colon");
    }
}
        
- (void)test3112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ord"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ord"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ord without a semi-colon");
    }
}
        
- (void)test3113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ord;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ord; with a semi-colon");
    }
}
        
- (void)test3114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&order"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&order"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: order without a semi-colon");
    }
}
        
- (void)test3115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&order;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: order; with a semi-colon");
    }
}
        
- (void)test3116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&orderof"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orderof"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: orderof without a semi-colon");
    }
}
        
- (void)test3117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orderof;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: orderof; with a semi-colon");
    }
}
        
- (void)test3118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ordf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ordf without a semi-colon");
    }
}
        
- (void)test3119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ordf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ordf; with a semi-colon");
    }
}
        
- (void)test3120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ordm"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ordm without a semi-colon");
    }
}
        
- (void)test3121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ordm;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ordm; with a semi-colon");
    }
}
        
- (void)test3122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&origof"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&origof"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: origof without a semi-colon");
    }
}
        
- (void)test3123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&origof;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: origof; with a semi-colon");
    }
}
        
- (void)test3124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oror"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oror"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oror without a semi-colon");
    }
}
        
- (void)test3125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oror;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oror; with a semi-colon");
    }
}
        
- (void)test3126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&orslope"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orslope"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: orslope without a semi-colon");
    }
}
        
- (void)test3127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orslope;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: orslope; with a semi-colon");
    }
}
        
- (void)test3128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&orv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: orv without a semi-colon");
    }
}
        
- (void)test3129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&orv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: orv; with a semi-colon");
    }
}
        
- (void)test3130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&oscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: oscr without a semi-colon");
    }
}
        
- (void)test3131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oscr; with a semi-colon");
    }
}
        
- (void)test3132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oslash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oslash without a semi-colon");
    }
}
        
- (void)test3133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&oslash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: oslash; with a semi-colon");
    }
}
        
- (void)test3134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&osol"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&osol"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: osol without a semi-colon");
    }
}
        
- (void)test3135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&osol;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: osol; with a semi-colon");
    }
}
        
- (void)test3136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&otilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: otilde without a semi-colon");
    }
}
        
- (void)test3137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&otilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: otilde; with a semi-colon");
    }
}
        
- (void)test3138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&otimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&otimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: otimes without a semi-colon");
    }
}
        
- (void)test3139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&otimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: otimes; with a semi-colon");
    }
}
        
- (void)test3140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&otimesas"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&otimesas"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: otimesas without a semi-colon");
    }
}
        
- (void)test3141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&otimesas;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: otimesas; with a semi-colon");
    }
}
        
- (void)test3142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ouml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ouml without a semi-colon");
    }
}
        
- (void)test3143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ouml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ouml; with a semi-colon");
    }
}
        
- (void)test3144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ovbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ovbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ovbar without a semi-colon");
    }
}
        
- (void)test3145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ovbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ovbar; with a semi-colon");
    }
}
        
- (void)test3146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&par"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&par"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: par without a semi-colon");
    }
}
        
- (void)test3147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&par;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: par; with a semi-colon");
    }
}
        
- (void)test3148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&para"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: para without a semi-colon");
    }
}
        
- (void)test3149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&para;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: para; with a semi-colon");
    }
}
        
- (void)test3150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&parallel;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: parallel; with a semi-colon");
    }
}
        
- (void)test3151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&parsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&parsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: parsim without a semi-colon");
    }
}
        
- (void)test3152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&parsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: parsim; with a semi-colon");
    }
}
        
- (void)test3153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&parsl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&parsl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: parsl without a semi-colon");
    }
}
        
- (void)test3154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&parsl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: parsl; with a semi-colon");
    }
}
        
- (void)test3155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&part"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&part"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: part without a semi-colon");
    }
}
        
- (void)test3156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&part;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: part; with a semi-colon");
    }
}
        
- (void)test3157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pcy without a semi-colon");
    }
}
        
- (void)test3158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pcy; with a semi-colon");
    }
}
        
- (void)test3159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&percnt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&percnt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: percnt without a semi-colon");
    }
}
        
- (void)test3160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"%"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&percnt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: percnt; with a semi-colon");
    }
}
        
- (void)test3161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&period"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&period"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: period without a semi-colon");
    }
}
        
- (void)test3162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&period;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: period; with a semi-colon");
    }
}
        
- (void)test3163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&permil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&permil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: permil without a semi-colon");
    }
}
        
- (void)test3164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&permil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: permil; with a semi-colon");
    }
}
        
- (void)test3165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&perp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&perp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: perp without a semi-colon");
    }
}
        
- (void)test3166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&perp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: perp; with a semi-colon");
    }
}
        
- (void)test3167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pertenk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pertenk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pertenk without a semi-colon");
    }
}
        
- (void)test3168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pertenk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pertenk; with a semi-colon");
    }
}
        
- (void)test3169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pfr without a semi-colon");
    }
}
        
- (void)test3170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pfr; with a semi-colon");
    }
}
        
- (void)test3171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&phi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: phi without a semi-colon");
    }
}
        
- (void)test3172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: phi; with a semi-colon");
    }
}
        
- (void)test3173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&phiv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phiv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: phiv without a semi-colon");
    }
}
        
- (void)test3174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phiv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: phiv; with a semi-colon");
    }
}
        
- (void)test3175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&phmmat"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phmmat"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: phmmat without a semi-colon");
    }
}
        
- (void)test3176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phmmat;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: phmmat; with a semi-colon");
    }
}
        
- (void)test3177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&phone"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phone"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: phone without a semi-colon");
    }
}
        
- (void)test3178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚òé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&phone;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: phone; with a semi-colon");
    }
}
        
- (void)test3179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pi without a semi-colon");
    }
}
        
- (void)test3180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pi; with a semi-colon");
    }
}
        
- (void)test3181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pitchfork"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pitchfork"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pitchfork without a semi-colon");
    }
}
        
- (void)test3182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pitchfork;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pitchfork; with a semi-colon");
    }
}
        
- (void)test3183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&piv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&piv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: piv without a semi-colon");
    }
}
        
- (void)test3184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&piv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: piv; with a semi-colon");
    }
}
        
- (void)test3185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&planck"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&planck"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: planck without a semi-colon");
    }
}
        
- (void)test3186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&planck;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: planck; with a semi-colon");
    }
}
        
- (void)test3187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&planckh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&planckh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: planckh without a semi-colon");
    }
}
        
- (void)test3188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&planckh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: planckh; with a semi-colon");
    }
}
        
- (void)test3189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plankv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plankv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plankv without a semi-colon");
    }
}
        
- (void)test3190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plankv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plankv; with a semi-colon");
    }
}
        
- (void)test3191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plus without a semi-colon");
    }
}
        
- (void)test3192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"+"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plus; with a semi-colon");
    }
}
        
- (void)test3193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plusacir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusacir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plusacir without a semi-colon");
    }
}
        
- (void)test3194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusacir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plusacir; with a semi-colon");
    }
}
        
- (void)test3195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plusb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plusb without a semi-colon");
    }
}
        
- (void)test3196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plusb; with a semi-colon");
    }
}
        
- (void)test3197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pluscir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pluscir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pluscir without a semi-colon");
    }
}
        
- (void)test3198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pluscir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pluscir; with a semi-colon");
    }
}
        
- (void)test3199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plusdo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusdo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plusdo without a semi-colon");
    }
}
        
- (void)test3200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusdo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plusdo; with a semi-colon");
    }
}
        
- (void)test3201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plusdu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusdu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plusdu without a semi-colon");
    }
}
        
- (void)test3202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusdu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plusdu; with a semi-colon");
    }
}
        
- (void)test3203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pluse"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pluse"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pluse without a semi-colon");
    }
}
        
- (void)test3204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pluse;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pluse; with a semi-colon");
    }
}
        
- (void)test3205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusmn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plusmn without a semi-colon");
    }
}
        
- (void)test3206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plusmn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plusmn; with a semi-colon");
    }
}
        
- (void)test3207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plussim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plussim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plussim without a semi-colon");
    }
}
        
- (void)test3208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plussim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plussim; with a semi-colon");
    }
}
        
- (void)test3209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&plustwo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plustwo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: plustwo without a semi-colon");
    }
}
        
- (void)test3210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&plustwo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: plustwo; with a semi-colon");
    }
}
        
- (void)test3211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pm"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pm"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pm without a semi-colon");
    }
}
        
- (void)test3212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pm;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pm; with a semi-colon");
    }
}
        
- (void)test3213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pointint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pointint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pointint without a semi-colon");
    }
}
        
- (void)test3214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pointint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pointint; with a semi-colon");
    }
}
        
- (void)test3215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&popf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&popf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: popf without a semi-colon");
    }
}
        
- (void)test3216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&popf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: popf; with a semi-colon");
    }
}
        
- (void)test3217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pound"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pound without a semi-colon");
    }
}
        
- (void)test3218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pound;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pound; with a semi-colon");
    }
}
        
- (void)test3219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pr without a semi-colon");
    }
}
        
- (void)test3220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pr; with a semi-colon");
    }
}
        
- (void)test3221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prE without a semi-colon");
    }
}
        
- (void)test3222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prE; with a semi-colon");
    }
}
        
- (void)test3223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prap without a semi-colon");
    }
}
        
- (void)test3224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prap; with a semi-colon");
    }
}
        
- (void)test3225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prcue"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prcue"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prcue without a semi-colon");
    }
}
        
- (void)test3226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prcue;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prcue; with a semi-colon");
    }
}
        
- (void)test3227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pre"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pre"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pre without a semi-colon");
    }
}
        
- (void)test3228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pre;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pre; with a semi-colon");
    }
}
        
- (void)test3229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prec"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prec"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prec without a semi-colon");
    }
}
        
- (void)test3230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prec;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prec; with a semi-colon");
    }
}
        
- (void)test3231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&precapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: precapprox without a semi-colon");
    }
}
        
- (void)test3232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: precapprox; with a semi-colon");
    }
}
        
- (void)test3233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&preccurlyeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&preccurlyeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: preccurlyeq without a semi-colon");
    }
}
        
- (void)test3234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&preccurlyeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: preccurlyeq; with a semi-colon");
    }
}
        
- (void)test3235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&preceq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&preceq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: preceq without a semi-colon");
    }
}
        
- (void)test3236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&preceq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: preceq; with a semi-colon");
    }
}
        
- (void)test3237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&precnapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precnapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: precnapprox without a semi-colon");
    }
}
        
- (void)test3238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precnapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: precnapprox; with a semi-colon");
    }
}
        
- (void)test3239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&precneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: precneqq without a semi-colon");
    }
}
        
- (void)test3240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: precneqq; with a semi-colon");
    }
}
        
- (void)test3241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&precnsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precnsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: precnsim without a semi-colon");
    }
}
        
- (void)test3242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precnsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: precnsim; with a semi-colon");
    }
}
        
- (void)test3243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&precsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: precsim without a semi-colon");
    }
}
        
- (void)test3244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&precsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: precsim; with a semi-colon");
    }
}
        
- (void)test3245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prime without a semi-colon");
    }
}
        
- (void)test3246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prime; with a semi-colon");
    }
}
        
- (void)test3247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&primes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&primes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: primes without a semi-colon");
    }
}
        
- (void)test3248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&primes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: primes; with a semi-colon");
    }
}
        
- (void)test3249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prnE without a semi-colon");
    }
}
        
- (void)test3250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prnE; with a semi-colon");
    }
}
        
- (void)test3251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prnap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prnap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prnap without a semi-colon");
    }
}
        
- (void)test3252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prnap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prnap; with a semi-colon");
    }
}
        
- (void)test3253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prnsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prnsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prnsim without a semi-colon");
    }
}
        
- (void)test3254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prnsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prnsim; with a semi-colon");
    }
}
        
- (void)test3255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prod"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prod"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prod without a semi-colon");
    }
}
        
- (void)test3256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prod;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prod; with a semi-colon");
    }
}
        
- (void)test3257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&profalar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&profalar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: profalar without a semi-colon");
    }
}
        
- (void)test3258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&profalar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: profalar; with a semi-colon");
    }
}
        
- (void)test3259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&profline"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&profline"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: profline without a semi-colon");
    }
}
        
- (void)test3260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&profline;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: profline; with a semi-colon");
    }
}
        
- (void)test3261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&profsurf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&profsurf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: profsurf without a semi-colon");
    }
}
        
- (void)test3262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&profsurf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: profsurf; with a semi-colon");
    }
}
        
- (void)test3263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prop"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prop"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prop without a semi-colon");
    }
}
        
- (void)test3264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prop;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prop; with a semi-colon");
    }
}
        
- (void)test3265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&propto"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&propto"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: propto without a semi-colon");
    }
}
        
- (void)test3266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&propto;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: propto; with a semi-colon");
    }
}
        
- (void)test3267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prsim without a semi-colon");
    }
}
        
- (void)test3268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prsim; with a semi-colon");
    }
}
        
- (void)test3269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&prurel"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prurel"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: prurel without a semi-colon");
    }
}
        
- (void)test3270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&prurel;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: prurel; with a semi-colon");
    }
}
        
- (void)test3271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&pscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: pscr without a semi-colon");
    }
}
        
- (void)test3272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&pscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: pscr; with a semi-colon");
    }
}
        
- (void)test3273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&psi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&psi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: psi without a semi-colon");
    }
}
        
- (void)test3274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&psi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: psi; with a semi-colon");
    }
}
        
- (void)test3275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&puncsp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&puncsp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: puncsp without a semi-colon");
    }
}
        
- (void)test3276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&puncsp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: puncsp; with a semi-colon");
    }
}
        
- (void)test3277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&qfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: qfr without a semi-colon");
    }
}
        
- (void)test3278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: qfr; with a semi-colon");
    }
}
        
- (void)test3279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&qint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: qint without a semi-colon");
    }
}
        
- (void)test3280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: qint; with a semi-colon");
    }
}
        
- (void)test3281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&qopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: qopf without a semi-colon");
    }
}
        
- (void)test3282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: qopf; with a semi-colon");
    }
}
        
- (void)test3283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&qprime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qprime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: qprime without a semi-colon");
    }
}
        
- (void)test3284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Åó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qprime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: qprime; with a semi-colon");
    }
}
        
- (void)test3285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&qscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: qscr without a semi-colon");
    }
}
        
- (void)test3286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&qscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: qscr; with a semi-colon");
    }
}
        
- (void)test3287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&quaternions"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quaternions"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: quaternions without a semi-colon");
    }
}
        
- (void)test3288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quaternions;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: quaternions; with a semi-colon");
    }
}
        
- (void)test3289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&quatint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quatint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: quatint without a semi-colon");
    }
}
        
- (void)test3290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quatint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: quatint; with a semi-colon");
    }
}
        
- (void)test3291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&quest"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quest"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: quest without a semi-colon");
    }
}
        
- (void)test3292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quest;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: quest; with a semi-colon");
    }
}
        
- (void)test3293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&questeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&questeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: questeq without a semi-colon");
    }
}
        
- (void)test3294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&questeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: questeq; with a semi-colon");
    }
}
        
- (void)test3295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: quot without a semi-colon");
    }
}
        
- (void)test3296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&quot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: quot; with a semi-colon");
    }
}
        
- (void)test3297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rAarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rAarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rAarr without a semi-colon");
    }
}
        
- (void)test3298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rAarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rAarr; with a semi-colon");
    }
}
        
- (void)test3299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rArr without a semi-colon");
    }
}
        
- (void)test3300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rArr; with a semi-colon");
    }
}
        
- (void)test3301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rAtail"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rAtail"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rAtail without a semi-colon");
    }
}
        
- (void)test3302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rAtail;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rAtail; with a semi-colon");
    }
}
        
- (void)test3303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rBarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rBarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rBarr without a semi-colon");
    }
}
        
- (void)test3304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rBarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rBarr; with a semi-colon");
    }
}
        
- (void)test3305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rHar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rHar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rHar without a semi-colon");
    }
}
        
- (void)test3306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rHar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rHar; with a semi-colon");
    }
}
        
- (void)test3307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&race"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&race"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: race without a semi-colon");
    }
}
        
- (void)test3308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àΩÃ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&race;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: race; with a semi-colon");
    }
}
        
- (void)test3309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&racute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&racute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: racute without a semi-colon");
    }
}
        
- (void)test3310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&racute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: racute; with a semi-colon");
    }
}
        
- (void)test3311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&radic"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&radic"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: radic without a semi-colon");
    }
}
        
- (void)test3312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&radic;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: radic; with a semi-colon");
    }
}
        
- (void)test3313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&raemptyv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&raemptyv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: raemptyv without a semi-colon");
    }
}
        
- (void)test3314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&raemptyv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: raemptyv; with a semi-colon");
    }
}
        
- (void)test3315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rang without a semi-colon");
    }
}
        
- (void)test3316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rang; with a semi-colon");
    }
}
        
- (void)test3317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rangd"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rangd"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rangd without a semi-colon");
    }
}
        
- (void)test3318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rangd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rangd; with a semi-colon");
    }
}
        
- (void)test3319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&range"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&range"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: range without a semi-colon");
    }
}
        
- (void)test3320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&range;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: range; with a semi-colon");
    }
}
        
- (void)test3321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rangle without a semi-colon");
    }
}
        
- (void)test3322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rangle; with a semi-colon");
    }
}
        
- (void)test3323
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&raquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: raquo without a semi-colon");
    }
}
        
- (void)test3324
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&raquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: raquo; with a semi-colon");
    }
}
        
- (void)test3325
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarr without a semi-colon");
    }
}
        
- (void)test3326
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarr; with a semi-colon");
    }
}
        
- (void)test3327
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrap without a semi-colon");
    }
}
        
- (void)test3328
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrap; with a semi-colon");
    }
}
        
- (void)test3329
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrb without a semi-colon");
    }
}
        
- (void)test3330
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚á•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrb; with a semi-colon");
    }
}
        
- (void)test3331
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrbfs"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrbfs"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrbfs without a semi-colon");
    }
}
        
- (void)test3332
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrbfs;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrbfs; with a semi-colon");
    }
}
        
- (void)test3333
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrc without a semi-colon");
    }
}
        
- (void)test3334
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrc; with a semi-colon");
    }
}
        
- (void)test3335
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrfs"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrfs"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrfs without a semi-colon");
    }
}
        
- (void)test3336
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrfs;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrfs; with a semi-colon");
    }
}
        
- (void)test3337
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrhk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrhk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrhk without a semi-colon");
    }
}
        
- (void)test3338
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrhk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrhk; with a semi-colon");
    }
}
        
- (void)test3339
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrlp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrlp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrlp without a semi-colon");
    }
}
        
- (void)test3340
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrlp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrlp; with a semi-colon");
    }
}
        
- (void)test3341
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrpl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrpl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrpl without a semi-colon");
    }
}
        
- (void)test3342
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrpl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrpl; with a semi-colon");
    }
}
        
- (void)test3343
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrsim without a semi-colon");
    }
}
        
- (void)test3344
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrsim; with a semi-colon");
    }
}
        
- (void)test3345
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrtl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrtl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrtl without a semi-colon");
    }
}
        
- (void)test3346
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrtl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrtl; with a semi-colon");
    }
}
        
- (void)test3347
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rarrw"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrw"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rarrw without a semi-colon");
    }
}
        
- (void)test3348
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rarrw;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rarrw; with a semi-colon");
    }
}
        
- (void)test3349
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ratail"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ratail"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ratail without a semi-colon");
    }
}
        
- (void)test3350
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ratail;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ratail; with a semi-colon");
    }
}
        
- (void)test3351
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ratio"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ratio"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ratio without a semi-colon");
    }
}
        
- (void)test3352
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ratio;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ratio; with a semi-colon");
    }
}
        
- (void)test3353
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rationals"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rationals"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rationals without a semi-colon");
    }
}
        
- (void)test3354
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rationals;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rationals; with a semi-colon");
    }
}
        
- (void)test3355
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rbarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rbarr without a semi-colon");
    }
}
        
- (void)test3356
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rbarr; with a semi-colon");
    }
}
        
- (void)test3357
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rbbrk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbbrk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rbbrk without a semi-colon");
    }
}
        
- (void)test3358
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ù≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbbrk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rbbrk; with a semi-colon");
    }
}
        
- (void)test3359
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rbrace"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrace"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rbrace without a semi-colon");
    }
}
        
- (void)test3360
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"}"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrace;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rbrace; with a semi-colon");
    }
}
        
- (void)test3361
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rbrack"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrack"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rbrack without a semi-colon");
    }
}
        
- (void)test3362
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"]"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrack;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rbrack; with a semi-colon");
    }
}
        
- (void)test3363
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rbrke"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrke"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rbrke without a semi-colon");
    }
}
        
- (void)test3364
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrke;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rbrke; with a semi-colon");
    }
}
        
- (void)test3365
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rbrksld"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrksld"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rbrksld without a semi-colon");
    }
}
        
- (void)test3366
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrksld;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rbrksld; with a semi-colon");
    }
}
        
- (void)test3367
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rbrkslu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrkslu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rbrkslu without a semi-colon");
    }
}
        
- (void)test3368
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rbrkslu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rbrkslu; with a semi-colon");
    }
}
        
- (void)test3369
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rcaron without a semi-colon");
    }
}
        
- (void)test3370
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rcaron; with a semi-colon");
    }
}
        
- (void)test3371
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rcedil without a semi-colon");
    }
}
        
- (void)test3372
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rcedil; with a semi-colon");
    }
}
        
- (void)test3373
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rceil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rceil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rceil without a semi-colon");
    }
}
        
- (void)test3374
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rceil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rceil; with a semi-colon");
    }
}
        
- (void)test3375
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rcub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rcub without a semi-colon");
    }
}
        
- (void)test3376
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"}"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rcub; with a semi-colon");
    }
}
        
- (void)test3377
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rcy without a semi-colon");
    }
}
        
- (void)test3378
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rcy; with a semi-colon");
    }
}
        
- (void)test3379
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rdca"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdca"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rdca without a semi-colon");
    }
}
        
- (void)test3380
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdca;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rdca; with a semi-colon");
    }
}
        
- (void)test3381
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rdldhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdldhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rdldhar without a semi-colon");
    }
}
        
- (void)test3382
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdldhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rdldhar; with a semi-colon");
    }
}
        
- (void)test3383
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rdquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rdquo without a semi-colon");
    }
}
        
- (void)test3384
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rdquo; with a semi-colon");
    }
}
        
- (void)test3385
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rdquor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdquor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rdquor without a semi-colon");
    }
}
        
- (void)test3386
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdquor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rdquor; with a semi-colon");
    }
}
        
- (void)test3387
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rdsh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdsh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rdsh without a semi-colon");
    }
}
        
- (void)test3388
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rdsh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rdsh; with a semi-colon");
    }
}
        
- (void)test3389
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&real"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&real"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: real without a semi-colon");
    }
}
        
- (void)test3390
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&real;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: real; with a semi-colon");
    }
}
        
- (void)test3391
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&realine"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&realine"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: realine without a semi-colon");
    }
}
        
- (void)test3392
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&realine;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: realine; with a semi-colon");
    }
}
        
- (void)test3393
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&realpart"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&realpart"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: realpart without a semi-colon");
    }
}
        
- (void)test3394
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&realpart;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: realpart; with a semi-colon");
    }
}
        
- (void)test3395
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&reals"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&reals"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: reals without a semi-colon");
    }
}
        
- (void)test3396
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&reals;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: reals; with a semi-colon");
    }
}
        
- (void)test3397
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rect"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rect"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rect without a semi-colon");
    }
}
        
- (void)test3398
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rect;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rect; with a semi-colon");
    }
}
        
- (void)test3399
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&reg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: reg without a semi-colon");
    }
}
        
- (void)test3400
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&reg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: reg; with a semi-colon");
    }
}
        
- (void)test3401
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rfisht"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rfisht"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rfisht without a semi-colon");
    }
}
        
- (void)test3402
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rfisht;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rfisht; with a semi-colon");
    }
}
        
- (void)test3403
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rfloor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rfloor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rfloor without a semi-colon");
    }
}
        
- (void)test3404
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rfloor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rfloor; with a semi-colon");
    }
}
        
- (void)test3405
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rfr without a semi-colon");
    }
}
        
- (void)test3406
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rfr; with a semi-colon");
    }
}
        
- (void)test3407
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rhard"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rhard"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rhard without a semi-colon");
    }
}
        
- (void)test3408
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rhard;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rhard; with a semi-colon");
    }
}
        
- (void)test3409
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rharu"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rharu"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rharu without a semi-colon");
    }
}
        
- (void)test3410
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rharu;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rharu; with a semi-colon");
    }
}
        
- (void)test3411
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rharul"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rharul"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rharul without a semi-colon");
    }
}
        
- (void)test3412
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rharul;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rharul; with a semi-colon");
    }
}
        
- (void)test3413
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rho"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rho"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rho without a semi-colon");
    }
}
        
- (void)test3414
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rho;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rho; with a semi-colon");
    }
}
        
- (void)test3415
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rhov"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rhov"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rhov without a semi-colon");
    }
}
        
- (void)test3416
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rhov;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rhov; with a semi-colon");
    }
}
        
- (void)test3417
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightarrow without a semi-colon");
    }
}
        
- (void)test3418
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightarrow; with a semi-colon");
    }
}
        
- (void)test3419
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightarrowtail"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightarrowtail"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightarrowtail without a semi-colon");
    }
}
        
- (void)test3420
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightarrowtail;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightarrowtail; with a semi-colon");
    }
}
        
- (void)test3421
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightharpoondown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightharpoondown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightharpoondown without a semi-colon");
    }
}
        
- (void)test3422
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightharpoondown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightharpoondown; with a semi-colon");
    }
}
        
- (void)test3423
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightharpoonup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightharpoonup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightharpoonup without a semi-colon");
    }
}
        
- (void)test3424
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightharpoonup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightharpoonup; with a semi-colon");
    }
}
        
- (void)test3425
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightleftarrows"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightleftarrows"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightleftarrows without a semi-colon");
    }
}
        
- (void)test3426
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightleftarrows;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightleftarrows; with a semi-colon");
    }
}
        
- (void)test3427
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightleftharpoons"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightleftharpoons"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightleftharpoons without a semi-colon");
    }
}
        
- (void)test3428
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightleftharpoons;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightleftharpoons; with a semi-colon");
    }
}
        
- (void)test3429
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightrightarrows"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightrightarrows"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightrightarrows without a semi-colon");
    }
}
        
- (void)test3430
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightrightarrows;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightrightarrows; with a semi-colon");
    }
}
        
- (void)test3431
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightsquigarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightsquigarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightsquigarrow without a semi-colon");
    }
}
        
- (void)test3432
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightsquigarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightsquigarrow; with a semi-colon");
    }
}
        
- (void)test3433
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rightthreetimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightthreetimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rightthreetimes without a semi-colon");
    }
}
        
- (void)test3434
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rightthreetimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rightthreetimes; with a semi-colon");
    }
}
        
- (void)test3435
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ring"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ring"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ring without a semi-colon");
    }
}
        
- (void)test3436
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ring;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ring; with a semi-colon");
    }
}
        
- (void)test3437
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&risingdotseq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&risingdotseq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: risingdotseq without a semi-colon");
    }
}
        
- (void)test3438
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&risingdotseq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: risingdotseq; with a semi-colon");
    }
}
        
- (void)test3439
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rlarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rlarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rlarr without a semi-colon");
    }
}
        
- (void)test3440
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rlarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rlarr; with a semi-colon");
    }
}
        
- (void)test3441
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rlhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rlhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rlhar without a semi-colon");
    }
}
        
- (void)test3442
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rlhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rlhar; with a semi-colon");
    }
}
        
- (void)test3443
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rlm"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rlm"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rlm without a semi-colon");
    }
}
        
- (void)test3444
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rlm;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rlm; with a semi-colon");
    }
}
        
- (void)test3445
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rmoust"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rmoust"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rmoust without a semi-colon");
    }
}
        
- (void)test3446
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚é±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rmoust;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rmoust; with a semi-colon");
    }
}
        
- (void)test3447
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rmoustache"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rmoustache"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rmoustache without a semi-colon");
    }
}
        
- (void)test3448
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚é±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rmoustache;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rmoustache; with a semi-colon");
    }
}
        
- (void)test3449
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rnmid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rnmid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rnmid without a semi-colon");
    }
}
        
- (void)test3450
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rnmid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rnmid; with a semi-colon");
    }
}
        
- (void)test3451
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&roang"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&roang"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: roang without a semi-colon");
    }
}
        
- (void)test3452
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&roang;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: roang; with a semi-colon");
    }
}
        
- (void)test3453
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&roarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&roarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: roarr without a semi-colon");
    }
}
        
- (void)test3454
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&roarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: roarr; with a semi-colon");
    }
}
        
- (void)test3455
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&robrk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&robrk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: robrk without a semi-colon");
    }
}
        
- (void)test3456
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&robrk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: robrk; with a semi-colon");
    }
}
        
- (void)test3457
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ropar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ropar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ropar without a semi-colon");
    }
}
        
- (void)test3458
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ropar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ropar; with a semi-colon");
    }
}
        
- (void)test3459
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ropf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ropf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ropf without a semi-colon");
    }
}
        
- (void)test3460
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ropf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ropf; with a semi-colon");
    }
}
        
- (void)test3461
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&roplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&roplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: roplus without a semi-colon");
    }
}
        
- (void)test3462
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&roplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: roplus; with a semi-colon");
    }
}
        
- (void)test3463
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rotimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rotimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rotimes without a semi-colon");
    }
}
        
- (void)test3464
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rotimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rotimes; with a semi-colon");
    }
}
        
- (void)test3465
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rpar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rpar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rpar without a semi-colon");
    }
}
        
- (void)test3466
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @")"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rpar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rpar; with a semi-colon");
    }
}
        
- (void)test3467
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rpargt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rpargt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rpargt without a semi-colon");
    }
}
        
- (void)test3468
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rpargt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rpargt; with a semi-colon");
    }
}
        
- (void)test3469
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rppolint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rppolint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rppolint without a semi-colon");
    }
}
        
- (void)test3470
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®í"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rppolint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rppolint; with a semi-colon");
    }
}
        
- (void)test3471
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rrarr without a semi-colon");
    }
}
        
- (void)test3472
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rrarr; with a semi-colon");
    }
}
        
- (void)test3473
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rsaquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsaquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rsaquo without a semi-colon");
    }
}
        
- (void)test3474
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsaquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rsaquo; with a semi-colon");
    }
}
        
- (void)test3475
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rscr without a semi-colon");
    }
}
        
- (void)test3476
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rscr; with a semi-colon");
    }
}
        
- (void)test3477
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rsh"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsh"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rsh without a semi-colon");
    }
}
        
- (void)test3478
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsh;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rsh; with a semi-colon");
    }
}
        
- (void)test3479
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rsqb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsqb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rsqb without a semi-colon");
    }
}
        
- (void)test3480
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"]"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsqb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rsqb; with a semi-colon");
    }
}
        
- (void)test3481
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rsquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rsquo without a semi-colon");
    }
}
        
- (void)test3482
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rsquo; with a semi-colon");
    }
}
        
- (void)test3483
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rsquor"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsquor"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rsquor without a semi-colon");
    }
}
        
- (void)test3484
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rsquor;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rsquor; with a semi-colon");
    }
}
        
- (void)test3485
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rthree"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rthree"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rthree without a semi-colon");
    }
}
        
- (void)test3486
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rthree;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rthree; with a semi-colon");
    }
}
        
- (void)test3487
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rtimes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtimes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rtimes without a semi-colon");
    }
}
        
- (void)test3488
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtimes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rtimes; with a semi-colon");
    }
}
        
- (void)test3489
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rtri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rtri without a semi-colon");
    }
}
        
- (void)test3490
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rtri; with a semi-colon");
    }
}
        
- (void)test3491
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rtrie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtrie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rtrie without a semi-colon");
    }
}
        
- (void)test3492
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtrie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rtrie; with a semi-colon");
    }
}
        
- (void)test3493
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rtrif"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtrif"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rtrif without a semi-colon");
    }
}
        
- (void)test3494
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtrif;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rtrif; with a semi-colon");
    }
}
        
- (void)test3495
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rtriltri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtriltri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rtriltri without a semi-colon");
    }
}
        
- (void)test3496
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rtriltri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rtriltri; with a semi-colon");
    }
}
        
- (void)test3497
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ruluhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ruluhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ruluhar without a semi-colon");
    }
}
        
- (void)test3498
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ruluhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ruluhar; with a semi-colon");
    }
}
        
- (void)test3499
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&rx"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rx"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: rx without a semi-colon");
    }
}
        
- (void)test3500
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&rx;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: rx; with a semi-colon");
    }
}
        
- (void)test3501
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sacute without a semi-colon");
    }
}
        
- (void)test3502
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sacute; with a semi-colon");
    }
}
        
- (void)test3503
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sbquo"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sbquo"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sbquo without a semi-colon");
    }
}
        
- (void)test3504
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sbquo;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sbquo; with a semi-colon");
    }
}
        
- (void)test3505
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sc without a semi-colon");
    }
}
        
- (void)test3506
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sc; with a semi-colon");
    }
}
        
- (void)test3507
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scE without a semi-colon");
    }
}
        
- (void)test3508
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scE; with a semi-colon");
    }
}
        
- (void)test3509
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scap without a semi-colon");
    }
}
        
- (void)test3510
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scap; with a semi-colon");
    }
}
        
- (void)test3511
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scaron without a semi-colon");
    }
}
        
- (void)test3512
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scaron; with a semi-colon");
    }
}
        
- (void)test3513
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sccue"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sccue"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sccue without a semi-colon");
    }
}
        
- (void)test3514
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sccue;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sccue; with a semi-colon");
    }
}
        
- (void)test3515
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sce"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sce"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sce without a semi-colon");
    }
}
        
- (void)test3516
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sce;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sce; with a semi-colon");
    }
}
        
- (void)test3517
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scedil without a semi-colon");
    }
}
        
- (void)test3518
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scedil; with a semi-colon");
    }
}
        
- (void)test3519
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scirc without a semi-colon");
    }
}
        
- (void)test3520
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scirc; with a semi-colon");
    }
}
        
- (void)test3521
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scnE without a semi-colon");
    }
}
        
- (void)test3522
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scnE; with a semi-colon");
    }
}
        
- (void)test3523
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scnap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scnap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scnap without a semi-colon");
    }
}
        
- (void)test3524
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scnap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scnap; with a semi-colon");
    }
}
        
- (void)test3525
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scnsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scnsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scnsim without a semi-colon");
    }
}
        
- (void)test3526
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scnsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scnsim; with a semi-colon");
    }
}
        
- (void)test3527
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scpolint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scpolint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scpolint without a semi-colon");
    }
}
        
- (void)test3528
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scpolint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scpolint; with a semi-colon");
    }
}
        
- (void)test3529
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scsim without a semi-colon");
    }
}
        
- (void)test3530
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scsim; with a semi-colon");
    }
}
        
- (void)test3531
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&scy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: scy without a semi-colon");
    }
}
        
- (void)test3532
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&scy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: scy; with a semi-colon");
    }
}
        
- (void)test3533
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sdot without a semi-colon");
    }
}
        
- (void)test3534
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sdot; with a semi-colon");
    }
}
        
- (void)test3535
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sdotb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sdotb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sdotb without a semi-colon");
    }
}
        
- (void)test3536
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sdotb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sdotb; with a semi-colon");
    }
}
        
- (void)test3537
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sdote"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sdote"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sdote without a semi-colon");
    }
}
        
- (void)test3538
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sdote;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sdote; with a semi-colon");
    }
}
        
- (void)test3539
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&seArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&seArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: seArr without a semi-colon");
    }
}
        
- (void)test3540
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&seArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: seArr; with a semi-colon");
    }
}
        
- (void)test3541
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&searhk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&searhk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: searhk without a semi-colon");
    }
}
        
- (void)test3542
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&searhk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: searhk; with a semi-colon");
    }
}
        
- (void)test3543
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&searr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&searr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: searr without a semi-colon");
    }
}
        
- (void)test3544
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&searr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: searr; with a semi-colon");
    }
}
        
- (void)test3545
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&searrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&searrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: searrow without a semi-colon");
    }
}
        
- (void)test3546
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&searrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: searrow; with a semi-colon");
    }
}
        
- (void)test3547
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sect"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sect without a semi-colon");
    }
}
        
- (void)test3548
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sect;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sect; with a semi-colon");
    }
}
        
- (void)test3549
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&semi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&semi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: semi without a semi-colon");
    }
}
        
- (void)test3550
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @";"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&semi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: semi; with a semi-colon");
    }
}
        
- (void)test3551
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&seswar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&seswar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: seswar without a semi-colon");
    }
}
        
- (void)test3552
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&seswar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: seswar; with a semi-colon");
    }
}
        
- (void)test3553
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&setminus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&setminus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: setminus without a semi-colon");
    }
}
        
- (void)test3554
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&setminus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: setminus; with a semi-colon");
    }
}
        
- (void)test3555
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&setmn"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&setmn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: setmn without a semi-colon");
    }
}
        
- (void)test3556
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&setmn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: setmn; with a semi-colon");
    }
}
        
- (void)test3557
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sext"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sext"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sext without a semi-colon");
    }
}
        
- (void)test3558
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ú∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sext;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sext; with a semi-colon");
    }
}
        
- (void)test3559
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sfr without a semi-colon");
    }
}
        
- (void)test3560
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sfr; with a semi-colon");
    }
}
        
- (void)test3561
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sfrown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sfrown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sfrown without a semi-colon");
    }
}
        
- (void)test3562
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚å¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sfrown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sfrown; with a semi-colon");
    }
}
        
- (void)test3563
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sharp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sharp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sharp without a semi-colon");
    }
}
        
- (void)test3564
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ôØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sharp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sharp; with a semi-colon");
    }
}
        
- (void)test3565
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&shchcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shchcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: shchcy without a semi-colon");
    }
}
        
- (void)test3566
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—â"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shchcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: shchcy; with a semi-colon");
    }
}
        
- (void)test3567
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&shcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: shcy without a semi-colon");
    }
}
        
- (void)test3568
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: shcy; with a semi-colon");
    }
}
        
- (void)test3569
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&shortmid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shortmid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: shortmid without a semi-colon");
    }
}
        
- (void)test3570
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shortmid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: shortmid; with a semi-colon");
    }
}
        
- (void)test3571
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&shortparallel"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shortparallel"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: shortparallel without a semi-colon");
    }
}
        
- (void)test3572
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shortparallel;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: shortparallel; with a semi-colon");
    }
}
        
- (void)test3573
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: shy without a semi-colon");
    }
}
        
- (void)test3574
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&shy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: shy; with a semi-colon");
    }
}
        
- (void)test3575
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sigma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sigma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sigma without a semi-colon");
    }
}
        
- (void)test3576
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sigma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sigma; with a semi-colon");
    }
}
        
- (void)test3577
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sigmaf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sigmaf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sigmaf without a semi-colon");
    }
}
        
- (void)test3578
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sigmaf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sigmaf; with a semi-colon");
    }
}
        
- (void)test3579
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sigmav"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sigmav"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sigmav without a semi-colon");
    }
}
        
- (void)test3580
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sigmav;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sigmav; with a semi-colon");
    }
}
        
- (void)test3581
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sim without a semi-colon");
    }
}
        
- (void)test3582
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sim; with a semi-colon");
    }
}
        
- (void)test3583
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simdot without a semi-colon");
    }
}
        
- (void)test3584
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simdot; with a semi-colon");
    }
}
        
- (void)test3585
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sime without a semi-colon");
    }
}
        
- (void)test3586
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sime; with a semi-colon");
    }
}
        
- (void)test3587
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simeq without a semi-colon");
    }
}
        
- (void)test3588
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simeq; with a semi-colon");
    }
}
        
- (void)test3589
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simg"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simg"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simg without a semi-colon");
    }
}
        
- (void)test3590
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simg;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simg; with a semi-colon");
    }
}
        
- (void)test3591
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simgE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simgE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simgE without a semi-colon");
    }
}
        
- (void)test3592
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simgE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simgE; with a semi-colon");
    }
}
        
- (void)test3593
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&siml"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&siml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: siml without a semi-colon");
    }
}
        
- (void)test3594
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&siml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: siml; with a semi-colon");
    }
}
        
- (void)test3595
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simlE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simlE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simlE without a semi-colon");
    }
}
        
- (void)test3596
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simlE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simlE; with a semi-colon");
    }
}
        
- (void)test3597
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simne without a semi-colon");
    }
}
        
- (void)test3598
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simne; with a semi-colon");
    }
}
        
- (void)test3599
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simplus without a semi-colon");
    }
}
        
- (void)test3600
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simplus; with a semi-colon");
    }
}
        
- (void)test3601
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&simrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: simrarr without a semi-colon");
    }
}
        
- (void)test3602
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&simrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: simrarr; with a semi-colon");
    }
}
        
- (void)test3603
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&slarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&slarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: slarr without a semi-colon");
    }
}
        
- (void)test3604
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&slarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: slarr; with a semi-colon");
    }
}
        
- (void)test3605
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smallsetminus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smallsetminus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smallsetminus without a semi-colon");
    }
}
        
- (void)test3606
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smallsetminus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smallsetminus; with a semi-colon");
    }
}
        
- (void)test3607
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smashp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smashp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smashp without a semi-colon");
    }
}
        
- (void)test3608
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smashp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smashp; with a semi-colon");
    }
}
        
- (void)test3609
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smeparsl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smeparsl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smeparsl without a semi-colon");
    }
}
        
- (void)test3610
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ß§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smeparsl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smeparsl; with a semi-colon");
    }
}
        
- (void)test3611
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smid"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smid"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smid without a semi-colon");
    }
}
        
- (void)test3612
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smid;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smid; with a semi-colon");
    }
}
        
- (void)test3613
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smile"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smile"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smile without a semi-colon");
    }
}
        
- (void)test3614
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚å£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smile;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smile; with a semi-colon");
    }
}
        
- (void)test3615
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smt without a semi-colon");
    }
}
        
- (void)test3616
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smt; with a semi-colon");
    }
}
        
- (void)test3617
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smte"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smte"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smte without a semi-colon");
    }
}
        
- (void)test3618
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smte;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smte; with a semi-colon");
    }
}
        
- (void)test3619
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&smtes"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smtes"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: smtes without a semi-colon");
    }
}
        
- (void)test3620
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™¨Ô∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&smtes;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: smtes; with a semi-colon");
    }
}
        
- (void)test3621
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&softcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&softcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: softcy without a semi-colon");
    }
}
        
- (void)test3622
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&softcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: softcy; with a semi-colon");
    }
}
        
- (void)test3623
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sol"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sol"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sol without a semi-colon");
    }
}
        
- (void)test3624
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sol;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sol; with a semi-colon");
    }
}
        
- (void)test3625
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&solb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&solb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: solb without a semi-colon");
    }
}
        
- (void)test3626
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&solb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: solb; with a semi-colon");
    }
}
        
- (void)test3627
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&solbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&solbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: solbar without a semi-colon");
    }
}
        
- (void)test3628
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&solbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: solbar; with a semi-colon");
    }
}
        
- (void)test3629
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sopf without a semi-colon");
    }
}
        
- (void)test3630
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sopf; with a semi-colon");
    }
}
        
- (void)test3631
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&spades"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&spades"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: spades without a semi-colon");
    }
}
        
- (void)test3632
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&spades;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: spades; with a semi-colon");
    }
}
        
- (void)test3633
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&spadesuit"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&spadesuit"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: spadesuit without a semi-colon");
    }
}
        
- (void)test3634
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&spadesuit;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: spadesuit; with a semi-colon");
    }
}
        
- (void)test3635
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&spar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&spar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: spar without a semi-colon");
    }
}
        
- (void)test3636
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&spar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: spar; with a semi-colon");
    }
}
        
- (void)test3637
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqcap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqcap without a semi-colon");
    }
}
        
- (void)test3638
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqcap; with a semi-colon");
    }
}
        
- (void)test3639
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqcaps"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcaps"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqcaps without a semi-colon");
    }
}
        
- (void)test3640
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äìÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcaps;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqcaps; with a semi-colon");
    }
}
        
- (void)test3641
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqcup without a semi-colon");
    }
}
        
- (void)test3642
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äî"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqcup; with a semi-colon");
    }
}
        
- (void)test3643
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqcups"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcups"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqcups without a semi-colon");
    }
}
        
- (void)test3644
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äîÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqcups;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqcups; with a semi-colon");
    }
}
        
- (void)test3645
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsub without a semi-colon");
    }
}
        
- (void)test3646
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsub; with a semi-colon");
    }
}
        
- (void)test3647
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsube"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsube"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsube without a semi-colon");
    }
}
        
- (void)test3648
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsube;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsube; with a semi-colon");
    }
}
        
- (void)test3649
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsubset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsubset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsubset without a semi-colon");
    }
}
        
- (void)test3650
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsubset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsubset; with a semi-colon");
    }
}
        
- (void)test3651
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsubseteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsubseteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsubseteq without a semi-colon");
    }
}
        
- (void)test3652
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsubseteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsubseteq; with a semi-colon");
    }
}
        
- (void)test3653
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsup without a semi-colon");
    }
}
        
- (void)test3654
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsup; with a semi-colon");
    }
}
        
- (void)test3655
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsupe"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsupe"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsupe without a semi-colon");
    }
}
        
- (void)test3656
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsupe;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsupe; with a semi-colon");
    }
}
        
- (void)test3657
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsupset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsupset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsupset without a semi-colon");
    }
}
        
- (void)test3658
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äê"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsupset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsupset; with a semi-colon");
    }
}
        
- (void)test3659
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sqsupseteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsupseteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sqsupseteq without a semi-colon");
    }
}
        
- (void)test3660
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sqsupseteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sqsupseteq; with a semi-colon");
    }
}
        
- (void)test3661
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&squ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&squ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: squ without a semi-colon");
    }
}
        
- (void)test3662
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&squ;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: squ; with a semi-colon");
    }
}
        
- (void)test3663
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&square"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&square"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: square without a semi-colon");
    }
}
        
- (void)test3664
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&square;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: square; with a semi-colon");
    }
}
        
- (void)test3665
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&squarf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&squarf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: squarf without a semi-colon");
    }
}
        
- (void)test3666
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&squarf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: squarf; with a semi-colon");
    }
}
        
- (void)test3667
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&squf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&squf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: squf without a semi-colon");
    }
}
        
- (void)test3668
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&squf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: squf; with a semi-colon");
    }
}
        
- (void)test3669
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&srarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&srarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: srarr without a semi-colon");
    }
}
        
- (void)test3670
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&srarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: srarr; with a semi-colon");
    }
}
        
- (void)test3671
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sscr without a semi-colon");
    }
}
        
- (void)test3672
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sscr; with a semi-colon");
    }
}
        
- (void)test3673
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ssetmn"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ssetmn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ssetmn without a semi-colon");
    }
}
        
- (void)test3674
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ssetmn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ssetmn; with a semi-colon");
    }
}
        
- (void)test3675
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ssmile"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ssmile"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ssmile without a semi-colon");
    }
}
        
- (void)test3676
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚å£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ssmile;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ssmile; with a semi-colon");
    }
}
        
- (void)test3677
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sstarf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sstarf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sstarf without a semi-colon");
    }
}
        
- (void)test3678
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sstarf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sstarf; with a semi-colon");
    }
}
        
- (void)test3679
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&star"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&star"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: star without a semi-colon");
    }
}
        
- (void)test3680
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚òÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&star;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: star; with a semi-colon");
    }
}
        
- (void)test3681
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&starf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&starf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: starf without a semi-colon");
    }
}
        
- (void)test3682
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚òÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&starf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: starf; with a semi-colon");
    }
}
        
- (void)test3683
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&straightepsilon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&straightepsilon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: straightepsilon without a semi-colon");
    }
}
        
- (void)test3684
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&straightepsilon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: straightepsilon; with a semi-colon");
    }
}
        
- (void)test3685
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&straightphi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&straightphi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: straightphi without a semi-colon");
    }
}
        
- (void)test3686
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&straightphi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: straightphi; with a semi-colon");
    }
}
        
- (void)test3687
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&strns"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&strns"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: strns without a semi-colon");
    }
}
        
- (void)test3688
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&strns;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: strns; with a semi-colon");
    }
}
        
- (void)test3689
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sub without a semi-colon");
    }
}
        
- (void)test3690
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sub; with a semi-colon");
    }
}
        
- (void)test3691
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subE without a semi-colon");
    }
}
        
- (void)test3692
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subE; with a semi-colon");
    }
}
        
- (void)test3693
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subdot without a semi-colon");
    }
}
        
- (void)test3694
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subdot; with a semi-colon");
    }
}
        
- (void)test3695
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sube"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sube"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sube without a semi-colon");
    }
}
        
- (void)test3696
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sube;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sube; with a semi-colon");
    }
}
        
- (void)test3697
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subedot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subedot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subedot without a semi-colon");
    }
}
        
- (void)test3698
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subedot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subedot; with a semi-colon");
    }
}
        
- (void)test3699
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&submult"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&submult"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: submult without a semi-colon");
    }
}
        
- (void)test3700
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&submult;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: submult; with a semi-colon");
    }
}
        
- (void)test3701
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subnE without a semi-colon");
    }
}
        
- (void)test3702
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subnE; with a semi-colon");
    }
}
        
- (void)test3703
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subne without a semi-colon");
    }
}
        
- (void)test3704
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ää"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subne; with a semi-colon");
    }
}
        
- (void)test3705
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subplus without a semi-colon");
    }
}
        
- (void)test3706
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subplus; with a semi-colon");
    }
}
        
- (void)test3707
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subrarr without a semi-colon");
    }
}
        
- (void)test3708
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subrarr; with a semi-colon");
    }
}
        
- (void)test3709
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subset without a semi-colon");
    }
}
        
- (void)test3710
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subset; with a semi-colon");
    }
}
        
- (void)test3711
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subseteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subseteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subseteq without a semi-colon");
    }
}
        
- (void)test3712
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÜ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subseteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subseteq; with a semi-colon");
    }
}
        
- (void)test3713
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subseteqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subseteqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subseteqq without a semi-colon");
    }
}
        
- (void)test3714
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subseteqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subseteqq; with a semi-colon");
    }
}
        
- (void)test3715
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subsetneq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsetneq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subsetneq without a semi-colon");
    }
}
        
- (void)test3716
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ää"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsetneq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subsetneq; with a semi-colon");
    }
}
        
- (void)test3717
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subsetneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsetneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subsetneqq without a semi-colon");
    }
}
        
- (void)test3718
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsetneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subsetneqq; with a semi-colon");
    }
}
        
- (void)test3719
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subsim without a semi-colon");
    }
}
        
- (void)test3720
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´á"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subsim; with a semi-colon");
    }
}
        
- (void)test3721
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subsub without a semi-colon");
    }
}
        
- (void)test3722
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subsub; with a semi-colon");
    }
}
        
- (void)test3723
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&subsup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: subsup without a semi-colon");
    }
}
        
- (void)test3724
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ì"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&subsup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: subsup; with a semi-colon");
    }
}
        
- (void)test3725
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succ"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succ without a semi-colon");
    }
}
        
- (void)test3726
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succ;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succ; with a semi-colon");
    }
}
        
- (void)test3727
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succapprox without a semi-colon");
    }
}
        
- (void)test3728
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succapprox; with a semi-colon");
    }
}
        
- (void)test3729
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succcurlyeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succcurlyeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succcurlyeq without a semi-colon");
    }
}
        
- (void)test3730
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succcurlyeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succcurlyeq; with a semi-colon");
    }
}
        
- (void)test3731
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succeq without a semi-colon");
    }
}
        
- (void)test3732
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succeq; with a semi-colon");
    }
}
        
- (void)test3733
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succnapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succnapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succnapprox without a semi-colon");
    }
}
        
- (void)test3734
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succnapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succnapprox; with a semi-colon");
    }
}
        
- (void)test3735
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succneqq without a semi-colon");
    }
}
        
- (void)test3736
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succneqq; with a semi-colon");
    }
}
        
- (void)test3737
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succnsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succnsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succnsim without a semi-colon");
    }
}
        
- (void)test3738
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succnsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succnsim; with a semi-colon");
    }
}
        
- (void)test3739
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&succsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: succsim without a semi-colon");
    }
}
        
- (void)test3740
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&succsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: succsim; with a semi-colon");
    }
}
        
- (void)test3741
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sum"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sum"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sum without a semi-colon");
    }
}
        
- (void)test3742
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sum;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sum; with a semi-colon");
    }
}
        
- (void)test3743
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sung"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sung"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sung without a semi-colon");
    }
}
        
- (void)test3744
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ô™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sung;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sung; with a semi-colon");
    }
}
        
- (void)test3745
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&sup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: sup without a semi-colon");
    }
}
        
- (void)test3746
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup1"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sup1 without a semi-colon");
    }
}
        
- (void)test3747
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup1;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sup1; with a semi-colon");
    }
}
        
- (void)test3748
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup2"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sup2 without a semi-colon");
    }
}
        
- (void)test3749
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup2;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sup2; with a semi-colon");
    }
}
        
- (void)test3750
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup3"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sup3 without a semi-colon");
    }
}
        
- (void)test3751
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup3;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sup3; with a semi-colon");
    }
}
        
- (void)test3752
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&sup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: sup; with a semi-colon");
    }
}
        
- (void)test3753
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supE without a semi-colon");
    }
}
        
- (void)test3754
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supE; with a semi-colon");
    }
}
        
- (void)test3755
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supdot without a semi-colon");
    }
}
        
- (void)test3756
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚™æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supdot; with a semi-colon");
    }
}
        
- (void)test3757
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supdsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supdsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supdsub without a semi-colon");
    }
}
        
- (void)test3758
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supdsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supdsub; with a semi-colon");
    }
}
        
- (void)test3759
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supe"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supe"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supe without a semi-colon");
    }
}
        
- (void)test3760
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supe;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supe; with a semi-colon");
    }
}
        
- (void)test3761
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supedot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supedot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supedot without a semi-colon");
    }
}
        
- (void)test3762
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supedot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supedot; with a semi-colon");
    }
}
        
- (void)test3763
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&suphsol"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&suphsol"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: suphsol without a semi-colon");
    }
}
        
- (void)test3764
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&suphsol;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: suphsol; with a semi-colon");
    }
}
        
- (void)test3765
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&suphsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&suphsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: suphsub without a semi-colon");
    }
}
        
- (void)test3766
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&suphsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: suphsub; with a semi-colon");
    }
}
        
- (void)test3767
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&suplarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&suplarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: suplarr without a semi-colon");
    }
}
        
- (void)test3768
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&suplarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: suplarr; with a semi-colon");
    }
}
        
- (void)test3769
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supmult"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supmult"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supmult without a semi-colon");
    }
}
        
- (void)test3770
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supmult;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supmult; with a semi-colon");
    }
}
        
- (void)test3771
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supnE without a semi-colon");
    }
}
        
- (void)test3772
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supnE; with a semi-colon");
    }
}
        
- (void)test3773
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supne without a semi-colon");
    }
}
        
- (void)test3774
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supne; with a semi-colon");
    }
}
        
- (void)test3775
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supplus without a semi-colon");
    }
}
        
- (void)test3776
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supplus; with a semi-colon");
    }
}
        
- (void)test3777
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supset"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supset"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supset without a semi-colon");
    }
}
        
- (void)test3778
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supset;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supset; with a semi-colon");
    }
}
        
- (void)test3779
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supseteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supseteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supseteq without a semi-colon");
    }
}
        
- (void)test3780
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äá"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supseteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supseteq; with a semi-colon");
    }
}
        
- (void)test3781
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supseteqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supseteqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supseteqq without a semi-colon");
    }
}
        
- (void)test3782
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supseteqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supseteqq; with a semi-colon");
    }
}
        
- (void)test3783
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supsetneq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsetneq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supsetneq without a semi-colon");
    }
}
        
- (void)test3784
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsetneq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supsetneq; with a semi-colon");
    }
}
        
- (void)test3785
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supsetneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsetneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supsetneqq without a semi-colon");
    }
}
        
- (void)test3786
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsetneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supsetneqq; with a semi-colon");
    }
}
        
- (void)test3787
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supsim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supsim without a semi-colon");
    }
}
        
- (void)test3788
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´à"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supsim; with a semi-colon");
    }
}
        
- (void)test3789
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supsub without a semi-colon");
    }
}
        
- (void)test3790
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supsub; with a semi-colon");
    }
}
        
- (void)test3791
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&supsup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: supsup without a semi-colon");
    }
}
        
- (void)test3792
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&supsup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: supsup; with a semi-colon");
    }
}
        
- (void)test3793
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&swArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: swArr without a semi-colon");
    }
}
        
- (void)test3794
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: swArr; with a semi-colon");
    }
}
        
- (void)test3795
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&swarhk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swarhk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: swarhk without a semi-colon");
    }
}
        
- (void)test3796
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swarhk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: swarhk; with a semi-colon");
    }
}
        
- (void)test3797
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&swarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: swarr without a semi-colon");
    }
}
        
- (void)test3798
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: swarr; with a semi-colon");
    }
}
        
- (void)test3799
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&swarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: swarrow without a semi-colon");
    }
}
        
- (void)test3800
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: swarrow; with a semi-colon");
    }
}
        
- (void)test3801
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&swnwar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swnwar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: swnwar without a semi-colon");
    }
}
        
- (void)test3802
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&swnwar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: swnwar; with a semi-colon");
    }
}
        
- (void)test3803
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&szlig"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: szlig without a semi-colon");
    }
}
        
- (void)test3804
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&szlig;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: szlig; with a semi-colon");
    }
}
        
- (void)test3805
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&target"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&target"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: target without a semi-colon");
    }
}
        
- (void)test3806
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&target;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: target; with a semi-colon");
    }
}
        
- (void)test3807
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tau"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tau"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tau without a semi-colon");
    }
}
        
- (void)test3808
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÑ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tau;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tau; with a semi-colon");
    }
}
        
- (void)test3809
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tbrk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tbrk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tbrk without a semi-colon");
    }
}
        
- (void)test3810
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚é¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tbrk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tbrk; with a semi-colon");
    }
}
        
- (void)test3811
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tcaron without a semi-colon");
    }
}
        
- (void)test3812
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tcaron; with a semi-colon");
    }
}
        
- (void)test3813
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tcedil"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tcedil"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tcedil without a semi-colon");
    }
}
        
- (void)test3814
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tcedil;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tcedil; with a semi-colon");
    }
}
        
- (void)test3815
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tcy without a semi-colon");
    }
}
        
- (void)test3816
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tcy; with a semi-colon");
    }
}
        
- (void)test3817
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tdot without a semi-colon");
    }
}
        
- (void)test3818
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Éõ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tdot; with a semi-colon");
    }
}
        
- (void)test3819
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&telrec"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&telrec"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: telrec without a semi-colon");
    }
}
        
- (void)test3820
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&telrec;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: telrec; with a semi-colon");
    }
}
        
- (void)test3821
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tfr without a semi-colon");
    }
}
        
- (void)test3822
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tfr; with a semi-colon");
    }
}
        
- (void)test3823
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&there4"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&there4"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: there4 without a semi-colon");
    }
}
        
- (void)test3824
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&there4;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: there4; with a semi-colon");
    }
}
        
- (void)test3825
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&therefore"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&therefore"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: therefore without a semi-colon");
    }
}
        
- (void)test3826
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&therefore;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: therefore; with a semi-colon");
    }
}
        
- (void)test3827
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&theta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&theta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: theta without a semi-colon");
    }
}
        
- (void)test3828
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&theta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: theta; with a semi-colon");
    }
}
        
- (void)test3829
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&thetasym"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thetasym"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: thetasym without a semi-colon");
    }
}
        
- (void)test3830
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thetasym;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thetasym; with a semi-colon");
    }
}
        
- (void)test3831
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&thetav"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thetav"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: thetav without a semi-colon");
    }
}
        
- (void)test3832
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thetav;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thetav; with a semi-colon");
    }
}
        
- (void)test3833
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&thickapprox"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thickapprox"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: thickapprox without a semi-colon");
    }
}
        
- (void)test3834
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thickapprox;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thickapprox; with a semi-colon");
    }
}
        
- (void)test3835
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&thicksim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thicksim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: thicksim without a semi-colon");
    }
}
        
- (void)test3836
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thicksim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thicksim; with a semi-colon");
    }
}
        
- (void)test3837
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&thinsp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thinsp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: thinsp without a semi-colon");
    }
}
        
- (void)test3838
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thinsp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thinsp; with a semi-colon");
    }
}
        
- (void)test3839
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&thkap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thkap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: thkap without a semi-colon");
    }
}
        
- (void)test3840
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thkap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thkap; with a semi-colon");
    }
}
        
- (void)test3841
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&thksim"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thksim"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: thksim without a semi-colon");
    }
}
        
- (void)test3842
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thksim;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thksim; with a semi-colon");
    }
}
        
- (void)test3843
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thorn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thorn without a semi-colon");
    }
}
        
- (void)test3844
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&thorn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: thorn; with a semi-colon");
    }
}
        
- (void)test3845
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tilde without a semi-colon");
    }
}
        
- (void)test3846
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Àú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tilde; with a semi-colon");
    }
}
        
- (void)test3847
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&times"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: times without a semi-colon");
    }
}
        
- (void)test3848
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&times;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: times; with a semi-colon");
    }
}
        
- (void)test3849
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&timesb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: timesb; with a semi-colon");
    }
}
        
- (void)test3850
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&timesbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: timesbar; with a semi-colon");
    }
}
        
- (void)test3851
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&timesd;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: timesd; with a semi-colon");
    }
}
        
- (void)test3852
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tint"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tint"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tint without a semi-colon");
    }
}
        
- (void)test3853
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tint;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tint; with a semi-colon");
    }
}
        
- (void)test3854
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&toea"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&toea"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: toea without a semi-colon");
    }
}
        
- (void)test3855
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&toea;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: toea; with a semi-colon");
    }
}
        
- (void)test3856
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&top"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&top"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: top without a semi-colon");
    }
}
        
- (void)test3857
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&top;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: top; with a semi-colon");
    }
}
        
- (void)test3858
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&topbot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topbot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: topbot without a semi-colon");
    }
}
        
- (void)test3859
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚å∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topbot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: topbot; with a semi-colon");
    }
}
        
- (void)test3860
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&topcir"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topcir"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: topcir without a semi-colon");
    }
}
        
- (void)test3861
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topcir;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: topcir; with a semi-colon");
    }
}
        
- (void)test3862
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&topf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: topf without a semi-colon");
    }
}
        
- (void)test3863
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: topf; with a semi-colon");
    }
}
        
- (void)test3864
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&topfork"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topfork"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: topfork without a semi-colon");
    }
}
        
- (void)test3865
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&topfork;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: topfork; with a semi-colon");
    }
}
        
- (void)test3866
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tosa"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tosa"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tosa without a semi-colon");
    }
}
        
- (void)test3867
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚§©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tosa;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tosa; with a semi-colon");
    }
}
        
- (void)test3868
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tprime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tprime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tprime without a semi-colon");
    }
}
        
- (void)test3869
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ä¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tprime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tprime; with a semi-colon");
    }
}
        
- (void)test3870
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&trade"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trade"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: trade without a semi-colon");
    }
}
        
- (void)test3871
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trade;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: trade; with a semi-colon");
    }
}
        
- (void)test3872
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&triangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: triangle without a semi-colon");
    }
}
        
- (void)test3873
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: triangle; with a semi-colon");
    }
}
        
- (void)test3874
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&triangledown"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangledown"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: triangledown without a semi-colon");
    }
}
        
- (void)test3875
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangledown;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: triangledown; with a semi-colon");
    }
}
        
- (void)test3876
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&triangleleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangleleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: triangleleft without a semi-colon");
    }
}
        
- (void)test3877
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangleleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: triangleleft; with a semi-colon");
    }
}
        
- (void)test3878
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&trianglelefteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trianglelefteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: trianglelefteq without a semi-colon");
    }
}
        
- (void)test3879
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trianglelefteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: trianglelefteq; with a semi-colon");
    }
}
        
- (void)test3880
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&triangleq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangleq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: triangleq without a semi-colon");
    }
}
        
- (void)test3881
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangleq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: triangleq; with a semi-colon");
    }
}
        
- (void)test3882
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&triangleright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangleright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: triangleright without a semi-colon");
    }
}
        
- (void)test3883
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triangleright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: triangleright; with a semi-colon");
    }
}
        
- (void)test3884
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&trianglerighteq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trianglerighteq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: trianglerighteq without a semi-colon");
    }
}
        
- (void)test3885
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trianglerighteq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: trianglerighteq; with a semi-colon");
    }
}
        
- (void)test3886
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tridot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tridot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tridot without a semi-colon");
    }
}
        
- (void)test3887
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ó¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tridot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tridot; with a semi-colon");
    }
}
        
- (void)test3888
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&trie"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trie"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: trie without a semi-colon");
    }
}
        
- (void)test3889
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trie;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: trie; with a semi-colon");
    }
}
        
- (void)test3890
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&triminus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triminus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: triminus without a semi-colon");
    }
}
        
- (void)test3891
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triminus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: triminus; with a semi-colon");
    }
}
        
- (void)test3892
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&triplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: triplus without a semi-colon");
    }
}
        
- (void)test3893
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&triplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: triplus; with a semi-colon");
    }
}
        
- (void)test3894
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&trisb"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trisb"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: trisb without a semi-colon");
    }
}
        
- (void)test3895
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ßç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trisb;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: trisb; with a semi-colon");
    }
}
        
- (void)test3896
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tritime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tritime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tritime without a semi-colon");
    }
}
        
- (void)test3897
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tritime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tritime; with a semi-colon");
    }
}
        
- (void)test3898
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&trpezium"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trpezium"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: trpezium without a semi-colon");
    }
}
        
- (void)test3899
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚è¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&trpezium;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: trpezium; with a semi-colon");
    }
}
        
- (void)test3900
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tscr without a semi-colon");
    }
}
        
- (void)test3901
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìâ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tscr; with a semi-colon");
    }
}
        
- (void)test3902
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tscy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tscy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tscy without a semi-colon");
    }
}
        
- (void)test3903
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tscy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tscy; with a semi-colon");
    }
}
        
- (void)test3904
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tshcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tshcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tshcy without a semi-colon");
    }
}
        
- (void)test3905
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—õ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tshcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tshcy; with a semi-colon");
    }
}
        
- (void)test3906
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&tstrok"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tstrok"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: tstrok without a semi-colon");
    }
}
        
- (void)test3907
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&tstrok;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: tstrok; with a semi-colon");
    }
}
        
- (void)test3908
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&twixt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&twixt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: twixt without a semi-colon");
    }
}
        
- (void)test3909
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚â¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&twixt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: twixt; with a semi-colon");
    }
}
        
- (void)test3910
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&twoheadleftarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&twoheadleftarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: twoheadleftarrow without a semi-colon");
    }
}
        
- (void)test3911
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üû"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&twoheadleftarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: twoheadleftarrow; with a semi-colon");
    }
}
        
- (void)test3912
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&twoheadrightarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&twoheadrightarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: twoheadrightarrow without a semi-colon");
    }
}
        
- (void)test3913
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ü†"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&twoheadrightarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: twoheadrightarrow; with a semi-colon");
    }
}
        
- (void)test3914
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uArr without a semi-colon");
    }
}
        
- (void)test3915
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uArr; with a semi-colon");
    }
}
        
- (void)test3916
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uHar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uHar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uHar without a semi-colon");
    }
}
        
- (void)test3917
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uHar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uHar; with a semi-colon");
    }
}
        
- (void)test3918
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uacute without a semi-colon");
    }
}
        
- (void)test3919
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uacute; with a semi-colon");
    }
}
        
- (void)test3920
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uarr without a semi-colon");
    }
}
        
- (void)test3921
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uarr; with a semi-colon");
    }
}
        
- (void)test3922
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ubrcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ubrcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ubrcy without a semi-colon");
    }
}
        
- (void)test3923
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—û"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ubrcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ubrcy; with a semi-colon");
    }
}
        
- (void)test3924
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ubreve"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ubreve"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ubreve without a semi-colon");
    }
}
        
- (void)test3925
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈≠"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ubreve;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ubreve; with a semi-colon");
    }
}
        
- (void)test3926
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ucirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ucirc without a semi-colon");
    }
}
        
- (void)test3927
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ucirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ucirc; with a semi-colon");
    }
}
        
- (void)test3928
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ucy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ucy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ucy without a semi-colon");
    }
}
        
- (void)test3929
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—É"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ucy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ucy; with a semi-colon");
    }
}
        
- (void)test3930
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&udarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&udarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: udarr without a semi-colon");
    }
}
        
- (void)test3931
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&udarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: udarr; with a semi-colon");
    }
}
        
- (void)test3932
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&udblac"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&udblac"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: udblac without a semi-colon");
    }
}
        
- (void)test3933
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&udblac;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: udblac; with a semi-colon");
    }
}
        
- (void)test3934
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&udhar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&udhar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: udhar without a semi-colon");
    }
}
        
- (void)test3935
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•Æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&udhar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: udhar; with a semi-colon");
    }
}
        
- (void)test3936
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ufisht"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ufisht"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ufisht without a semi-colon");
    }
}
        
- (void)test3937
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚•æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ufisht;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ufisht; with a semi-colon");
    }
}
        
- (void)test3938
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ufr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ufr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ufr without a semi-colon");
    }
}
        
- (void)test3939
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ufr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ufr; with a semi-colon");
    }
}
        
- (void)test3940
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ugrave"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ugrave without a semi-colon");
    }
}
        
- (void)test3941
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√π"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ugrave;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ugrave; with a semi-colon");
    }
}
        
- (void)test3942
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uharl"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uharl"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uharl without a semi-colon");
    }
}
        
- (void)test3943
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uharl;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uharl; with a semi-colon");
    }
}
        
- (void)test3944
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uharr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uharr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uharr without a semi-colon");
    }
}
        
- (void)test3945
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uharr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uharr; with a semi-colon");
    }
}
        
- (void)test3946
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uhblk"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uhblk"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uhblk without a semi-colon");
    }
}
        
- (void)test3947
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uhblk;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uhblk; with a semi-colon");
    }
}
        
- (void)test3948
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ulcorn"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ulcorn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ulcorn without a semi-colon");
    }
}
        
- (void)test3949
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ulcorn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ulcorn; with a semi-colon");
    }
}
        
- (void)test3950
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ulcorner"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ulcorner"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ulcorner without a semi-colon");
    }
}
        
- (void)test3951
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ulcorner;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ulcorner; with a semi-colon");
    }
}
        
- (void)test3952
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ulcrop"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ulcrop"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ulcrop without a semi-colon");
    }
}
        
- (void)test3953
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ulcrop;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ulcrop; with a semi-colon");
    }
}
        
- (void)test3954
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ultri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ultri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ultri without a semi-colon");
    }
}
        
- (void)test3955
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ó∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ultri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ultri; with a semi-colon");
    }
}
        
- (void)test3956
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&umacr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&umacr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: umacr without a semi-colon");
    }
}
        
- (void)test3957
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&umacr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: umacr; with a semi-colon");
    }
}
        
- (void)test3958
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uml without a semi-colon");
    }
}
        
- (void)test3959
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uml; with a semi-colon");
    }
}
        
- (void)test3960
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uogon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uogon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uogon without a semi-colon");
    }
}
        
- (void)test3961
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uogon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uogon; with a semi-colon");
    }
}
        
- (void)test3962
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uopf without a semi-colon");
    }
}
        
- (void)test3963
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uopf; with a semi-colon");
    }
}
        
- (void)test3964
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uparrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uparrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uparrow without a semi-colon");
    }
}
        
- (void)test3965
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uparrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uparrow; with a semi-colon");
    }
}
        
- (void)test3966
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&updownarrow"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&updownarrow"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: updownarrow without a semi-colon");
    }
}
        
- (void)test3967
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&updownarrow;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: updownarrow; with a semi-colon");
    }
}
        
- (void)test3968
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&upharpoonleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upharpoonleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: upharpoonleft without a semi-colon");
    }
}
        
- (void)test3969
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upharpoonleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: upharpoonleft; with a semi-colon");
    }
}
        
- (void)test3970
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&upharpoonright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upharpoonright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: upharpoonright without a semi-colon");
    }
}
        
- (void)test3971
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upharpoonright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: upharpoonright; with a semi-colon");
    }
}
        
- (void)test3972
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uplus without a semi-colon");
    }
}
        
- (void)test3973
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uplus; with a semi-colon");
    }
}
        
- (void)test3974
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&upsi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upsi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: upsi without a semi-colon");
    }
}
        
- (void)test3975
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upsi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: upsi; with a semi-colon");
    }
}
        
- (void)test3976
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&upsih"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upsih"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: upsih without a semi-colon");
    }
}
        
- (void)test3977
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upsih;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: upsih; with a semi-colon");
    }
}
        
- (void)test3978
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&upsilon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upsilon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: upsilon without a semi-colon");
    }
}
        
- (void)test3979
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upsilon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: upsilon; with a semi-colon");
    }
}
        
- (void)test3980
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&upuparrows"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upuparrows"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: upuparrows without a semi-colon");
    }
}
        
- (void)test3981
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&upuparrows;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: upuparrows; with a semi-colon");
    }
}
        
- (void)test3982
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&urcorn"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urcorn"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: urcorn without a semi-colon");
    }
}
        
- (void)test3983
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urcorn;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: urcorn; with a semi-colon");
    }
}
        
- (void)test3984
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&urcorner"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urcorner"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: urcorner without a semi-colon");
    }
}
        
- (void)test3985
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urcorner;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: urcorner; with a semi-colon");
    }
}
        
- (void)test3986
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&urcrop"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urcrop"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: urcrop without a semi-colon");
    }
}
        
- (void)test3987
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚åé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urcrop;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: urcrop; with a semi-colon");
    }
}
        
- (void)test3988
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uring"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uring"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uring without a semi-colon");
    }
}
        
- (void)test3989
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈Ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uring;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uring; with a semi-colon");
    }
}
        
- (void)test3990
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&urtri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urtri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: urtri without a semi-colon");
    }
}
        
- (void)test3991
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&urtri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: urtri; with a semi-colon");
    }
}
        
- (void)test3992
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uscr without a semi-colon");
    }
}
        
- (void)test3993
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uscr; with a semi-colon");
    }
}
        
- (void)test3994
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&utdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: utdot without a semi-colon");
    }
}
        
- (void)test3995
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ã∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: utdot; with a semi-colon");
    }
}
        
- (void)test3996
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&utilde"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utilde"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: utilde without a semi-colon");
    }
}
        
- (void)test3997
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utilde;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: utilde; with a semi-colon");
    }
}
        
- (void)test3998
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&utri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: utri without a semi-colon");
    }
}
        
- (void)test3999
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: utri; with a semi-colon");
    }
}
        
- (void)test4000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&utrif"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utrif"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: utrif without a semi-colon");
    }
}
        
- (void)test4001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&utrif;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: utrif; with a semi-colon");
    }
}
        
- (void)test4002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uuarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uuarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uuarr without a semi-colon");
    }
}
        
- (void)test4003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áà"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uuarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uuarr; with a semi-colon");
    }
}
        
- (void)test4004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uuml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uuml without a semi-colon");
    }
}
        
- (void)test4005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uuml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uuml; with a semi-colon");
    }
}
        
- (void)test4006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&uwangle"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uwangle"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: uwangle without a semi-colon");
    }
}
        
- (void)test4007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&uwangle;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: uwangle; with a semi-colon");
    }
}
        
- (void)test4008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vArr without a semi-colon");
    }
}
        
- (void)test4009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vArr; with a semi-colon");
    }
}
        
- (void)test4010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vBar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vBar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vBar without a semi-colon");
    }
}
        
- (void)test4011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vBar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vBar; with a semi-colon");
    }
}
        
- (void)test4012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vBarv"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vBarv"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vBarv without a semi-colon");
    }
}
        
- (void)test4013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vBarv;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vBarv; with a semi-colon");
    }
}
        
- (void)test4014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vDash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vDash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vDash without a semi-colon");
    }
}
        
- (void)test4015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vDash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vDash; with a semi-colon");
    }
}
        
- (void)test4016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vangrt"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vangrt"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vangrt without a semi-colon");
    }
}
        
- (void)test4017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ú"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vangrt;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vangrt; with a semi-colon");
    }
}
        
- (void)test4018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varepsilon"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varepsilon"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varepsilon without a semi-colon");
    }
}
        
- (void)test4019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varepsilon;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varepsilon; with a semi-colon");
    }
}
        
- (void)test4020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varkappa"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varkappa"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varkappa without a semi-colon");
    }
}
        
- (void)test4021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œ∞"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varkappa;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varkappa; with a semi-colon");
    }
}
        
- (void)test4022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varnothing"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varnothing"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varnothing without a semi-colon");
    }
}
        
- (void)test4023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àÖ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varnothing;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varnothing; with a semi-colon");
    }
}
        
- (void)test4024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varphi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varphi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varphi without a semi-colon");
    }
}
        
- (void)test4025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varphi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varphi; with a semi-colon");
    }
}
        
- (void)test4026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varpi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varpi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varpi without a semi-colon");
    }
}
        
- (void)test4027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varpi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varpi; with a semi-colon");
    }
}
        
- (void)test4028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varpropto"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varpropto"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varpropto without a semi-colon");
    }
}
        
- (void)test4029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varpropto;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varpropto; with a semi-colon");
    }
}
        
- (void)test4030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varr without a semi-colon");
    }
}
        
- (void)test4031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Üï"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varr; with a semi-colon");
    }
}
        
- (void)test4032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varrho"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varrho"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varrho without a semi-colon");
    }
}
        
- (void)test4033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œ±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varrho;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varrho; with a semi-colon");
    }
}
        
- (void)test4034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varsigma"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsigma"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varsigma without a semi-colon");
    }
}
        
- (void)test4035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsigma;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varsigma; with a semi-colon");
    }
}
        
- (void)test4036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varsubsetneq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsubsetneq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varsubsetneq without a semi-colon");
    }
}
        
- (void)test4037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ääÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsubsetneq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varsubsetneq; with a semi-colon");
    }
}
        
- (void)test4038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varsubsetneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsubsetneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varsubsetneqq without a semi-colon");
    }
}
        
- (void)test4039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ãÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsubsetneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varsubsetneqq; with a semi-colon");
    }
}
        
- (void)test4040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varsupsetneq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsupsetneq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varsupsetneq without a semi-colon");
    }
}
        
- (void)test4041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äãÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsupsetneq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varsupsetneq; with a semi-colon");
    }
}
        
- (void)test4042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&varsupsetneqq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsupsetneqq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: varsupsetneqq without a semi-colon");
    }
}
        
- (void)test4043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´åÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&varsupsetneqq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: varsupsetneqq; with a semi-colon");
    }
}
        
- (void)test4044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vartheta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vartheta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vartheta without a semi-colon");
    }
}
        
- (void)test4045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"œë"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vartheta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vartheta; with a semi-colon");
    }
}
        
- (void)test4046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vartriangleleft"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vartriangleleft"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vartriangleleft without a semi-colon");
    }
}
        
- (void)test4047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vartriangleleft;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vartriangleleft; with a semi-colon");
    }
}
        
- (void)test4048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vartriangleright"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vartriangleright"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vartriangleright without a semi-colon");
    }
}
        
- (void)test4049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vartriangleright;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vartriangleright; with a semi-colon");
    }
}
        
- (void)test4050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vcy without a semi-colon");
    }
}
        
- (void)test4051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vcy; with a semi-colon");
    }
}
        
- (void)test4052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vdash"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vdash"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vdash without a semi-colon");
    }
}
        
- (void)test4053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vdash;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vdash; with a semi-colon");
    }
}
        
- (void)test4054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vee without a semi-colon");
    }
}
        
- (void)test4055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚à®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vee; with a semi-colon");
    }
}
        
- (void)test4056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&veebar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&veebar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: veebar without a semi-colon");
    }
}
        
- (void)test4057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&veebar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: veebar; with a semi-colon");
    }
}
        
- (void)test4058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&veeeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&veeeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: veeeq without a semi-colon");
    }
}
        
- (void)test4059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&veeeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: veeeq; with a semi-colon");
    }
}
        
- (void)test4060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vellip"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vellip"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vellip without a semi-colon");
    }
}
        
- (void)test4061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÆ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vellip;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vellip; with a semi-colon");
    }
}
        
- (void)test4062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&verbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&verbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: verbar without a semi-colon");
    }
}
        
- (void)test4063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"|"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&verbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: verbar; with a semi-colon");
    }
}
        
- (void)test4064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vert"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vert"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vert without a semi-colon");
    }
}
        
- (void)test4065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"|"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vert;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vert; with a semi-colon");
    }
}
        
- (void)test4066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vfr without a semi-colon");
    }
}
        
- (void)test4067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vfr; with a semi-colon");
    }
}
        
- (void)test4068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vltri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vltri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vltri without a semi-colon");
    }
}
        
- (void)test4069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä≤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vltri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vltri; with a semi-colon");
    }
}
        
- (void)test4070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vnsub"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vnsub"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vnsub without a semi-colon");
    }
}
        
- (void)test4071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÇ‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vnsub;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vnsub; with a semi-colon");
    }
}
        
- (void)test4072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vnsup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vnsup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vnsup without a semi-colon");
    }
}
        
- (void)test4073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äÉ‚Éí"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vnsup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vnsup; with a semi-colon");
    }
}
        
- (void)test4074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vopf without a semi-colon");
    }
}
        
- (void)test4075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùïß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vopf; with a semi-colon");
    }
}
        
- (void)test4076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vprop"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vprop"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vprop without a semi-colon");
    }
}
        
- (void)test4077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vprop;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vprop; with a semi-colon");
    }
}
        
- (void)test4078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vrtri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vrtri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vrtri without a semi-colon");
    }
}
        
- (void)test4079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ä≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vrtri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vrtri; with a semi-colon");
    }
}
        
- (void)test4080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vscr without a semi-colon");
    }
}
        
- (void)test4081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vscr; with a semi-colon");
    }
}
        
- (void)test4082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vsubnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsubnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vsubnE without a semi-colon");
    }
}
        
- (void)test4083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´ãÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsubnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vsubnE; with a semi-colon");
    }
}
        
- (void)test4084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vsubne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsubne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vsubne without a semi-colon");
    }
}
        
- (void)test4085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ääÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsubne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vsubne; with a semi-colon");
    }
}
        
- (void)test4086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vsupnE"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsupnE"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vsupnE without a semi-colon");
    }
}
        
- (void)test4087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚´åÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsupnE;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vsupnE; with a semi-colon");
    }
}
        
- (void)test4088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vsupne"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsupne"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vsupne without a semi-colon");
    }
}
        
- (void)test4089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚äãÔ∏Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vsupne;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vsupne; with a semi-colon");
    }
}
        
- (void)test4090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&vzigzag"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vzigzag"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: vzigzag without a semi-colon");
    }
}
        
- (void)test4091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚¶ö"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&vzigzag;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: vzigzag; with a semi-colon");
    }
}
        
- (void)test4092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wcirc without a semi-colon");
    }
}
        
- (void)test4093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈µ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wcirc; with a semi-colon");
    }
}
        
- (void)test4094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wedbar"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wedbar"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wedbar without a semi-colon");
    }
}
        
- (void)test4095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚©ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wedbar;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wedbar; with a semi-colon");
    }
}
        
- (void)test4096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wedge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wedge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wedge without a semi-colon");
    }
}
        
- (void)test4097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚àß"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wedge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wedge; with a semi-colon");
    }
}
        
- (void)test4098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wedgeq"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wedgeq"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wedgeq without a semi-colon");
    }
}
        
- (void)test4099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wedgeq;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wedgeq; with a semi-colon");
    }
}
        
- (void)test4100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&weierp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&weierp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: weierp without a semi-colon");
    }
}
        
- (void)test4101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&weierp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: weierp; with a semi-colon");
    }
}
        
- (void)test4102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wfr without a semi-colon");
    }
}
        
- (void)test4103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wfr; with a semi-colon");
    }
}
        
- (void)test4104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wopf without a semi-colon");
    }
}
        
- (void)test4105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wopf; with a semi-colon");
    }
}
        
- (void)test4106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wp"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wp"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wp without a semi-colon");
    }
}
        
- (void)test4107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wp;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wp; with a semi-colon");
    }
}
        
- (void)test4108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wr without a semi-colon");
    }
}
        
- (void)test4109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wr; with a semi-colon");
    }
}
        
- (void)test4110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wreath"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wreath"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wreath without a semi-colon");
    }
}
        
- (void)test4111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚âÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wreath;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wreath; with a semi-colon");
    }
}
        
- (void)test4112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&wscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: wscr without a semi-colon");
    }
}
        
- (void)test4113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&wscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: wscr; with a semi-colon");
    }
}
        
- (void)test4114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xcap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xcap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xcap without a semi-colon");
    }
}
        
- (void)test4115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÇ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xcap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xcap; with a semi-colon");
    }
}
        
- (void)test4116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xcirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xcirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xcirc without a semi-colon");
    }
}
        
- (void)test4117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚óØ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xcirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xcirc; with a semi-colon");
    }
}
        
- (void)test4118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xcup without a semi-colon");
    }
}
        
- (void)test4119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÉ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xcup; with a semi-colon");
    }
}
        
- (void)test4120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xdtri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xdtri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xdtri without a semi-colon");
    }
}
        
- (void)test4121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñΩ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xdtri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xdtri; with a semi-colon");
    }
}
        
- (void)test4122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xfr without a semi-colon");
    }
}
        
- (void)test4123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùîµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xfr; with a semi-colon");
    }
}
        
- (void)test4124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xhArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xhArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xhArr without a semi-colon");
    }
}
        
- (void)test4125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xhArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xhArr; with a semi-colon");
    }
}
        
- (void)test4126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xharr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xharr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xharr without a semi-colon");
    }
}
        
- (void)test4127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xharr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xharr; with a semi-colon");
    }
}
        
- (void)test4128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xi"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xi"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xi without a semi-colon");
    }
}
        
- (void)test4129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œæ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xi;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xi; with a semi-colon");
    }
}
        
- (void)test4130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xlArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xlArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xlArr without a semi-colon");
    }
}
        
- (void)test4131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∏"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xlArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xlArr; with a semi-colon");
    }
}
        
- (void)test4132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xlarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xlarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xlarr without a semi-colon");
    }
}
        
- (void)test4133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xlarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xlarr; with a semi-colon");
    }
}
        
- (void)test4134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xmap"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xmap"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xmap without a semi-colon");
    }
}
        
- (void)test4135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xmap;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xmap; with a semi-colon");
    }
}
        
- (void)test4136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xnis"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xnis"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xnis without a semi-colon");
    }
}
        
- (void)test4137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xnis;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xnis; with a semi-colon");
    }
}
        
- (void)test4138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xodot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xodot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xodot without a semi-colon");
    }
}
        
- (void)test4139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ä"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xodot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xodot; with a semi-colon");
    }
}
        
- (void)test4140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xopf without a semi-colon");
    }
}
        
- (void)test4141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xopf; with a semi-colon");
    }
}
        
- (void)test4142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xoplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xoplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xoplus without a semi-colon");
    }
}
        
- (void)test4143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Å"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xoplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xoplus; with a semi-colon");
    }
}
        
- (void)test4144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xotime"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xotime"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xotime without a semi-colon");
    }
}
        
- (void)test4145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xotime;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xotime; with a semi-colon");
    }
}
        
- (void)test4146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xrArr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xrArr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xrArr without a semi-colon");
    }
}
        
- (void)test4147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚üπ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xrArr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xrArr; with a semi-colon");
    }
}
        
- (void)test4148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xrarr without a semi-colon");
    }
}
        
- (void)test4149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ü∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xrarr; with a semi-colon");
    }
}
        
- (void)test4150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xscr without a semi-colon");
    }
}
        
- (void)test4151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xscr; with a semi-colon");
    }
}
        
- (void)test4152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xsqcup"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xsqcup"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xsqcup without a semi-colon");
    }
}
        
- (void)test4153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ü"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xsqcup;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xsqcup; with a semi-colon");
    }
}
        
- (void)test4154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xuplus"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xuplus"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xuplus without a semi-colon");
    }
}
        
- (void)test4155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚®Ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xuplus;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xuplus; with a semi-colon");
    }
}
        
- (void)test4156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xutri"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xutri"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xutri without a semi-colon");
    }
}
        
- (void)test4157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ñ≥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xutri;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xutri; with a semi-colon");
    }
}
        
- (void)test4158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xvee"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xvee"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xvee without a semi-colon");
    }
}
        
- (void)test4159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÅ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xvee;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xvee; with a semi-colon");
    }
}
        
- (void)test4160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&xwedge"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xwedge"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: xwedge without a semi-colon");
    }
}
        
- (void)test4161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚ãÄ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&xwedge;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: xwedge; with a semi-colon");
    }
}
        
- (void)test4162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yacute without a semi-colon");
    }
}
        
- (void)test4163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√Ω"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yacute; with a semi-colon");
    }
}
        
- (void)test4164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&yacy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yacy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: yacy without a semi-colon");
    }
}
        
- (void)test4165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—è"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yacy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yacy; with a semi-colon");
    }
}
        
- (void)test4166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ycirc"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ycirc"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ycirc without a semi-colon");
    }
}
        
- (void)test4167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ycirc;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ycirc; with a semi-colon");
    }
}
        
- (void)test4168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&ycy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ycy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: ycy without a semi-colon");
    }
}
        
- (void)test4169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&ycy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: ycy; with a semi-colon");
    }
}
        
- (void)test4170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"¬•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yen"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yen without a semi-colon");
    }
}
        
- (void)test4171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"¬•"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yen;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yen; with a semi-colon");
    }
}
        
- (void)test4172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&yfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: yfr without a semi-colon");
    }
}
        
- (void)test4173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yfr; with a semi-colon");
    }
}
        
- (void)test4174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&yicy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yicy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: yicy without a semi-colon");
    }
}
        
- (void)test4175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yicy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yicy; with a semi-colon");
    }
}
        
- (void)test4176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&yopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: yopf without a semi-colon");
    }
}
        
- (void)test4177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï™"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yopf; with a semi-colon");
    }
}
        
- (void)test4178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&yscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: yscr without a semi-colon");
    }
}
        
- (void)test4179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìé"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yscr; with a semi-colon");
    }
}
        
- (void)test4180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&yucy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yucy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: yucy without a semi-colon");
    }
}
        
- (void)test4181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"—é"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yucy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yucy; with a semi-colon");
    }
}
        
- (void)test4182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"√ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yuml"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yuml without a semi-colon");
    }
}
        
- (void)test4183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"√ø"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&yuml;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: yuml; with a semi-colon");
    }
}
        
- (void)test4184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zacute"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zacute"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zacute without a semi-colon");
    }
}
        
- (void)test4185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈∫"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zacute;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zacute; with a semi-colon");
    }
}
        
- (void)test4186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zcaron"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zcaron"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zcaron without a semi-colon");
    }
}
        
- (void)test4187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈æ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zcaron;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zcaron; with a semi-colon");
    }
}
        
- (void)test4188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zcy without a semi-colon");
    }
}
        
- (void)test4189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zcy; with a semi-colon");
    }
}
        
- (void)test4190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zdot"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zdot"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zdot without a semi-colon");
    }
}
        
- (void)test4191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"≈º"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zdot;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zdot; with a semi-colon");
    }
}
        
- (void)test4192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zeetrf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zeetrf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zeetrf without a semi-colon");
    }
}
        
- (void)test4193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Ñ®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zeetrf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zeetrf; with a semi-colon");
    }
}
        
- (void)test4194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zeta"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zeta"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zeta without a semi-colon");
    }
}
        
- (void)test4195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Œ∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zeta;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zeta; with a semi-colon");
    }
}
        
- (void)test4196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zfr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zfr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zfr without a semi-colon");
    }
}
        
- (void)test4197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùî∑"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zfr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zfr; with a semi-colon");
    }
}
        
- (void)test4198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zhcy"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zhcy"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zhcy without a semi-colon");
    }
}
        
- (void)test4199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"–∂"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zhcy;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zhcy; with a semi-colon");
    }
}
        
- (void)test4200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zigrarr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zigrarr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zigrarr without a semi-colon");
    }
}
        
- (void)test4201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚áù"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zigrarr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zigrarr; with a semi-colon");
    }
}
        
- (void)test4202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zopf"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zopf"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zopf without a semi-colon");
    }
}
        
- (void)test4203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùï´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zopf;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zopf; with a semi-colon");
    }
}
        
- (void)test4204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zscr"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zscr"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zscr without a semi-colon");
    }
}
        
- (void)test4205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ùìè"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zscr;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zscr; with a semi-colon");
    }
}
        
- (void)test4206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zwj"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zwj"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zwj without a semi-colon");
    }
}
        
- (void)test4207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äç"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zwj;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zwj; with a semi-colon");
    }
}
        
- (void)test4208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&zwnj"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zwnj"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bad named entity: zwnj without a semi-colon");
    }
}
        
- (void)test4209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"‚Äå"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&zwnj;"];
        tokenizer.state = StateNamed(state);
        XCTAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Named entity: zwnj; with a semi-colon");
    }
}

@end
