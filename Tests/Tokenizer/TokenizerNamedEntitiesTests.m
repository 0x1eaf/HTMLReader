// This file was autogenerated from Tests/html5lib/tokenizer/namedEntities.test.

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizer.h"

@interface TokenizerNamedEntitiesTests : SenTestCase

@end

@implementation TokenizerNamedEntitiesTests
        
- (void)test0
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&AElig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: AElig without a semi-colon");
}
        
- (void)test1
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&AElig;"];
    NSArray *tokens = @[@[@"Character",@"√Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: AElig; with a semi-colon");
}
        
- (void)test2
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&AMP"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: AMP without a semi-colon");
}
        
- (void)test3
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&AMP;"];
    NSArray *tokens = @[@[@"Character",@"&"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: AMP; with a semi-colon");
}
        
- (void)test4
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Aacute without a semi-colon");
}
        
- (void)test5
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aacute;"];
    NSArray *tokens = @[@[@"Character",@"√Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Aacute; with a semi-colon");
}
        
- (void)test6
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Abreve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Abreve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Abreve without a semi-colon");
}
        
- (void)test7
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Abreve;"];
    NSArray *tokens = @[@[@"Character",@"ƒÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Abreve; with a semi-colon");
}
        
- (void)test8
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Acirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Acirc without a semi-colon");
}
        
- (void)test9
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Acirc;"];
    NSArray *tokens = @[@[@"Character",@"√Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Acirc; with a semi-colon");
}
        
- (void)test10
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Acy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Acy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Acy without a semi-colon");
}
        
- (void)test11
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Acy;"];
    NSArray *tokens = @[@[@"Character",@"–ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Acy; with a semi-colon");
}
        
- (void)test12
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Afr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Afr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Afr without a semi-colon");
}
        
- (void)test13
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Afr;"];
    NSArray *tokens = @[@[@"Character",@"ùîÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Afr; with a semi-colon");
}
        
- (void)test14
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Agrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Agrave without a semi-colon");
}
        
- (void)test15
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Agrave;"];
    NSArray *tokens = @[@[@"Character",@"√Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Agrave; with a semi-colon");
}
        
- (void)test16
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Alpha"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Alpha"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Alpha without a semi-colon");
}
        
- (void)test17
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Alpha;"];
    NSArray *tokens = @[@[@"Character",@"Œë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Alpha; with a semi-colon");
}
        
- (void)test18
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Amacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Amacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Amacr without a semi-colon");
}
        
- (void)test19
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Amacr;"];
    NSArray *tokens = @[@[@"Character",@"ƒÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Amacr; with a semi-colon");
}
        
- (void)test20
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&And"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&And"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: And without a semi-colon");
}
        
- (void)test21
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&And;"];
    NSArray *tokens = @[@[@"Character",@"‚©ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: And; with a semi-colon");
}
        
- (void)test22
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Aogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Aogon without a semi-colon");
}
        
- (void)test23
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aogon;"];
    NSArray *tokens = @[@[@"Character",@"ƒÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Aogon; with a semi-colon");
}
        
- (void)test24
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Aopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Aopf without a semi-colon");
}
        
- (void)test25
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aopf;"];
    NSArray *tokens = @[@[@"Character",@"ùî∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Aopf; with a semi-colon");
}
        
- (void)test26
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ApplyFunction"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ApplyFunction"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ApplyFunction without a semi-colon");
}
        
- (void)test27
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ApplyFunction;"];
    NSArray *tokens = @[@[@"Character",@"‚Å°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ApplyFunction; with a semi-colon");
}
        
- (void)test28
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aring"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Aring without a semi-colon");
}
        
- (void)test29
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Aring;"];
    NSArray *tokens = @[@[@"Character",@"√Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Aring; with a semi-colon");
}
        
- (void)test30
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ascr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ascr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ascr without a semi-colon");
}
        
- (void)test31
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ascr;"];
    NSArray *tokens = @[@[@"Character",@"ùíú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ascr; with a semi-colon");
}
        
- (void)test32
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Assign"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Assign"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Assign without a semi-colon");
}
        
- (void)test33
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Assign;"];
    NSArray *tokens = @[@[@"Character",@"‚âî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Assign; with a semi-colon");
}
        
- (void)test34
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Atilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Atilde without a semi-colon");
}
        
- (void)test35
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Atilde;"];
    NSArray *tokens = @[@[@"Character",@"√É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Atilde; with a semi-colon");
}
        
- (void)test36
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Auml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Auml without a semi-colon");
}
        
- (void)test37
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Auml;"];
    NSArray *tokens = @[@[@"Character",@"√Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Auml; with a semi-colon");
}
        
- (void)test38
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Backslash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Backslash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Backslash without a semi-colon");
}
        
- (void)test39
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Backslash;"];
    NSArray *tokens = @[@[@"Character",@"‚àñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Backslash; with a semi-colon");
}
        
- (void)test40
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Barv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Barv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Barv without a semi-colon");
}
        
- (void)test41
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Barv;"];
    NSArray *tokens = @[@[@"Character",@"‚´ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Barv; with a semi-colon");
}
        
- (void)test42
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Barwed"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Barwed"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Barwed without a semi-colon");
}
        
- (void)test43
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Barwed;"];
    NSArray *tokens = @[@[@"Character",@"‚åÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Barwed; with a semi-colon");
}
        
- (void)test44
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Bcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Bcy without a semi-colon");
}
        
- (void)test45
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bcy;"];
    NSArray *tokens = @[@[@"Character",@"–ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Bcy; with a semi-colon");
}
        
- (void)test46
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Because"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Because"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Because without a semi-colon");
}
        
- (void)test47
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Because;"];
    NSArray *tokens = @[@[@"Character",@"‚àµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Because; with a semi-colon");
}
        
- (void)test48
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bernoullis"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Bernoullis"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Bernoullis without a semi-colon");
}
        
- (void)test49
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bernoullis;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Bernoullis; with a semi-colon");
}
        
- (void)test50
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Beta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Beta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Beta without a semi-colon");
}
        
- (void)test51
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Beta;"];
    NSArray *tokens = @[@[@"Character",@"Œí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Beta; with a semi-colon");
}
        
- (void)test52
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Bfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Bfr without a semi-colon");
}
        
- (void)test53
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Bfr; with a semi-colon");
}
        
- (void)test54
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Bopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Bopf without a semi-colon");
}
        
- (void)test55
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bopf;"];
    NSArray *tokens = @[@[@"Character",@"ùîπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Bopf; with a semi-colon");
}
        
- (void)test56
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Breve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Breve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Breve without a semi-colon");
}
        
- (void)test57
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Breve;"];
    NSArray *tokens = @[@[@"Character",@"Àò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Breve; with a semi-colon");
}
        
- (void)test58
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Bscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Bscr without a semi-colon");
}
        
- (void)test59
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Bscr; with a semi-colon");
}
        
- (void)test60
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bumpeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Bumpeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Bumpeq without a semi-colon");
}
        
- (void)test61
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Bumpeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Bumpeq; with a semi-colon");
}
        
- (void)test62
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CHcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CHcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CHcy without a semi-colon");
}
        
- (void)test63
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CHcy;"];
    NSArray *tokens = @[@[@"Character",@"–ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CHcy; with a semi-colon");
}
        
- (void)test64
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&COPY"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: COPY without a semi-colon");
}
        
- (void)test65
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&COPY;"];
    NSArray *tokens = @[@[@"Character",@"¬©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: COPY; with a semi-colon");
}
        
- (void)test66
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cacute without a semi-colon");
}
        
- (void)test67
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cacute;"];
    NSArray *tokens = @[@[@"Character",@"ƒÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cacute; with a semi-colon");
}
        
- (void)test68
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cap without a semi-colon");
}
        
- (void)test69
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cap;"];
    NSArray *tokens = @[@[@"Character",@"‚ãí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cap; with a semi-colon");
}
        
- (void)test70
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CapitalDifferentialD"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CapitalDifferentialD"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CapitalDifferentialD without a semi-colon");
}
        
- (void)test71
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CapitalDifferentialD;"];
    NSArray *tokens = @[@[@"Character",@"‚ÖÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CapitalDifferentialD; with a semi-colon");
}
        
- (void)test72
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cayleys"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cayleys"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cayleys without a semi-colon");
}
        
- (void)test73
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cayleys;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cayleys; with a semi-colon");
}
        
- (void)test74
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ccaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ccaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ccaron without a semi-colon");
}
        
- (void)test75
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ccaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ccaron; with a semi-colon");
}
        
- (void)test76
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ccedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ccedil without a semi-colon");
}
        
- (void)test77
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ccedil;"];
    NSArray *tokens = @[@[@"Character",@"√á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ccedil; with a semi-colon");
}
        
- (void)test78
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ccirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ccirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ccirc without a semi-colon");
}
        
- (void)test79
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ccirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ccirc; with a semi-colon");
}
        
- (void)test80
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cconint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cconint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cconint without a semi-colon");
}
        
- (void)test81
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cconint;"];
    NSArray *tokens = @[@[@"Character",@"‚à∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cconint; with a semi-colon");
}
        
- (void)test82
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cdot without a semi-colon");
}
        
- (void)test83
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cdot;"];
    NSArray *tokens = @[@[@"Character",@"ƒä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cdot; with a semi-colon");
}
        
- (void)test84
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cedilla"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cedilla"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cedilla without a semi-colon");
}
        
- (void)test85
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cedilla;"];
    NSArray *tokens = @[@[@"Character",@"¬∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cedilla; with a semi-colon");
}
        
- (void)test86
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CenterDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CenterDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CenterDot without a semi-colon");
}
        
- (void)test87
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CenterDot;"];
    NSArray *tokens = @[@[@"Character",@"¬∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CenterDot; with a semi-colon");
}
        
- (void)test88
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cfr without a semi-colon");
}
        
- (void)test89
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cfr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cfr; with a semi-colon");
}
        
- (void)test90
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Chi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Chi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Chi without a semi-colon");
}
        
- (void)test91
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Chi;"];
    NSArray *tokens = @[@[@"Character",@"Œß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Chi; with a semi-colon");
}
        
- (void)test92
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CircleDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CircleDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CircleDot without a semi-colon");
}
        
- (void)test93
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CircleDot;"];
    NSArray *tokens = @[@[@"Character",@"‚äô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CircleDot; with a semi-colon");
}
        
- (void)test94
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CircleMinus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CircleMinus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CircleMinus without a semi-colon");
}
        
- (void)test95
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CircleMinus;"];
    NSArray *tokens = @[@[@"Character",@"‚äñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CircleMinus; with a semi-colon");
}
        
- (void)test96
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CirclePlus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CirclePlus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CirclePlus without a semi-colon");
}
        
- (void)test97
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CirclePlus;"];
    NSArray *tokens = @[@[@"Character",@"‚äï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CirclePlus; with a semi-colon");
}
        
- (void)test98
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CircleTimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CircleTimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CircleTimes without a semi-colon");
}
        
- (void)test99
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CircleTimes;"];
    NSArray *tokens = @[@[@"Character",@"‚äó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CircleTimes; with a semi-colon");
}
        
- (void)test100
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ClockwiseContourIntegral"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ClockwiseContourIntegral"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ClockwiseContourIntegral without a semi-colon");
}
        
- (void)test101
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ClockwiseContourIntegral;"];
    NSArray *tokens = @[@[@"Character",@"‚à≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ClockwiseContourIntegral; with a semi-colon");
}
        
- (void)test102
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CloseCurlyDoubleQuote"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CloseCurlyDoubleQuote"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CloseCurlyDoubleQuote without a semi-colon");
}
        
- (void)test103
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CloseCurlyDoubleQuote;"];
    NSArray *tokens = @[@[@"Character",@"‚Äù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CloseCurlyDoubleQuote; with a semi-colon");
}
        
- (void)test104
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CloseCurlyQuote"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CloseCurlyQuote"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CloseCurlyQuote without a semi-colon");
}
        
- (void)test105
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CloseCurlyQuote;"];
    NSArray *tokens = @[@[@"Character",@"‚Äô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CloseCurlyQuote; with a semi-colon");
}
        
- (void)test106
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Colon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Colon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Colon without a semi-colon");
}
        
- (void)test107
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Colon;"];
    NSArray *tokens = @[@[@"Character",@"‚à∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Colon; with a semi-colon");
}
        
- (void)test108
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Colone"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Colone"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Colone without a semi-colon");
}
        
- (void)test109
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Colone;"];
    NSArray *tokens = @[@[@"Character",@"‚©¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Colone; with a semi-colon");
}
        
- (void)test110
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Congruent"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Congruent"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Congruent without a semi-colon");
}
        
- (void)test111
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Congruent;"];
    NSArray *tokens = @[@[@"Character",@"‚â°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Congruent; with a semi-colon");
}
        
- (void)test112
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Conint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Conint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Conint without a semi-colon");
}
        
- (void)test113
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Conint;"];
    NSArray *tokens = @[@[@"Character",@"‚àØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Conint; with a semi-colon");
}
        
- (void)test114
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ContourIntegral"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ContourIntegral"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ContourIntegral without a semi-colon");
}
        
- (void)test115
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ContourIntegral;"];
    NSArray *tokens = @[@[@"Character",@"‚àÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ContourIntegral; with a semi-colon");
}
        
- (void)test116
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Copf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Copf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Copf without a semi-colon");
}
        
- (void)test117
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Copf;"];
    NSArray *tokens = @[@[@"Character",@"‚ÑÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Copf; with a semi-colon");
}
        
- (void)test118
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Coproduct"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Coproduct"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Coproduct without a semi-colon");
}
        
- (void)test119
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Coproduct;"];
    NSArray *tokens = @[@[@"Character",@"‚àê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Coproduct; with a semi-colon");
}
        
- (void)test120
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CounterClockwiseContourIntegral"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CounterClockwiseContourIntegral"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CounterClockwiseContourIntegral without a semi-colon");
}
        
- (void)test121
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CounterClockwiseContourIntegral;"];
    NSArray *tokens = @[@[@"Character",@"‚à≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CounterClockwiseContourIntegral; with a semi-colon");
}
        
- (void)test122
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cross"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cross"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cross without a semi-colon");
}
        
- (void)test123
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cross;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cross; with a semi-colon");
}
        
- (void)test124
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cscr without a semi-colon");
}
        
- (void)test125
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cscr; with a semi-colon");
}
        
- (void)test126
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Cup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Cup without a semi-colon");
}
        
- (void)test127
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Cup;"];
    NSArray *tokens = @[@[@"Character",@"‚ãì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Cup; with a semi-colon");
}
        
- (void)test128
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CupCap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&CupCap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: CupCap without a semi-colon");
}
        
- (void)test129
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&CupCap;"];
    NSArray *tokens = @[@[@"Character",@"‚âç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: CupCap; with a semi-colon");
}
        
- (void)test130
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DD"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DD"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DD without a semi-colon");
}
        
- (void)test131
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DD;"];
    NSArray *tokens = @[@[@"Character",@"‚ÖÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DD; with a semi-colon");
}
        
- (void)test132
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DDotrahd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DDotrahd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DDotrahd without a semi-colon");
}
        
- (void)test133
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DDotrahd;"];
    NSArray *tokens = @[@[@"Character",@"‚§ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DDotrahd; with a semi-colon");
}
        
- (void)test134
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DJcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DJcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DJcy without a semi-colon");
}
        
- (void)test135
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DJcy;"];
    NSArray *tokens = @[@[@"Character",@"–Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DJcy; with a semi-colon");
}
        
- (void)test136
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DScy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DScy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DScy without a semi-colon");
}
        
- (void)test137
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DScy;"];
    NSArray *tokens = @[@[@"Character",@"–Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DScy; with a semi-colon");
}
        
- (void)test138
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DZcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DZcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DZcy without a semi-colon");
}
        
- (void)test139
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DZcy;"];
    NSArray *tokens = @[@[@"Character",@"–è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DZcy; with a semi-colon");
}
        
- (void)test140
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dagger"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dagger"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dagger without a semi-colon");
}
        
- (void)test141
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dagger;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dagger; with a semi-colon");
}
        
- (void)test142
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Darr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Darr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Darr without a semi-colon");
}
        
- (void)test143
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Darr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Darr; with a semi-colon");
}
        
- (void)test144
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dashv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dashv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dashv without a semi-colon");
}
        
- (void)test145
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dashv;"];
    NSArray *tokens = @[@[@"Character",@"‚´§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dashv; with a semi-colon");
}
        
- (void)test146
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dcaron without a semi-colon");
}
        
- (void)test147
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dcaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dcaron; with a semi-colon");
}
        
- (void)test148
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dcy without a semi-colon");
}
        
- (void)test149
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dcy;"];
    NSArray *tokens = @[@[@"Character",@"–î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dcy; with a semi-colon");
}
        
- (void)test150
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Del"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Del"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Del without a semi-colon");
}
        
- (void)test151
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Del;"];
    NSArray *tokens = @[@[@"Character",@"‚àá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Del; with a semi-colon");
}
        
- (void)test152
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Delta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Delta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Delta without a semi-colon");
}
        
- (void)test153
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Delta;"];
    NSArray *tokens = @[@[@"Character",@"Œî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Delta; with a semi-colon");
}
        
- (void)test154
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dfr without a semi-colon");
}
        
- (void)test155
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dfr; with a semi-colon");
}
        
- (void)test156
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalAcute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DiacriticalAcute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DiacriticalAcute without a semi-colon");
}
        
- (void)test157
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalAcute;"];
    NSArray *tokens = @[@[@"Character",@"¬¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DiacriticalAcute; with a semi-colon");
}
        
- (void)test158
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DiacriticalDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DiacriticalDot without a semi-colon");
}
        
- (void)test159
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalDot;"];
    NSArray *tokens = @[@[@"Character",@"Àô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DiacriticalDot; with a semi-colon");
}
        
- (void)test160
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalDoubleAcute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DiacriticalDoubleAcute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DiacriticalDoubleAcute without a semi-colon");
}
        
- (void)test161
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalDoubleAcute;"];
    NSArray *tokens = @[@[@"Character",@"Àù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DiacriticalDoubleAcute; with a semi-colon");
}
        
- (void)test162
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalGrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DiacriticalGrave"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DiacriticalGrave without a semi-colon");
}
        
- (void)test163
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalGrave;"];
    NSArray *tokens = @[@[@"Character",@"`"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DiacriticalGrave; with a semi-colon");
}
        
- (void)test164
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DiacriticalTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DiacriticalTilde without a semi-colon");
}
        
- (void)test165
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DiacriticalTilde;"];
    NSArray *tokens = @[@[@"Character",@"Àú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DiacriticalTilde; with a semi-colon");
}
        
- (void)test166
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Diamond"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Diamond"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Diamond without a semi-colon");
}
        
- (void)test167
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Diamond;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Diamond; with a semi-colon");
}
        
- (void)test168
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DifferentialD"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DifferentialD"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DifferentialD without a semi-colon");
}
        
- (void)test169
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DifferentialD;"];
    NSArray *tokens = @[@[@"Character",@"‚ÖÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DifferentialD; with a semi-colon");
}
        
- (void)test170
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dopf without a semi-colon");
}
        
- (void)test171
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dopf;"];
    NSArray *tokens = @[@[@"Character",@"ùîª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dopf; with a semi-colon");
}
        
- (void)test172
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dot without a semi-colon");
}
        
- (void)test173
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dot;"];
    NSArray *tokens = @[@[@"Character",@"¬®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dot; with a semi-colon");
}
        
- (void)test174
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DotDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DotDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DotDot without a semi-colon");
}
        
- (void)test175
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DotDot;"];
    NSArray *tokens = @[@[@"Character",@"‚Éú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DotDot; with a semi-colon");
}
        
- (void)test176
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DotEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DotEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DotEqual without a semi-colon");
}
        
- (void)test177
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DotEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DotEqual; with a semi-colon");
}
        
- (void)test178
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleContourIntegral"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleContourIntegral"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleContourIntegral without a semi-colon");
}
        
- (void)test179
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleContourIntegral;"];
    NSArray *tokens = @[@[@"Character",@"‚àØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleContourIntegral; with a semi-colon");
}
        
- (void)test180
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleDot without a semi-colon");
}
        
- (void)test181
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleDot;"];
    NSArray *tokens = @[@[@"Character",@"¬®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleDot; with a semi-colon");
}
        
- (void)test182
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleDownArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleDownArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleDownArrow without a semi-colon");
}
        
- (void)test183
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleDownArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleDownArrow; with a semi-colon");
}
        
- (void)test184
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleLeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleLeftArrow without a semi-colon");
}
        
- (void)test185
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleLeftArrow; with a semi-colon");
}
        
- (void)test186
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLeftRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleLeftRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleLeftRightArrow without a semi-colon");
}
        
- (void)test187
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLeftRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleLeftRightArrow; with a semi-colon");
}
        
- (void)test188
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLeftTee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleLeftTee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleLeftTee without a semi-colon");
}
        
- (void)test189
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLeftTee;"];
    NSArray *tokens = @[@[@"Character",@"‚´§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleLeftTee; with a semi-colon");
}
        
- (void)test190
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLongLeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleLongLeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleLongLeftArrow without a semi-colon");
}
        
- (void)test191
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLongLeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleLongLeftArrow; with a semi-colon");
}
        
- (void)test192
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLongLeftRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleLongLeftRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleLongLeftRightArrow without a semi-colon");
}
        
- (void)test193
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLongLeftRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleLongLeftRightArrow; with a semi-colon");
}
        
- (void)test194
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLongRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleLongRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleLongRightArrow without a semi-colon");
}
        
- (void)test195
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleLongRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚üπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleLongRightArrow; with a semi-colon");
}
        
- (void)test196
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleRightArrow without a semi-colon");
}
        
- (void)test197
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleRightArrow; with a semi-colon");
}
        
- (void)test198
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleRightTee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleRightTee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleRightTee without a semi-colon");
}
        
- (void)test199
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleRightTee;"];
    NSArray *tokens = @[@[@"Character",@"‚ä®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleRightTee; with a semi-colon");
}
        
- (void)test200
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleUpArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleUpArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleUpArrow without a semi-colon");
}
        
- (void)test201
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleUpArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleUpArrow; with a semi-colon");
}
        
- (void)test202
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleUpDownArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleUpDownArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleUpDownArrow without a semi-colon");
}
        
- (void)test203
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleUpDownArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleUpDownArrow; with a semi-colon");
}
        
- (void)test204
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleVerticalBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DoubleVerticalBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DoubleVerticalBar without a semi-colon");
}
        
- (void)test205
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DoubleVerticalBar;"];
    NSArray *tokens = @[@[@"Character",@"‚à•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DoubleVerticalBar; with a semi-colon");
}
        
- (void)test206
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownArrow without a semi-colon");
}
        
- (void)test207
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownArrow; with a semi-colon");
}
        
- (void)test208
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownArrowBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownArrowBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownArrowBar without a semi-colon");
}
        
- (void)test209
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownArrowBar;"];
    NSArray *tokens = @[@[@"Character",@"‚§ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownArrowBar; with a semi-colon");
}
        
- (void)test210
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownArrowUpArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownArrowUpArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownArrowUpArrow without a semi-colon");
}
        
- (void)test211
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownArrowUpArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownArrowUpArrow; with a semi-colon");
}
        
- (void)test212
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownBreve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownBreve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownBreve without a semi-colon");
}
        
- (void)test213
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownBreve;"];
    NSArray *tokens = @[@[@"Character",@"Ãë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownBreve; with a semi-colon");
}
        
- (void)test214
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftRightVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownLeftRightVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownLeftRightVector without a semi-colon");
}
        
- (void)test215
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftRightVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownLeftRightVector; with a semi-colon");
}
        
- (void)test216
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownLeftTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownLeftTeeVector without a semi-colon");
}
        
- (void)test217
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownLeftTeeVector; with a semi-colon");
}
        
- (void)test218
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownLeftVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownLeftVector without a semi-colon");
}
        
- (void)test219
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftVector;"];
    NSArray *tokens = @[@[@"Character",@"‚ÜΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownLeftVector; with a semi-colon");
}
        
- (void)test220
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownLeftVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownLeftVectorBar without a semi-colon");
}
        
- (void)test221
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownLeftVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownLeftVectorBar; with a semi-colon");
}
        
- (void)test222
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownRightTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownRightTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownRightTeeVector without a semi-colon");
}
        
- (void)test223
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownRightTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownRightTeeVector; with a semi-colon");
}
        
- (void)test224
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownRightVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownRightVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownRightVector without a semi-colon");
}
        
- (void)test225
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownRightVector;"];
    NSArray *tokens = @[@[@"Character",@"‚áÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownRightVector; with a semi-colon");
}
        
- (void)test226
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownRightVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownRightVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownRightVectorBar without a semi-colon");
}
        
- (void)test227
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownRightVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownRightVectorBar; with a semi-colon");
}
        
- (void)test228
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownTee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownTee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownTee without a semi-colon");
}
        
- (void)test229
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownTee;"];
    NSArray *tokens = @[@[@"Character",@"‚ä§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownTee; with a semi-colon");
}
        
- (void)test230
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownTeeArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&DownTeeArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: DownTeeArrow without a semi-colon");
}
        
- (void)test231
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&DownTeeArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: DownTeeArrow; with a semi-colon");
}
        
- (void)test232
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Downarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Downarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Downarrow without a semi-colon");
}
        
- (void)test233
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Downarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Downarrow; with a semi-colon");
}
        
- (void)test234
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dscr without a semi-colon");
}
        
- (void)test235
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dscr; with a semi-colon");
}
        
- (void)test236
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Dstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Dstrok without a semi-colon");
}
        
- (void)test237
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Dstrok;"];
    NSArray *tokens = @[@[@"Character",@"ƒê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Dstrok; with a semi-colon");
}
        
- (void)test238
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ENG"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ENG"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ENG without a semi-colon");
}
        
- (void)test239
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ENG;"];
    NSArray *tokens = @[@[@"Character",@"≈ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ENG; with a semi-colon");
}
        
- (void)test240
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ETH"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ETH without a semi-colon");
}
        
- (void)test241
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ETH;"];
    NSArray *tokens = @[@[@"Character",@"√ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ETH; with a semi-colon");
}
        
- (void)test242
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Eacute without a semi-colon");
}
        
- (void)test243
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eacute;"];
    NSArray *tokens = @[@[@"Character",@"√â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Eacute; with a semi-colon");
}
        
- (void)test244
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ecaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ecaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ecaron without a semi-colon");
}
        
- (void)test245
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ecaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ecaron; with a semi-colon");
}
        
- (void)test246
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ecirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ecirc without a semi-colon");
}
        
- (void)test247
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ecirc;"];
    NSArray *tokens = @[@[@"Character",@"√ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ecirc; with a semi-colon");
}
        
- (void)test248
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ecy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ecy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ecy without a semi-colon");
}
        
- (void)test249
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ecy;"];
    NSArray *tokens = @[@[@"Character",@"–≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ecy; with a semi-colon");
}
        
- (void)test250
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Edot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Edot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Edot without a semi-colon");
}
        
- (void)test251
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Edot;"];
    NSArray *tokens = @[@[@"Character",@"ƒñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Edot; with a semi-colon");
}
        
- (void)test252
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Efr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Efr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Efr without a semi-colon");
}
        
- (void)test253
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Efr;"];
    NSArray *tokens = @[@[@"Character",@"ùîà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Efr; with a semi-colon");
}
        
- (void)test254
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Egrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Egrave without a semi-colon");
}
        
- (void)test255
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Egrave;"];
    NSArray *tokens = @[@[@"Character",@"√à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Egrave; with a semi-colon");
}
        
- (void)test256
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Element"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Element"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Element without a semi-colon");
}
        
- (void)test257
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Element;"];
    NSArray *tokens = @[@[@"Character",@"‚àà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Element; with a semi-colon");
}
        
- (void)test258
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Emacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Emacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Emacr without a semi-colon");
}
        
- (void)test259
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Emacr;"];
    NSArray *tokens = @[@[@"Character",@"ƒí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Emacr; with a semi-colon");
}
        
- (void)test260
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&EmptySmallSquare"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&EmptySmallSquare"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: EmptySmallSquare without a semi-colon");
}
        
- (void)test261
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&EmptySmallSquare;"];
    NSArray *tokens = @[@[@"Character",@"‚óª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: EmptySmallSquare; with a semi-colon");
}
        
- (void)test262
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&EmptyVerySmallSquare"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&EmptyVerySmallSquare"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: EmptyVerySmallSquare without a semi-colon");
}
        
- (void)test263
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&EmptyVerySmallSquare;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: EmptyVerySmallSquare; with a semi-colon");
}
        
- (void)test264
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Eogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Eogon without a semi-colon");
}
        
- (void)test265
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eogon;"];
    NSArray *tokens = @[@[@"Character",@"ƒò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Eogon; with a semi-colon");
}
        
- (void)test266
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Eopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Eopf without a semi-colon");
}
        
- (void)test267
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eopf;"];
    NSArray *tokens = @[@[@"Character",@"ùîº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Eopf; with a semi-colon");
}
        
- (void)test268
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Epsilon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Epsilon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Epsilon without a semi-colon");
}
        
- (void)test269
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Epsilon;"];
    NSArray *tokens = @[@[@"Character",@"Œï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Epsilon; with a semi-colon");
}
        
- (void)test270
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Equal"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Equal"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Equal without a semi-colon");
}
        
- (void)test271
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Equal;"];
    NSArray *tokens = @[@[@"Character",@"‚©µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Equal; with a semi-colon");
}
        
- (void)test272
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&EqualTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&EqualTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: EqualTilde without a semi-colon");
}
        
- (void)test273
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&EqualTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: EqualTilde; with a semi-colon");
}
        
- (void)test274
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Equilibrium"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Equilibrium"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Equilibrium without a semi-colon");
}
        
- (void)test275
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Equilibrium;"];
    NSArray *tokens = @[@[@"Character",@"‚áå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Equilibrium; with a semi-colon");
}
        
- (void)test276
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Escr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Escr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Escr without a semi-colon");
}
        
- (void)test277
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Escr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Escr; with a semi-colon");
}
        
- (void)test278
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Esim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Esim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Esim without a semi-colon");
}
        
- (void)test279
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Esim;"];
    NSArray *tokens = @[@[@"Character",@"‚©≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Esim; with a semi-colon");
}
        
- (void)test280
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Eta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Eta without a semi-colon");
}
        
- (void)test281
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Eta;"];
    NSArray *tokens = @[@[@"Character",@"Œó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Eta; with a semi-colon");
}
        
- (void)test282
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Euml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Euml without a semi-colon");
}
        
- (void)test283
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Euml;"];
    NSArray *tokens = @[@[@"Character",@"√ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Euml; with a semi-colon");
}
        
- (void)test284
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Exists"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Exists"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Exists without a semi-colon");
}
        
- (void)test285
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Exists;"];
    NSArray *tokens = @[@[@"Character",@"‚àÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Exists; with a semi-colon");
}
        
- (void)test286
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ExponentialE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ExponentialE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ExponentialE without a semi-colon");
}
        
- (void)test287
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ExponentialE;"];
    NSArray *tokens = @[@[@"Character",@"‚Öá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ExponentialE; with a semi-colon");
}
        
- (void)test288
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Fcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Fcy without a semi-colon");
}
        
- (void)test289
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fcy;"];
    NSArray *tokens = @[@[@"Character",@"–§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Fcy; with a semi-colon");
}
        
- (void)test290
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ffr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ffr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ffr without a semi-colon");
}
        
- (void)test291
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ffr;"];
    NSArray *tokens = @[@[@"Character",@"ùîâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ffr; with a semi-colon");
}
        
- (void)test292
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&FilledSmallSquare"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&FilledSmallSquare"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: FilledSmallSquare without a semi-colon");
}
        
- (void)test293
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&FilledSmallSquare;"];
    NSArray *tokens = @[@[@"Character",@"‚óº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: FilledSmallSquare; with a semi-colon");
}
        
- (void)test294
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&FilledVerySmallSquare"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&FilledVerySmallSquare"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: FilledVerySmallSquare without a semi-colon");
}
        
- (void)test295
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&FilledVerySmallSquare;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: FilledVerySmallSquare; with a semi-colon");
}
        
- (void)test296
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Fopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Fopf without a semi-colon");
}
        
- (void)test297
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fopf;"];
    NSArray *tokens = @[@[@"Character",@"ùîΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Fopf; with a semi-colon");
}
        
- (void)test298
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ForAll"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ForAll"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ForAll without a semi-colon");
}
        
- (void)test299
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ForAll;"];
    NSArray *tokens = @[@[@"Character",@"‚àÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ForAll; with a semi-colon");
}
        
- (void)test300
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fouriertrf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Fouriertrf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Fouriertrf without a semi-colon");
}
        
- (void)test301
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fouriertrf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Fouriertrf; with a semi-colon");
}
        
- (void)test302
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Fscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Fscr without a semi-colon");
}
        
- (void)test303
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Fscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Fscr; with a semi-colon");
}
        
- (void)test304
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GJcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GJcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GJcy without a semi-colon");
}
        
- (void)test305
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GJcy;"];
    NSArray *tokens = @[@[@"Character",@"–É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GJcy; with a semi-colon");
}
        
- (void)test306
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GT"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@">"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GT without a semi-colon");
}
        
- (void)test307
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GT;"];
    NSArray *tokens = @[@[@"Character",@">"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GT; with a semi-colon");
}
        
- (void)test308
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gamma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gamma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gamma without a semi-colon");
}
        
- (void)test309
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gamma;"];
    NSArray *tokens = @[@[@"Character",@"Œì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gamma; with a semi-colon");
}
        
- (void)test310
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gammad"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gammad"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gammad without a semi-colon");
}
        
- (void)test311
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gammad;"];
    NSArray *tokens = @[@[@"Character",@"œú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gammad; with a semi-colon");
}
        
- (void)test312
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gbreve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gbreve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gbreve without a semi-colon");
}
        
- (void)test313
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gbreve;"];
    NSArray *tokens = @[@[@"Character",@"ƒû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gbreve; with a semi-colon");
}
        
- (void)test314
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gcedil without a semi-colon");
}
        
- (void)test315
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gcedil;"];
    NSArray *tokens = @[@[@"Character",@"ƒ¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gcedil; with a semi-colon");
}
        
- (void)test316
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gcirc without a semi-colon");
}
        
- (void)test317
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gcirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gcirc; with a semi-colon");
}
        
- (void)test318
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gcy without a semi-colon");
}
        
- (void)test319
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gcy;"];
    NSArray *tokens = @[@[@"Character",@"–ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gcy; with a semi-colon");
}
        
- (void)test320
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gdot without a semi-colon");
}
        
- (void)test321
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gdot;"];
    NSArray *tokens = @[@[@"Character",@"ƒ†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gdot; with a semi-colon");
}
        
- (void)test322
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gfr without a semi-colon");
}
        
- (void)test323
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gfr; with a semi-colon");
}
        
- (void)test324
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gg without a semi-colon");
}
        
- (void)test325
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gg;"];
    NSArray *tokens = @[@[@"Character",@"‚ãô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gg; with a semi-colon");
}
        
- (void)test326
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gopf without a semi-colon");
}
        
- (void)test327
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gopf;"];
    NSArray *tokens = @[@[@"Character",@"ùîæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gopf; with a semi-colon");
}
        
- (void)test328
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GreaterEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GreaterEqual without a semi-colon");
}
        
- (void)test329
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚â•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GreaterEqual; with a semi-colon");
}
        
- (void)test330
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterEqualLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GreaterEqualLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GreaterEqualLess without a semi-colon");
}
        
- (void)test331
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterEqualLess;"];
    NSArray *tokens = @[@[@"Character",@"‚ãõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GreaterEqualLess; with a semi-colon");
}
        
- (void)test332
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterFullEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GreaterFullEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GreaterFullEqual without a semi-colon");
}
        
- (void)test333
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterFullEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GreaterFullEqual; with a semi-colon");
}
        
- (void)test334
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GreaterGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GreaterGreater without a semi-colon");
}
        
- (void)test335
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚™¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GreaterGreater; with a semi-colon");
}
        
- (void)test336
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GreaterLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GreaterLess without a semi-colon");
}
        
- (void)test337
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterLess;"];
    NSArray *tokens = @[@[@"Character",@"‚â∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GreaterLess; with a semi-colon");
}
        
- (void)test338
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GreaterSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GreaterSlantEqual without a semi-colon");
}
        
- (void)test339
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚©æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GreaterSlantEqual; with a semi-colon");
}
        
- (void)test340
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&GreaterTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: GreaterTilde without a semi-colon");
}
        
- (void)test341
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&GreaterTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚â≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: GreaterTilde; with a semi-colon");
}
        
- (void)test342
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gscr without a semi-colon");
}
        
- (void)test343
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gscr; with a semi-colon");
}
        
- (void)test344
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Gt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Gt without a semi-colon");
}
        
- (void)test345
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Gt;"];
    NSArray *tokens = @[@[@"Character",@"‚â´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Gt; with a semi-colon");
}
        
- (void)test346
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HARDcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&HARDcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: HARDcy without a semi-colon");
}
        
- (void)test347
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HARDcy;"];
    NSArray *tokens = @[@[@"Character",@"–™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: HARDcy; with a semi-colon");
}
        
- (void)test348
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hacek"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Hacek"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Hacek without a semi-colon");
}
        
- (void)test349
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hacek;"];
    NSArray *tokens = @[@[@"Character",@"Àá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Hacek; with a semi-colon");
}
        
- (void)test350
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hat"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Hat"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Hat without a semi-colon");
}
        
- (void)test351
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hat;"];
    NSArray *tokens = @[@[@"Character",@"^"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Hat; with a semi-colon");
}
        
- (void)test352
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Hcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Hcirc without a semi-colon");
}
        
- (void)test353
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hcirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒ§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Hcirc; with a semi-colon");
}
        
- (void)test354
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Hfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Hfr without a semi-colon");
}
        
- (void)test355
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hfr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Hfr; with a semi-colon");
}
        
- (void)test356
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HilbertSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&HilbertSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: HilbertSpace without a semi-colon");
}
        
- (void)test357
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HilbertSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: HilbertSpace; with a semi-colon");
}
        
- (void)test358
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Hopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Hopf without a semi-colon");
}
        
- (void)test359
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hopf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Hopf; with a semi-colon");
}
        
- (void)test360
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HorizontalLine"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&HorizontalLine"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: HorizontalLine without a semi-colon");
}
        
- (void)test361
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HorizontalLine;"];
    NSArray *tokens = @[@[@"Character",@"‚îÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: HorizontalLine; with a semi-colon");
}
        
- (void)test362
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Hscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Hscr without a semi-colon");
}
        
- (void)test363
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Hscr; with a semi-colon");
}
        
- (void)test364
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Hstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Hstrok without a semi-colon");
}
        
- (void)test365
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Hstrok;"];
    NSArray *tokens = @[@[@"Character",@"ƒ¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Hstrok; with a semi-colon");
}
        
- (void)test366
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HumpDownHump"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&HumpDownHump"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: HumpDownHump without a semi-colon");
}
        
- (void)test367
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HumpDownHump;"];
    NSArray *tokens = @[@[@"Character",@"‚âé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: HumpDownHump; with a semi-colon");
}
        
- (void)test368
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HumpEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&HumpEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: HumpEqual without a semi-colon");
}
        
- (void)test369
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&HumpEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: HumpEqual; with a semi-colon");
}
        
- (void)test370
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&IEcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&IEcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: IEcy without a semi-colon");
}
        
- (void)test371
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&IEcy;"];
    NSArray *tokens = @[@[@"Character",@"–ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: IEcy; with a semi-colon");
}
        
- (void)test372
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&IJlig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&IJlig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: IJlig without a semi-colon");
}
        
- (void)test373
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&IJlig;"];
    NSArray *tokens = @[@[@"Character",@"ƒ≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: IJlig; with a semi-colon");
}
        
- (void)test374
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&IOcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&IOcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: IOcy without a semi-colon");
}
        
- (void)test375
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&IOcy;"];
    NSArray *tokens = @[@[@"Character",@"–Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: IOcy; with a semi-colon");
}
        
- (void)test376
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iacute without a semi-colon");
}
        
- (void)test377
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iacute;"];
    NSArray *tokens = @[@[@"Character",@"√ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iacute; with a semi-colon");
}
        
- (void)test378
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Icirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Icirc without a semi-colon");
}
        
- (void)test379
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Icirc;"];
    NSArray *tokens = @[@[@"Character",@"√é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Icirc; with a semi-colon");
}
        
- (void)test380
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Icy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Icy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Icy without a semi-colon");
}
        
- (void)test381
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Icy;"];
    NSArray *tokens = @[@[@"Character",@"–ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Icy; with a semi-colon");
}
        
- (void)test382
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Idot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Idot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Idot without a semi-colon");
}
        
- (void)test383
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Idot;"];
    NSArray *tokens = @[@[@"Character",@"ƒ∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Idot; with a semi-colon");
}
        
- (void)test384
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ifr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ifr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ifr without a semi-colon");
}
        
- (void)test385
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ifr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ifr; with a semi-colon");
}
        
- (void)test386
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Igrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Igrave without a semi-colon");
}
        
- (void)test387
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Igrave;"];
    NSArray *tokens = @[@[@"Character",@"√å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Igrave; with a semi-colon");
}
        
- (void)test388
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Im"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Im"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Im without a semi-colon");
}
        
- (void)test389
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Im;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Im; with a semi-colon");
}
        
- (void)test390
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Imacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Imacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Imacr without a semi-colon");
}
        
- (void)test391
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Imacr;"];
    NSArray *tokens = @[@[@"Character",@"ƒ™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Imacr; with a semi-colon");
}
        
- (void)test392
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ImaginaryI"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ImaginaryI"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ImaginaryI without a semi-colon");
}
        
- (void)test393
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ImaginaryI;"];
    NSArray *tokens = @[@[@"Character",@"‚Öà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ImaginaryI; with a semi-colon");
}
        
- (void)test394
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Implies"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Implies"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Implies without a semi-colon");
}
        
- (void)test395
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Implies;"];
    NSArray *tokens = @[@[@"Character",@"‚áí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Implies; with a semi-colon");
}
        
- (void)test396
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Int"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Int"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Int without a semi-colon");
}
        
- (void)test397
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Int;"];
    NSArray *tokens = @[@[@"Character",@"‚à¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Int; with a semi-colon");
}
        
- (void)test398
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Integral"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Integral"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Integral without a semi-colon");
}
        
- (void)test399
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Integral;"];
    NSArray *tokens = @[@[@"Character",@"‚à´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Integral; with a semi-colon");
}
        
- (void)test400
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Intersection"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Intersection"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Intersection without a semi-colon");
}
        
- (void)test401
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Intersection;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Intersection; with a semi-colon");
}
        
- (void)test402
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&InvisibleComma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&InvisibleComma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: InvisibleComma without a semi-colon");
}
        
- (void)test403
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&InvisibleComma;"];
    NSArray *tokens = @[@[@"Character",@"‚Å£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: InvisibleComma; with a semi-colon");
}
        
- (void)test404
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&InvisibleTimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&InvisibleTimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: InvisibleTimes without a semi-colon");
}
        
- (void)test405
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&InvisibleTimes;"];
    NSArray *tokens = @[@[@"Character",@"‚Å¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: InvisibleTimes; with a semi-colon");
}
        
- (void)test406
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Iogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Iogon without a semi-colon");
}
        
- (void)test407
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iogon;"];
    NSArray *tokens = @[@[@"Character",@"ƒÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iogon; with a semi-colon");
}
        
- (void)test408
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Iopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Iopf without a semi-colon");
}
        
- (void)test409
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iopf; with a semi-colon");
}
        
- (void)test410
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iota"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Iota"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Iota without a semi-colon");
}
        
- (void)test411
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iota;"];
    NSArray *tokens = @[@[@"Character",@"Œô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iota; with a semi-colon");
}
        
- (void)test412
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Iscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Iscr without a semi-colon");
}
        
- (void)test413
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iscr; with a semi-colon");
}
        
- (void)test414
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Itilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Itilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Itilde without a semi-colon");
}
        
- (void)test415
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Itilde;"];
    NSArray *tokens = @[@[@"Character",@"ƒ®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Itilde; with a semi-colon");
}
        
- (void)test416
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iukcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Iukcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Iukcy without a semi-colon");
}
        
- (void)test417
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iukcy;"];
    NSArray *tokens = @[@[@"Character",@"–Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iukcy; with a semi-colon");
}
        
- (void)test418
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iuml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iuml without a semi-colon");
}
        
- (void)test419
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Iuml;"];
    NSArray *tokens = @[@[@"Character",@"√è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Iuml; with a semi-colon");
}
        
- (void)test420
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Jcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Jcirc without a semi-colon");
}
        
- (void)test421
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jcirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒ¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Jcirc; with a semi-colon");
}
        
- (void)test422
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Jcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Jcy without a semi-colon");
}
        
- (void)test423
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jcy;"];
    NSArray *tokens = @[@[@"Character",@"–ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Jcy; with a semi-colon");
}
        
- (void)test424
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Jfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Jfr without a semi-colon");
}
        
- (void)test425
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Jfr; with a semi-colon");
}
        
- (void)test426
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Jopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Jopf without a semi-colon");
}
        
- (void)test427
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Jopf; with a semi-colon");
}
        
- (void)test428
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Jscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Jscr without a semi-colon");
}
        
- (void)test429
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Jscr; with a semi-colon");
}
        
- (void)test430
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jsercy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Jsercy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Jsercy without a semi-colon");
}
        
- (void)test431
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jsercy;"];
    NSArray *tokens = @[@[@"Character",@"–à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Jsercy; with a semi-colon");
}
        
- (void)test432
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jukcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Jukcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Jukcy without a semi-colon");
}
        
- (void)test433
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Jukcy;"];
    NSArray *tokens = @[@[@"Character",@"–Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Jukcy; with a semi-colon");
}
        
- (void)test434
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&KHcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&KHcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: KHcy without a semi-colon");
}
        
- (void)test435
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&KHcy;"];
    NSArray *tokens = @[@[@"Character",@"–•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: KHcy; with a semi-colon");
}
        
- (void)test436
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&KJcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&KJcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: KJcy without a semi-colon");
}
        
- (void)test437
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&KJcy;"];
    NSArray *tokens = @[@[@"Character",@"–å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: KJcy; with a semi-colon");
}
        
- (void)test438
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kappa"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Kappa"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Kappa without a semi-colon");
}
        
- (void)test439
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kappa;"];
    NSArray *tokens = @[@[@"Character",@"Œö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Kappa; with a semi-colon");
}
        
- (void)test440
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Kcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Kcedil without a semi-colon");
}
        
- (void)test441
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kcedil;"];
    NSArray *tokens = @[@[@"Character",@"ƒ∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Kcedil; with a semi-colon");
}
        
- (void)test442
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Kcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Kcy without a semi-colon");
}
        
- (void)test443
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kcy;"];
    NSArray *tokens = @[@[@"Character",@"–ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Kcy; with a semi-colon");
}
        
- (void)test444
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Kfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Kfr without a semi-colon");
}
        
- (void)test445
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Kfr; with a semi-colon");
}
        
- (void)test446
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Kopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Kopf without a semi-colon");
}
        
- (void)test447
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Kopf; with a semi-colon");
}
        
- (void)test448
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Kscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Kscr without a semi-colon");
}
        
- (void)test449
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Kscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Kscr; with a semi-colon");
}
        
- (void)test450
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LJcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LJcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LJcy without a semi-colon");
}
        
- (void)test451
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LJcy;"];
    NSArray *tokens = @[@[@"Character",@"–â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LJcy; with a semi-colon");
}
        
- (void)test452
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LT"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"<"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LT without a semi-colon");
}
        
- (void)test453
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LT;"];
    NSArray *tokens = @[@[@"Character",@"<"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LT; with a semi-colon");
}
        
- (void)test454
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lacute without a semi-colon");
}
        
- (void)test455
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lacute;"];
    NSArray *tokens = @[@[@"Character",@"ƒπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lacute; with a semi-colon");
}
        
- (void)test456
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lambda"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lambda"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lambda without a semi-colon");
}
        
- (void)test457
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lambda;"];
    NSArray *tokens = @[@[@"Character",@"Œõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lambda; with a semi-colon");
}
        
- (void)test458
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lang without a semi-colon");
}
        
- (void)test459
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lang;"];
    NSArray *tokens = @[@[@"Character",@"‚ü™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lang; with a semi-colon");
}
        
- (void)test460
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Laplacetrf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Laplacetrf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Laplacetrf without a semi-colon");
}
        
- (void)test461
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Laplacetrf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Laplacetrf; with a semi-colon");
}
        
- (void)test462
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Larr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Larr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Larr without a semi-colon");
}
        
- (void)test463
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Larr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Larr; with a semi-colon");
}
        
- (void)test464
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lcaron without a semi-colon");
}
        
- (void)test465
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lcaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lcaron; with a semi-colon");
}
        
- (void)test466
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lcedil without a semi-colon");
}
        
- (void)test467
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lcedil;"];
    NSArray *tokens = @[@[@"Character",@"ƒª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lcedil; with a semi-colon");
}
        
- (void)test468
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lcy without a semi-colon");
}
        
- (void)test469
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lcy;"];
    NSArray *tokens = @[@[@"Character",@"–õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lcy; with a semi-colon");
}
        
- (void)test470
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftAngleBracket"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftAngleBracket"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftAngleBracket without a semi-colon");
}
        
- (void)test471
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftAngleBracket;"];
    NSArray *tokens = @[@[@"Character",@"‚ü®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftAngleBracket; with a semi-colon");
}
        
- (void)test472
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftArrow without a semi-colon");
}
        
- (void)test473
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftArrow; with a semi-colon");
}
        
- (void)test474
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftArrowBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftArrowBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftArrowBar without a semi-colon");
}
        
- (void)test475
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftArrowBar;"];
    NSArray *tokens = @[@[@"Character",@"‚á§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftArrowBar; with a semi-colon");
}
        
- (void)test476
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftArrowRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftArrowRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftArrowRightArrow without a semi-colon");
}
        
- (void)test477
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftArrowRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftArrowRightArrow; with a semi-colon");
}
        
- (void)test478
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftCeiling"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftCeiling"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftCeiling without a semi-colon");
}
        
- (void)test479
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftCeiling;"];
    NSArray *tokens = @[@[@"Character",@"‚åà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftCeiling; with a semi-colon");
}
        
- (void)test480
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDoubleBracket"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftDoubleBracket"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftDoubleBracket without a semi-colon");
}
        
- (void)test481
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDoubleBracket;"];
    NSArray *tokens = @[@[@"Character",@"‚ü¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftDoubleBracket; with a semi-colon");
}
        
- (void)test482
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDownTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftDownTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftDownTeeVector without a semi-colon");
}
        
- (void)test483
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDownTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftDownTeeVector; with a semi-colon");
}
        
- (void)test484
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDownVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftDownVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftDownVector without a semi-colon");
}
        
- (void)test485
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDownVector;"];
    NSArray *tokens = @[@[@"Character",@"‚áÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftDownVector; with a semi-colon");
}
        
- (void)test486
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDownVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftDownVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftDownVectorBar without a semi-colon");
}
        
- (void)test487
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftDownVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftDownVectorBar; with a semi-colon");
}
        
- (void)test488
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftFloor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftFloor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftFloor without a semi-colon");
}
        
- (void)test489
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftFloor;"];
    NSArray *tokens = @[@[@"Character",@"‚åä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftFloor; with a semi-colon");
}
        
- (void)test490
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftRightArrow without a semi-colon");
}
        
- (void)test491
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftRightArrow; with a semi-colon");
}
        
- (void)test492
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftRightVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftRightVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftRightVector without a semi-colon");
}
        
- (void)test493
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftRightVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftRightVector; with a semi-colon");
}
        
- (void)test494
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftTee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftTee without a semi-colon");
}
        
- (void)test495
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTee;"];
    NSArray *tokens = @[@[@"Character",@"‚ä£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftTee; with a semi-colon");
}
        
- (void)test496
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTeeArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftTeeArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftTeeArrow without a semi-colon");
}
        
- (void)test497
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTeeArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftTeeArrow; with a semi-colon");
}
        
- (void)test498
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftTeeVector without a semi-colon");
}
        
- (void)test499
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftTeeVector; with a semi-colon");
}
        
- (void)test500
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTriangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftTriangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftTriangle without a semi-colon");
}
        
- (void)test501
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTriangle;"];
    NSArray *tokens = @[@[@"Character",@"‚ä≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftTriangle; with a semi-colon");
}
        
- (void)test502
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTriangleBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftTriangleBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftTriangleBar without a semi-colon");
}
        
- (void)test503
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTriangleBar;"];
    NSArray *tokens = @[@[@"Character",@"‚ßè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftTriangleBar; with a semi-colon");
}
        
- (void)test504
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTriangleEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftTriangleEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftTriangleEqual without a semi-colon");
}
        
- (void)test505
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftTriangleEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚ä¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftTriangleEqual; with a semi-colon");
}
        
- (void)test506
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpDownVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftUpDownVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftUpDownVector without a semi-colon");
}
        
- (void)test507
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpDownVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftUpDownVector; with a semi-colon");
}
        
- (void)test508
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftUpTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftUpTeeVector without a semi-colon");
}
        
- (void)test509
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftUpTeeVector; with a semi-colon");
}
        
- (void)test510
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftUpVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftUpVector without a semi-colon");
}
        
- (void)test511
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpVector;"];
    NSArray *tokens = @[@[@"Character",@"‚Üø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftUpVector; with a semi-colon");
}
        
- (void)test512
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftUpVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftUpVectorBar without a semi-colon");
}
        
- (void)test513
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftUpVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftUpVectorBar; with a semi-colon");
}
        
- (void)test514
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftVector without a semi-colon");
}
        
- (void)test515
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftVector;"];
    NSArray *tokens = @[@[@"Character",@"‚Üº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftVector; with a semi-colon");
}
        
- (void)test516
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LeftVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LeftVectorBar without a semi-colon");
}
        
- (void)test517
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LeftVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LeftVectorBar; with a semi-colon");
}
        
- (void)test518
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Leftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Leftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Leftarrow without a semi-colon");
}
        
- (void)test519
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Leftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Leftarrow; with a semi-colon");
}
        
- (void)test520
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Leftrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Leftrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Leftrightarrow without a semi-colon");
}
        
- (void)test521
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Leftrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Leftrightarrow; with a semi-colon");
}
        
- (void)test522
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessEqualGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LessEqualGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LessEqualGreater without a semi-colon");
}
        
- (void)test523
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessEqualGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚ãö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LessEqualGreater; with a semi-colon");
}
        
- (void)test524
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessFullEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LessFullEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LessFullEqual without a semi-colon");
}
        
- (void)test525
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessFullEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚â¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LessFullEqual; with a semi-colon");
}
        
- (void)test526
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LessGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LessGreater without a semi-colon");
}
        
- (void)test527
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚â∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LessGreater; with a semi-colon");
}
        
- (void)test528
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LessLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LessLess without a semi-colon");
}
        
- (void)test529
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessLess;"];
    NSArray *tokens = @[@[@"Character",@"‚™°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LessLess; with a semi-colon");
}
        
- (void)test530
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LessSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LessSlantEqual without a semi-colon");
}
        
- (void)test531
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LessSlantEqual; with a semi-colon");
}
        
- (void)test532
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LessTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LessTilde without a semi-colon");
}
        
- (void)test533
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LessTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚â≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LessTilde; with a semi-colon");
}
        
- (void)test534
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lfr without a semi-colon");
}
        
- (void)test535
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lfr; with a semi-colon");
}
        
- (void)test536
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ll"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ll"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ll without a semi-colon");
}
        
- (void)test537
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ll;"];
    NSArray *tokens = @[@[@"Character",@"‚ãò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ll; with a semi-colon");
}
        
- (void)test538
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lleftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lleftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lleftarrow without a semi-colon");
}
        
- (void)test539
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lleftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lleftarrow; with a semi-colon");
}
        
- (void)test540
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lmidot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lmidot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lmidot without a semi-colon");
}
        
- (void)test541
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lmidot;"];
    NSArray *tokens = @[@[@"Character",@"ƒø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lmidot; with a semi-colon");
}
        
- (void)test542
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LongLeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LongLeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LongLeftArrow without a semi-colon");
}
        
- (void)test543
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LongLeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚üµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LongLeftArrow; with a semi-colon");
}
        
- (void)test544
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LongLeftRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LongLeftRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LongLeftRightArrow without a semi-colon");
}
        
- (void)test545
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LongLeftRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LongLeftRightArrow; with a semi-colon");
}
        
- (void)test546
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LongRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LongRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LongRightArrow without a semi-colon");
}
        
- (void)test547
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LongRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LongRightArrow; with a semi-colon");
}
        
- (void)test548
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Longleftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Longleftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Longleftarrow without a semi-colon");
}
        
- (void)test549
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Longleftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Longleftarrow; with a semi-colon");
}
        
- (void)test550
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Longleftrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Longleftrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Longleftrightarrow without a semi-colon");
}
        
- (void)test551
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Longleftrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Longleftrightarrow; with a semi-colon");
}
        
- (void)test552
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Longrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Longrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Longrightarrow without a semi-colon");
}
        
- (void)test553
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Longrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚üπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Longrightarrow; with a semi-colon");
}
        
- (void)test554
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lopf without a semi-colon");
}
        
- (void)test555
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lopf; with a semi-colon");
}
        
- (void)test556
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LowerLeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LowerLeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LowerLeftArrow without a semi-colon");
}
        
- (void)test557
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LowerLeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LowerLeftArrow; with a semi-colon");
}
        
- (void)test558
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LowerRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&LowerRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: LowerRightArrow without a semi-colon");
}
        
- (void)test559
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&LowerRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: LowerRightArrow; with a semi-colon");
}
        
- (void)test560
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lscr without a semi-colon");
}
        
- (void)test561
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lscr; with a semi-colon");
}
        
- (void)test562
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lsh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lsh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lsh without a semi-colon");
}
        
- (void)test563
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lsh;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lsh; with a semi-colon");
}
        
- (void)test564
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lstrok without a semi-colon");
}
        
- (void)test565
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lstrok;"];
    NSArray *tokens = @[@[@"Character",@"≈Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lstrok; with a semi-colon");
}
        
- (void)test566
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Lt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Lt without a semi-colon");
}
        
- (void)test567
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Lt;"];
    NSArray *tokens = @[@[@"Character",@"‚â™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Lt; with a semi-colon");
}
        
- (void)test568
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Map"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Map"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Map without a semi-colon");
}
        
- (void)test569
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Map;"];
    NSArray *tokens = @[@[@"Character",@"‚§Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Map; with a semi-colon");
}
        
- (void)test570
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Mcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Mcy without a semi-colon");
}
        
- (void)test571
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mcy;"];
    NSArray *tokens = @[@[@"Character",@"–ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Mcy; with a semi-colon");
}
        
- (void)test572
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&MediumSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&MediumSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: MediumSpace without a semi-colon");
}
        
- (void)test573
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&MediumSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Åü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: MediumSpace; with a semi-colon");
}
        
- (void)test574
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mellintrf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Mellintrf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Mellintrf without a semi-colon");
}
        
- (void)test575
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mellintrf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Mellintrf; with a semi-colon");
}
        
- (void)test576
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Mfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Mfr without a semi-colon");
}
        
- (void)test577
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Mfr; with a semi-colon");
}
        
- (void)test578
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&MinusPlus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&MinusPlus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: MinusPlus without a semi-colon");
}
        
- (void)test579
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&MinusPlus;"];
    NSArray *tokens = @[@[@"Character",@"‚àì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: MinusPlus; with a semi-colon");
}
        
- (void)test580
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Mopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Mopf without a semi-colon");
}
        
- (void)test581
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Mopf; with a semi-colon");
}
        
- (void)test582
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Mscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Mscr without a semi-colon");
}
        
- (void)test583
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Mscr; with a semi-colon");
}
        
- (void)test584
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Mu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Mu without a semi-colon");
}
        
- (void)test585
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Mu;"];
    NSArray *tokens = @[@[@"Character",@"Œú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Mu; with a semi-colon");
}
        
- (void)test586
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NJcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NJcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NJcy without a semi-colon");
}
        
- (void)test587
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NJcy;"];
    NSArray *tokens = @[@[@"Character",@"–ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NJcy; with a semi-colon");
}
        
- (void)test588
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Nacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Nacute without a semi-colon");
}
        
- (void)test589
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nacute;"];
    NSArray *tokens = @[@[@"Character",@"≈É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Nacute; with a semi-colon");
}
        
- (void)test590
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ncaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ncaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ncaron without a semi-colon");
}
        
- (void)test591
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ncaron;"];
    NSArray *tokens = @[@[@"Character",@"≈á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ncaron; with a semi-colon");
}
        
- (void)test592
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ncedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ncedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ncedil without a semi-colon");
}
        
- (void)test593
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ncedil;"];
    NSArray *tokens = @[@[@"Character",@"≈Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ncedil; with a semi-colon");
}
        
- (void)test594
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ncy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ncy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ncy without a semi-colon");
}
        
- (void)test595
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ncy;"];
    NSArray *tokens = @[@[@"Character",@"–ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ncy; with a semi-colon");
}
        
- (void)test596
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeMediumSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NegativeMediumSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NegativeMediumSpace without a semi-colon");
}
        
- (void)test597
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeMediumSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Äã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NegativeMediumSpace; with a semi-colon");
}
        
- (void)test598
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeThickSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NegativeThickSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NegativeThickSpace without a semi-colon");
}
        
- (void)test599
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeThickSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Äã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NegativeThickSpace; with a semi-colon");
}
        
- (void)test600
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeThinSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NegativeThinSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NegativeThinSpace without a semi-colon");
}
        
- (void)test601
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeThinSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Äã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NegativeThinSpace; with a semi-colon");
}
        
- (void)test602
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeVeryThinSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NegativeVeryThinSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NegativeVeryThinSpace without a semi-colon");
}
        
- (void)test603
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NegativeVeryThinSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Äã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NegativeVeryThinSpace; with a semi-colon");
}
        
- (void)test604
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NestedGreaterGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NestedGreaterGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NestedGreaterGreater without a semi-colon");
}
        
- (void)test605
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NestedGreaterGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚â´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NestedGreaterGreater; with a semi-colon");
}
        
- (void)test606
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NestedLessLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NestedLessLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NestedLessLess without a semi-colon");
}
        
- (void)test607
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NestedLessLess;"];
    NSArray *tokens = @[@[@"Character",@"‚â™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NestedLessLess; with a semi-colon");
}
        
- (void)test608
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NewLine"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NewLine"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NewLine without a semi-colon");
}
        
- (void)test609
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NewLine;"];
    NSArray *tokens = @[@[@"Character",@"\n"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NewLine; with a semi-colon");
}
        
- (void)test610
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Nfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Nfr without a semi-colon");
}
        
- (void)test611
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Nfr; with a semi-colon");
}
        
- (void)test612
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NoBreak"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NoBreak"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NoBreak without a semi-colon");
}
        
- (void)test613
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NoBreak;"];
    NSArray *tokens = @[@[@"Character",@"‚Å†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NoBreak; with a semi-colon");
}
        
- (void)test614
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NonBreakingSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NonBreakingSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NonBreakingSpace without a semi-colon");
}
        
- (void)test615
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NonBreakingSpace;"];
    NSArray *tokens = @[@[@"Character",@"¬†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NonBreakingSpace; with a semi-colon");
}
        
- (void)test616
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Nopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Nopf without a semi-colon");
}
        
- (void)test617
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nopf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Nopf; with a semi-colon");
}
        
- (void)test618
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Not"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Not"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Not without a semi-colon");
}
        
- (void)test619
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Not;"];
    NSArray *tokens = @[@[@"Character",@"‚´¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Not; with a semi-colon");
}
        
- (void)test620
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotCongruent"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotCongruent"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotCongruent without a semi-colon");
}
        
- (void)test621
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotCongruent;"];
    NSArray *tokens = @[@[@"Character",@"‚â¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotCongruent; with a semi-colon");
}
        
- (void)test622
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotCupCap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotCupCap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotCupCap without a semi-colon");
}
        
- (void)test623
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotCupCap;"];
    NSArray *tokens = @[@[@"Character",@"‚â≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotCupCap; with a semi-colon");
}
        
- (void)test624
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotDoubleVerticalBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotDoubleVerticalBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotDoubleVerticalBar without a semi-colon");
}
        
- (void)test625
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotDoubleVerticalBar;"];
    NSArray *tokens = @[@[@"Character",@"‚à¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotDoubleVerticalBar; with a semi-colon");
}
        
- (void)test626
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotElement"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotElement"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotElement without a semi-colon");
}
        
- (void)test627
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotElement;"];
    NSArray *tokens = @[@[@"Character",@"‚àâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotElement; with a semi-colon");
}
        
- (void)test628
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotEqual without a semi-colon");
}
        
- (void)test629
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚â†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotEqual; with a semi-colon");
}
        
- (void)test630
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotEqualTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotEqualTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotEqualTilde without a semi-colon");
}
        
- (void)test631
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotEqualTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âÇÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotEqualTilde; with a semi-colon");
}
        
- (void)test632
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotExists"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotExists"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotExists without a semi-colon");
}
        
- (void)test633
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotExists;"];
    NSArray *tokens = @[@[@"Character",@"‚àÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotExists; with a semi-colon");
}
        
- (void)test634
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotGreater without a semi-colon");
}
        
- (void)test635
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚âØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotGreater; with a semi-colon");
}
        
- (void)test636
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotGreaterEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotGreaterEqual without a semi-colon");
}
        
- (void)test637
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚â±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotGreaterEqual; with a semi-colon");
}
        
- (void)test638
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterFullEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotGreaterFullEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotGreaterFullEqual without a semi-colon");
}
        
- (void)test639
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterFullEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âßÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotGreaterFullEqual; with a semi-colon");
}
        
- (void)test640
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotGreaterGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotGreaterGreater without a semi-colon");
}
        
- (void)test641
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚â´Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotGreaterGreater; with a semi-colon");
}
        
- (void)test642
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotGreaterLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotGreaterLess without a semi-colon");
}
        
- (void)test643
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterLess;"];
    NSArray *tokens = @[@[@"Character",@"‚âπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotGreaterLess; with a semi-colon");
}
        
- (void)test644
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotGreaterSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotGreaterSlantEqual without a semi-colon");
}
        
- (void)test645
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚©æÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotGreaterSlantEqual; with a semi-colon");
}
        
- (void)test646
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotGreaterTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotGreaterTilde without a semi-colon");
}
        
- (void)test647
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotGreaterTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotGreaterTilde; with a semi-colon");
}
        
- (void)test648
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotHumpDownHump"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotHumpDownHump"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotHumpDownHump without a semi-colon");
}
        
- (void)test649
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotHumpDownHump;"];
    NSArray *tokens = @[@[@"Character",@"‚âéÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotHumpDownHump; with a semi-colon");
}
        
- (void)test650
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotHumpEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotHumpEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotHumpEqual without a semi-colon");
}
        
- (void)test651
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotHumpEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âèÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotHumpEqual; with a semi-colon");
}
        
- (void)test652
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLeftTriangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLeftTriangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLeftTriangle without a semi-colon");
}
        
- (void)test653
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLeftTriangle;"];
    NSArray *tokens = @[@[@"Character",@"‚ã™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLeftTriangle; with a semi-colon");
}
        
- (void)test654
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLeftTriangleBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLeftTriangleBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLeftTriangleBar without a semi-colon");
}
        
- (void)test655
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLeftTriangleBar;"];
    NSArray *tokens = @[@[@"Character",@"‚ßèÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLeftTriangleBar; with a semi-colon");
}
        
- (void)test656
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLeftTriangleEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLeftTriangleEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLeftTriangleEqual without a semi-colon");
}
        
- (void)test657
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLeftTriangleEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚ã¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLeftTriangleEqual; with a semi-colon");
}
        
- (void)test658
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLess without a semi-colon");
}
        
- (void)test659
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLess;"];
    NSArray *tokens = @[@[@"Character",@"‚âÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLess; with a semi-colon");
}
        
- (void)test660
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLessEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLessEqual without a semi-colon");
}
        
- (void)test661
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚â∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLessEqual; with a semi-colon");
}
        
- (void)test662
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLessGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLessGreater without a semi-colon");
}
        
- (void)test663
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚â∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLessGreater; with a semi-colon");
}
        
- (void)test664
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLessLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLessLess without a semi-colon");
}
        
- (void)test665
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessLess;"];
    NSArray *tokens = @[@[@"Character",@"‚â™Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLessLess; with a semi-colon");
}
        
- (void)test666
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLessSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLessSlantEqual without a semi-colon");
}
        
- (void)test667
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚©ΩÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLessSlantEqual; with a semi-colon");
}
        
- (void)test668
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotLessTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotLessTilde without a semi-colon");
}
        
- (void)test669
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotLessTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚â¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotLessTilde; with a semi-colon");
}
        
- (void)test670
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotNestedGreaterGreater"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotNestedGreaterGreater"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotNestedGreaterGreater without a semi-colon");
}
        
- (void)test671
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotNestedGreaterGreater;"];
    NSArray *tokens = @[@[@"Character",@"‚™¢Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotNestedGreaterGreater; with a semi-colon");
}
        
- (void)test672
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotNestedLessLess"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotNestedLessLess"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotNestedLessLess without a semi-colon");
}
        
- (void)test673
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotNestedLessLess;"];
    NSArray *tokens = @[@[@"Character",@"‚™°Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotNestedLessLess; with a semi-colon");
}
        
- (void)test674
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotPrecedes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotPrecedes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotPrecedes without a semi-colon");
}
        
- (void)test675
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotPrecedes;"];
    NSArray *tokens = @[@[@"Character",@"‚äÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotPrecedes; with a semi-colon");
}
        
- (void)test676
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotPrecedesEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotPrecedesEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotPrecedesEqual without a semi-colon");
}
        
- (void)test677
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotPrecedesEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚™ØÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotPrecedesEqual; with a semi-colon");
}
        
- (void)test678
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotPrecedesSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotPrecedesSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotPrecedesSlantEqual without a semi-colon");
}
        
- (void)test679
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotPrecedesSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚ã†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotPrecedesSlantEqual; with a semi-colon");
}
        
- (void)test680
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotReverseElement"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotReverseElement"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotReverseElement without a semi-colon");
}
        
- (void)test681
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotReverseElement;"];
    NSArray *tokens = @[@[@"Character",@"‚àå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotReverseElement; with a semi-colon");
}
        
- (void)test682
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotRightTriangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotRightTriangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotRightTriangle without a semi-colon");
}
        
- (void)test683
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotRightTriangle;"];
    NSArray *tokens = @[@[@"Character",@"‚ã´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotRightTriangle; with a semi-colon");
}
        
- (void)test684
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotRightTriangleBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotRightTriangleBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotRightTriangleBar without a semi-colon");
}
        
- (void)test685
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotRightTriangleBar;"];
    NSArray *tokens = @[@[@"Character",@"‚ßêÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotRightTriangleBar; with a semi-colon");
}
        
- (void)test686
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotRightTriangleEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotRightTriangleEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotRightTriangleEqual without a semi-colon");
}
        
- (void)test687
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotRightTriangleEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚ã≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotRightTriangleEqual; with a semi-colon");
}
        
- (void)test688
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSubset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSquareSubset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSquareSubset without a semi-colon");
}
        
- (void)test689
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSubset;"];
    NSArray *tokens = @[@[@"Character",@"‚äèÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSquareSubset; with a semi-colon");
}
        
- (void)test690
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSubsetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSquareSubsetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSquareSubsetEqual without a semi-colon");
}
        
- (void)test691
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSubsetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚ã¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSquareSubsetEqual; with a semi-colon");
}
        
- (void)test692
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSuperset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSquareSuperset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSquareSuperset without a semi-colon");
}
        
- (void)test693
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSuperset;"];
    NSArray *tokens = @[@[@"Character",@"‚äêÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSquareSuperset; with a semi-colon");
}
        
- (void)test694
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSupersetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSquareSupersetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSquareSupersetEqual without a semi-colon");
}
        
- (void)test695
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSquareSupersetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚ã£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSquareSupersetEqual; with a semi-colon");
}
        
- (void)test696
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSubset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSubset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSubset without a semi-colon");
}
        
- (void)test697
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSubset;"];
    NSArray *tokens = @[@[@"Character",@"‚äÇ‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSubset; with a semi-colon");
}
        
- (void)test698
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSubsetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSubsetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSubsetEqual without a semi-colon");
}
        
- (void)test699
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSubsetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚äà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSubsetEqual; with a semi-colon");
}
        
- (void)test700
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceeds"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSucceeds"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSucceeds without a semi-colon");
}
        
- (void)test701
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceeds;"];
    NSArray *tokens = @[@[@"Character",@"‚äÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSucceeds; with a semi-colon");
}
        
- (void)test702
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceedsEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSucceedsEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSucceedsEqual without a semi-colon");
}
        
- (void)test703
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceedsEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚™∞Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSucceedsEqual; with a semi-colon");
}
        
- (void)test704
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceedsSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSucceedsSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSucceedsSlantEqual without a semi-colon");
}
        
- (void)test705
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceedsSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚ã°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSucceedsSlantEqual; with a semi-colon");
}
        
- (void)test706
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceedsTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSucceedsTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSucceedsTilde without a semi-colon");
}
        
- (void)test707
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSucceedsTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âøÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSucceedsTilde; with a semi-colon");
}
        
- (void)test708
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSuperset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSuperset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSuperset without a semi-colon");
}
        
- (void)test709
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSuperset;"];
    NSArray *tokens = @[@[@"Character",@"‚äÉ‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSuperset; with a semi-colon");
}
        
- (void)test710
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSupersetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotSupersetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotSupersetEqual without a semi-colon");
}
        
- (void)test711
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotSupersetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚äâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotSupersetEqual; with a semi-colon");
}
        
- (void)test712
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotTilde without a semi-colon");
}
        
- (void)test713
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotTilde; with a semi-colon");
}
        
- (void)test714
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTildeEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotTildeEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotTildeEqual without a semi-colon");
}
        
- (void)test715
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTildeEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotTildeEqual; with a semi-colon");
}
        
- (void)test716
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTildeFullEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotTildeFullEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotTildeFullEqual without a semi-colon");
}
        
- (void)test717
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTildeFullEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotTildeFullEqual; with a semi-colon");
}
        
- (void)test718
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTildeTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotTildeTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotTildeTilde without a semi-colon");
}
        
- (void)test719
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotTildeTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚ââ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotTildeTilde; with a semi-colon");
}
        
- (void)test720
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotVerticalBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&NotVerticalBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: NotVerticalBar without a semi-colon");
}
        
- (void)test721
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&NotVerticalBar;"];
    NSArray *tokens = @[@[@"Character",@"‚à§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: NotVerticalBar; with a semi-colon");
}
        
- (void)test722
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Nscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Nscr without a semi-colon");
}
        
- (void)test723
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Nscr; with a semi-colon");
}
        
- (void)test724
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ntilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ntilde without a semi-colon");
}
        
- (void)test725
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ntilde;"];
    NSArray *tokens = @[@[@"Character",@"√ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ntilde; with a semi-colon");
}
        
- (void)test726
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Nu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Nu without a semi-colon");
}
        
- (void)test727
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Nu;"];
    NSArray *tokens = @[@[@"Character",@"Œù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Nu; with a semi-colon");
}
        
- (void)test728
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OElig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&OElig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: OElig without a semi-colon");
}
        
- (void)test729
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OElig;"];
    NSArray *tokens = @[@[@"Character",@"≈í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: OElig; with a semi-colon");
}
        
- (void)test730
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Oacute without a semi-colon");
}
        
- (void)test731
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oacute;"];
    NSArray *tokens = @[@[@"Character",@"√ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Oacute; with a semi-colon");
}
        
- (void)test732
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ocirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ocirc without a semi-colon");
}
        
- (void)test733
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ocirc;"];
    NSArray *tokens = @[@[@"Character",@"√î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ocirc; with a semi-colon");
}
        
- (void)test734
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ocy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ocy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ocy without a semi-colon");
}
        
- (void)test735
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ocy;"];
    NSArray *tokens = @[@[@"Character",@"–û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ocy; with a semi-colon");
}
        
- (void)test736
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Odblac"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Odblac"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Odblac without a semi-colon");
}
        
- (void)test737
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Odblac;"];
    NSArray *tokens = @[@[@"Character",@"≈ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Odblac; with a semi-colon");
}
        
- (void)test738
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ofr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ofr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ofr without a semi-colon");
}
        
- (void)test739
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ofr;"];
    NSArray *tokens = @[@[@"Character",@"ùîí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ofr; with a semi-colon");
}
        
- (void)test740
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ograve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ograve without a semi-colon");
}
        
- (void)test741
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ograve;"];
    NSArray *tokens = @[@[@"Character",@"√í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ograve; with a semi-colon");
}
        
- (void)test742
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Omacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Omacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Omacr without a semi-colon");
}
        
- (void)test743
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Omacr;"];
    NSArray *tokens = @[@[@"Character",@"≈å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Omacr; with a semi-colon");
}
        
- (void)test744
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Omega"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Omega"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Omega without a semi-colon");
}
        
- (void)test745
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Omega;"];
    NSArray *tokens = @[@[@"Character",@"Œ©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Omega; with a semi-colon");
}
        
- (void)test746
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Omicron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Omicron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Omicron without a semi-colon");
}
        
- (void)test747
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Omicron;"];
    NSArray *tokens = @[@[@"Character",@"Œü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Omicron; with a semi-colon");
}
        
- (void)test748
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Oopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Oopf without a semi-colon");
}
        
- (void)test749
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Oopf; with a semi-colon");
}
        
- (void)test750
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OpenCurlyDoubleQuote"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&OpenCurlyDoubleQuote"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: OpenCurlyDoubleQuote without a semi-colon");
}
        
- (void)test751
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OpenCurlyDoubleQuote;"];
    NSArray *tokens = @[@[@"Character",@"‚Äú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: OpenCurlyDoubleQuote; with a semi-colon");
}
        
- (void)test752
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OpenCurlyQuote"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&OpenCurlyQuote"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: OpenCurlyQuote without a semi-colon");
}
        
- (void)test753
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OpenCurlyQuote;"];
    NSArray *tokens = @[@[@"Character",@"‚Äò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: OpenCurlyQuote; with a semi-colon");
}
        
- (void)test754
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Or"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Or"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Or without a semi-colon");
}
        
- (void)test755
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Or;"];
    NSArray *tokens = @[@[@"Character",@"‚©î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Or; with a semi-colon");
}
        
- (void)test756
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Oscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Oscr without a semi-colon");
}
        
- (void)test757
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Oscr; with a semi-colon");
}
        
- (void)test758
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oslash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Oslash without a semi-colon");
}
        
- (void)test759
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Oslash;"];
    NSArray *tokens = @[@[@"Character",@"√ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Oslash; with a semi-colon");
}
        
- (void)test760
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Otilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Otilde without a semi-colon");
}
        
- (void)test761
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Otilde;"];
    NSArray *tokens = @[@[@"Character",@"√ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Otilde; with a semi-colon");
}
        
- (void)test762
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Otimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Otimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Otimes without a semi-colon");
}
        
- (void)test763
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Otimes;"];
    NSArray *tokens = @[@[@"Character",@"‚®∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Otimes; with a semi-colon");
}
        
- (void)test764
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ouml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ouml without a semi-colon");
}
        
- (void)test765
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ouml;"];
    NSArray *tokens = @[@[@"Character",@"√ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ouml; with a semi-colon");
}
        
- (void)test766
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&OverBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: OverBar without a semi-colon");
}
        
- (void)test767
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverBar;"];
    NSArray *tokens = @[@[@"Character",@"‚Äæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: OverBar; with a semi-colon");
}
        
- (void)test768
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverBrace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&OverBrace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: OverBrace without a semi-colon");
}
        
- (void)test769
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverBrace;"];
    NSArray *tokens = @[@[@"Character",@"‚èû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: OverBrace; with a semi-colon");
}
        
- (void)test770
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverBracket"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&OverBracket"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: OverBracket without a semi-colon");
}
        
- (void)test771
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverBracket;"];
    NSArray *tokens = @[@[@"Character",@"‚é¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: OverBracket; with a semi-colon");
}
        
- (void)test772
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverParenthesis"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&OverParenthesis"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: OverParenthesis without a semi-colon");
}
        
- (void)test773
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&OverParenthesis;"];
    NSArray *tokens = @[@[@"Character",@"‚èú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: OverParenthesis; with a semi-colon");
}
        
- (void)test774
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PartialD"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&PartialD"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: PartialD without a semi-colon");
}
        
- (void)test775
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PartialD;"];
    NSArray *tokens = @[@[@"Character",@"‚àÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: PartialD; with a semi-colon");
}
        
- (void)test776
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Pcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Pcy without a semi-colon");
}
        
- (void)test777
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pcy;"];
    NSArray *tokens = @[@[@"Character",@"–ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Pcy; with a semi-colon");
}
        
- (void)test778
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Pfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Pfr without a semi-colon");
}
        
- (void)test779
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Pfr; with a semi-colon");
}
        
- (void)test780
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Phi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Phi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Phi without a semi-colon");
}
        
- (void)test781
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Phi;"];
    NSArray *tokens = @[@[@"Character",@"Œ¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Phi; with a semi-colon");
}
        
- (void)test782
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Pi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Pi without a semi-colon");
}
        
- (void)test783
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pi;"];
    NSArray *tokens = @[@[@"Character",@"Œ†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Pi; with a semi-colon");
}
        
- (void)test784
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PlusMinus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&PlusMinus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: PlusMinus without a semi-colon");
}
        
- (void)test785
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PlusMinus;"];
    NSArray *tokens = @[@[@"Character",@"¬±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: PlusMinus; with a semi-colon");
}
        
- (void)test786
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Poincareplane"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Poincareplane"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Poincareplane without a semi-colon");
}
        
- (void)test787
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Poincareplane;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Poincareplane; with a semi-colon");
}
        
- (void)test788
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Popf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Popf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Popf without a semi-colon");
}
        
- (void)test789
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Popf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Popf; with a semi-colon");
}
        
- (void)test790
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Pr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Pr without a semi-colon");
}
        
- (void)test791
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pr;"];
    NSArray *tokens = @[@[@"Character",@"‚™ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Pr; with a semi-colon");
}
        
- (void)test792
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Precedes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Precedes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Precedes without a semi-colon");
}
        
- (void)test793
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Precedes;"];
    NSArray *tokens = @[@[@"Character",@"‚â∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Precedes; with a semi-colon");
}
        
- (void)test794
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PrecedesEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&PrecedesEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: PrecedesEqual without a semi-colon");
}
        
- (void)test795
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PrecedesEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: PrecedesEqual; with a semi-colon");
}
        
- (void)test796
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PrecedesSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&PrecedesSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: PrecedesSlantEqual without a semi-colon");
}
        
- (void)test797
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PrecedesSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: PrecedesSlantEqual; with a semi-colon");
}
        
- (void)test798
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PrecedesTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&PrecedesTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: PrecedesTilde without a semi-colon");
}
        
- (void)test799
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&PrecedesTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: PrecedesTilde; with a semi-colon");
}
        
- (void)test800
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Prime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Prime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Prime without a semi-colon");
}
        
- (void)test801
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Prime;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Prime; with a semi-colon");
}
        
- (void)test802
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Product"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Product"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Product without a semi-colon");
}
        
- (void)test803
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Product;"];
    NSArray *tokens = @[@[@"Character",@"‚àè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Product; with a semi-colon");
}
        
- (void)test804
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Proportion"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Proportion"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Proportion without a semi-colon");
}
        
- (void)test805
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Proportion;"];
    NSArray *tokens = @[@[@"Character",@"‚à∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Proportion; with a semi-colon");
}
        
- (void)test806
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Proportional"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Proportional"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Proportional without a semi-colon");
}
        
- (void)test807
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Proportional;"];
    NSArray *tokens = @[@[@"Character",@"‚àù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Proportional; with a semi-colon");
}
        
- (void)test808
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Pscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Pscr without a semi-colon");
}
        
- (void)test809
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Pscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Pscr; with a semi-colon");
}
        
- (void)test810
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Psi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Psi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Psi without a semi-colon");
}
        
- (void)test811
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Psi;"];
    NSArray *tokens = @[@[@"Character",@"Œ®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Psi; with a semi-colon");
}
        
- (void)test812
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&QUOT"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"\""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: QUOT without a semi-colon");
}
        
- (void)test813
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&QUOT;"];
    NSArray *tokens = @[@[@"Character",@"\""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: QUOT; with a semi-colon");
}
        
- (void)test814
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Qfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Qfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Qfr without a semi-colon");
}
        
- (void)test815
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Qfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Qfr; with a semi-colon");
}
        
- (void)test816
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Qopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Qopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Qopf without a semi-colon");
}
        
- (void)test817
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Qopf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Qopf; with a semi-colon");
}
        
- (void)test818
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Qscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Qscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Qscr without a semi-colon");
}
        
- (void)test819
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Qscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Qscr; with a semi-colon");
}
        
- (void)test820
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RBarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RBarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RBarr without a semi-colon");
}
        
- (void)test821
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RBarr;"];
    NSArray *tokens = @[@[@"Character",@"‚§ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RBarr; with a semi-colon");
}
        
- (void)test822
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&REG"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: REG without a semi-colon");
}
        
- (void)test823
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&REG;"];
    NSArray *tokens = @[@[@"Character",@"¬Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: REG; with a semi-colon");
}
        
- (void)test824
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Racute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Racute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Racute without a semi-colon");
}
        
- (void)test825
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Racute;"];
    NSArray *tokens = @[@[@"Character",@"≈î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Racute; with a semi-colon");
}
        
- (void)test826
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rang without a semi-colon");
}
        
- (void)test827
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rang;"];
    NSArray *tokens = @[@[@"Character",@"‚ü´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rang; with a semi-colon");
}
        
- (void)test828
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rarr without a semi-colon");
}
        
- (void)test829
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rarr; with a semi-colon");
}
        
- (void)test830
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rarrtl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rarrtl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rarrtl without a semi-colon");
}
        
- (void)test831
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rarrtl;"];
    NSArray *tokens = @[@[@"Character",@"‚§ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rarrtl; with a semi-colon");
}
        
- (void)test832
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rcaron without a semi-colon");
}
        
- (void)test833
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rcaron;"];
    NSArray *tokens = @[@[@"Character",@"≈ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rcaron; with a semi-colon");
}
        
- (void)test834
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rcedil without a semi-colon");
}
        
- (void)test835
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rcedil;"];
    NSArray *tokens = @[@[@"Character",@"≈ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rcedil; with a semi-colon");
}
        
- (void)test836
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rcy without a semi-colon");
}
        
- (void)test837
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rcy;"];
    NSArray *tokens = @[@[@"Character",@"–†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rcy; with a semi-colon");
}
        
- (void)test838
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Re"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Re"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Re without a semi-colon");
}
        
- (void)test839
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Re;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Re; with a semi-colon");
}
        
- (void)test840
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ReverseElement"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ReverseElement"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ReverseElement without a semi-colon");
}
        
- (void)test841
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ReverseElement;"];
    NSArray *tokens = @[@[@"Character",@"‚àã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ReverseElement; with a semi-colon");
}
        
- (void)test842
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ReverseEquilibrium"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ReverseEquilibrium"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ReverseEquilibrium without a semi-colon");
}
        
- (void)test843
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ReverseEquilibrium;"];
    NSArray *tokens = @[@[@"Character",@"‚áã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ReverseEquilibrium; with a semi-colon");
}
        
- (void)test844
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ReverseUpEquilibrium"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ReverseUpEquilibrium"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ReverseUpEquilibrium without a semi-colon");
}
        
- (void)test845
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ReverseUpEquilibrium;"];
    NSArray *tokens = @[@[@"Character",@"‚•Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ReverseUpEquilibrium; with a semi-colon");
}
        
- (void)test846
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rfr without a semi-colon");
}
        
- (void)test847
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rfr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rfr; with a semi-colon");
}
        
- (void)test848
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rho"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rho"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rho without a semi-colon");
}
        
- (void)test849
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rho;"];
    NSArray *tokens = @[@[@"Character",@"Œ°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rho; with a semi-colon");
}
        
- (void)test850
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightAngleBracket"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightAngleBracket"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightAngleBracket without a semi-colon");
}
        
- (void)test851
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightAngleBracket;"];
    NSArray *tokens = @[@[@"Character",@"‚ü©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightAngleBracket; with a semi-colon");
}
        
- (void)test852
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightArrow without a semi-colon");
}
        
- (void)test853
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightArrow; with a semi-colon");
}
        
- (void)test854
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightArrowBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightArrowBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightArrowBar without a semi-colon");
}
        
- (void)test855
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightArrowBar;"];
    NSArray *tokens = @[@[@"Character",@"‚á•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightArrowBar; with a semi-colon");
}
        
- (void)test856
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightArrowLeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightArrowLeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightArrowLeftArrow without a semi-colon");
}
        
- (void)test857
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightArrowLeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightArrowLeftArrow; with a semi-colon");
}
        
- (void)test858
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightCeiling"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightCeiling"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightCeiling without a semi-colon");
}
        
- (void)test859
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightCeiling;"];
    NSArray *tokens = @[@[@"Character",@"‚åâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightCeiling; with a semi-colon");
}
        
- (void)test860
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDoubleBracket"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightDoubleBracket"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightDoubleBracket without a semi-colon");
}
        
- (void)test861
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDoubleBracket;"];
    NSArray *tokens = @[@[@"Character",@"‚üß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightDoubleBracket; with a semi-colon");
}
        
- (void)test862
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDownTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightDownTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightDownTeeVector without a semi-colon");
}
        
- (void)test863
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDownTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightDownTeeVector; with a semi-colon");
}
        
- (void)test864
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDownVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightDownVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightDownVector without a semi-colon");
}
        
- (void)test865
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDownVector;"];
    NSArray *tokens = @[@[@"Character",@"‚áÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightDownVector; with a semi-colon");
}
        
- (void)test866
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDownVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightDownVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightDownVectorBar without a semi-colon");
}
        
- (void)test867
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightDownVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightDownVectorBar; with a semi-colon");
}
        
- (void)test868
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightFloor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightFloor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightFloor without a semi-colon");
}
        
- (void)test869
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightFloor;"];
    NSArray *tokens = @[@[@"Character",@"‚åã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightFloor; with a semi-colon");
}
        
- (void)test870
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightTee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightTee without a semi-colon");
}
        
- (void)test871
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTee;"];
    NSArray *tokens = @[@[@"Character",@"‚ä¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightTee; with a semi-colon");
}
        
- (void)test872
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTeeArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightTeeArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightTeeArrow without a semi-colon");
}
        
- (void)test873
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTeeArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightTeeArrow; with a semi-colon");
}
        
- (void)test874
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightTeeVector without a semi-colon");
}
        
- (void)test875
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightTeeVector; with a semi-colon");
}
        
- (void)test876
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTriangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightTriangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightTriangle without a semi-colon");
}
        
- (void)test877
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTriangle;"];
    NSArray *tokens = @[@[@"Character",@"‚ä≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightTriangle; with a semi-colon");
}
        
- (void)test878
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTriangleBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightTriangleBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightTriangleBar without a semi-colon");
}
        
- (void)test879
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTriangleBar;"];
    NSArray *tokens = @[@[@"Character",@"‚ßê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightTriangleBar; with a semi-colon");
}
        
- (void)test880
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTriangleEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightTriangleEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightTriangleEqual without a semi-colon");
}
        
- (void)test881
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightTriangleEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚äµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightTriangleEqual; with a semi-colon");
}
        
- (void)test882
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpDownVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightUpDownVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightUpDownVector without a semi-colon");
}
        
- (void)test883
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpDownVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightUpDownVector; with a semi-colon");
}
        
- (void)test884
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpTeeVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightUpTeeVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightUpTeeVector without a semi-colon");
}
        
- (void)test885
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpTeeVector;"];
    NSArray *tokens = @[@[@"Character",@"‚•ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightUpTeeVector; with a semi-colon");
}
        
- (void)test886
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightUpVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightUpVector without a semi-colon");
}
        
- (void)test887
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpVector;"];
    NSArray *tokens = @[@[@"Character",@"‚Üæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightUpVector; with a semi-colon");
}
        
- (void)test888
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightUpVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightUpVectorBar without a semi-colon");
}
        
- (void)test889
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightUpVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightUpVectorBar; with a semi-colon");
}
        
- (void)test890
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightVector"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightVector"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightVector without a semi-colon");
}
        
- (void)test891
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightVector;"];
    NSArray *tokens = @[@[@"Character",@"‚áÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightVector; with a semi-colon");
}
        
- (void)test892
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightVectorBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RightVectorBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RightVectorBar without a semi-colon");
}
        
- (void)test893
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RightVectorBar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RightVectorBar; with a semi-colon");
}
        
- (void)test894
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rightarrow without a semi-colon");
}
        
- (void)test895
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rightarrow; with a semi-colon");
}
        
- (void)test896
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ropf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ropf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ropf without a semi-colon");
}
        
- (void)test897
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ropf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ropf; with a semi-colon");
}
        
- (void)test898
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RoundImplies"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RoundImplies"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RoundImplies without a semi-colon");
}
        
- (void)test899
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RoundImplies;"];
    NSArray *tokens = @[@[@"Character",@"‚•∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RoundImplies; with a semi-colon");
}
        
- (void)test900
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rrightarrow without a semi-colon");
}
        
- (void)test901
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rrightarrow; with a semi-colon");
}
        
- (void)test902
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rscr without a semi-colon");
}
        
- (void)test903
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rscr; with a semi-colon");
}
        
- (void)test904
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rsh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Rsh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Rsh without a semi-colon");
}
        
- (void)test905
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Rsh;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Rsh; with a semi-colon");
}
        
- (void)test906
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RuleDelayed"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&RuleDelayed"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: RuleDelayed without a semi-colon");
}
        
- (void)test907
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&RuleDelayed;"];
    NSArray *tokens = @[@[@"Character",@"‚ß¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: RuleDelayed; with a semi-colon");
}
        
- (void)test908
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SHCHcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SHCHcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SHCHcy without a semi-colon");
}
        
- (void)test909
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SHCHcy;"];
    NSArray *tokens = @[@[@"Character",@"–©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SHCHcy; with a semi-colon");
}
        
- (void)test910
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SHcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SHcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SHcy without a semi-colon");
}
        
- (void)test911
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SHcy;"];
    NSArray *tokens = @[@[@"Character",@"–®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SHcy; with a semi-colon");
}
        
- (void)test912
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SOFTcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SOFTcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SOFTcy without a semi-colon");
}
        
- (void)test913
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SOFTcy;"];
    NSArray *tokens = @[@[@"Character",@"–¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SOFTcy; with a semi-colon");
}
        
- (void)test914
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sacute without a semi-colon");
}
        
- (void)test915
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sacute;"];
    NSArray *tokens = @[@[@"Character",@"≈ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sacute; with a semi-colon");
}
        
- (void)test916
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sc without a semi-colon");
}
        
- (void)test917
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sc;"];
    NSArray *tokens = @[@[@"Character",@"‚™º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sc; with a semi-colon");
}
        
- (void)test918
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Scaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Scaron without a semi-colon");
}
        
- (void)test919
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scaron;"];
    NSArray *tokens = @[@[@"Character",@"≈†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Scaron; with a semi-colon");
}
        
- (void)test920
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Scedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Scedil without a semi-colon");
}
        
- (void)test921
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scedil;"];
    NSArray *tokens = @[@[@"Character",@"≈û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Scedil; with a semi-colon");
}
        
- (void)test922
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Scirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Scirc without a semi-colon");
}
        
- (void)test923
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scirc;"];
    NSArray *tokens = @[@[@"Character",@"≈ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Scirc; with a semi-colon");
}
        
- (void)test924
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Scy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Scy without a semi-colon");
}
        
- (void)test925
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Scy;"];
    NSArray *tokens = @[@[@"Character",@"–°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Scy; with a semi-colon");
}
        
- (void)test926
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sfr without a semi-colon");
}
        
- (void)test927
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sfr; with a semi-colon");
}
        
- (void)test928
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortDownArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ShortDownArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ShortDownArrow without a semi-colon");
}
        
- (void)test929
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortDownArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ShortDownArrow; with a semi-colon");
}
        
- (void)test930
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortLeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ShortLeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ShortLeftArrow without a semi-colon");
}
        
- (void)test931
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortLeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ShortLeftArrow; with a semi-colon");
}
        
- (void)test932
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ShortRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ShortRightArrow without a semi-colon");
}
        
- (void)test933
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ShortRightArrow; with a semi-colon");
}
        
- (void)test934
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortUpArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ShortUpArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ShortUpArrow without a semi-colon");
}
        
- (void)test935
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ShortUpArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ShortUpArrow; with a semi-colon");
}
        
- (void)test936
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sigma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sigma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sigma without a semi-colon");
}
        
- (void)test937
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sigma;"];
    NSArray *tokens = @[@[@"Character",@"Œ£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sigma; with a semi-colon");
}
        
- (void)test938
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SmallCircle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SmallCircle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SmallCircle without a semi-colon");
}
        
- (void)test939
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SmallCircle;"];
    NSArray *tokens = @[@[@"Character",@"‚àò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SmallCircle; with a semi-colon");
}
        
- (void)test940
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sopf without a semi-colon");
}
        
- (void)test941
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sopf; with a semi-colon");
}
        
- (void)test942
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sqrt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sqrt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sqrt without a semi-colon");
}
        
- (void)test943
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sqrt;"];
    NSArray *tokens = @[@[@"Character",@"‚àö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sqrt; with a semi-colon");
}
        
- (void)test944
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Square"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Square"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Square without a semi-colon");
}
        
- (void)test945
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Square;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Square; with a semi-colon");
}
        
- (void)test946
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareIntersection"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SquareIntersection"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SquareIntersection without a semi-colon");
}
        
- (void)test947
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareIntersection;"];
    NSArray *tokens = @[@[@"Character",@"‚äì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SquareIntersection; with a semi-colon");
}
        
- (void)test948
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSubset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SquareSubset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SquareSubset without a semi-colon");
}
        
- (void)test949
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSubset;"];
    NSArray *tokens = @[@[@"Character",@"‚äè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SquareSubset; with a semi-colon");
}
        
- (void)test950
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSubsetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SquareSubsetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SquareSubsetEqual without a semi-colon");
}
        
- (void)test951
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSubsetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚äë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SquareSubsetEqual; with a semi-colon");
}
        
- (void)test952
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSuperset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SquareSuperset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SquareSuperset without a semi-colon");
}
        
- (void)test953
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSuperset;"];
    NSArray *tokens = @[@[@"Character",@"‚äê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SquareSuperset; with a semi-colon");
}
        
- (void)test954
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSupersetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SquareSupersetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SquareSupersetEqual without a semi-colon");
}
        
- (void)test955
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareSupersetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚äí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SquareSupersetEqual; with a semi-colon");
}
        
- (void)test956
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareUnion"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SquareUnion"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SquareUnion without a semi-colon");
}
        
- (void)test957
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SquareUnion;"];
    NSArray *tokens = @[@[@"Character",@"‚äî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SquareUnion; with a semi-colon");
}
        
- (void)test958
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sscr without a semi-colon");
}
        
- (void)test959
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sscr; with a semi-colon");
}
        
- (void)test960
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Star"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Star"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Star without a semi-colon");
}
        
- (void)test961
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Star;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Star; with a semi-colon");
}
        
- (void)test962
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sub without a semi-colon");
}
        
- (void)test963
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sub;"];
    NSArray *tokens = @[@[@"Character",@"‚ãê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sub; with a semi-colon");
}
        
- (void)test964
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Subset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Subset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Subset without a semi-colon");
}
        
- (void)test965
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Subset;"];
    NSArray *tokens = @[@[@"Character",@"‚ãê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Subset; with a semi-colon");
}
        
- (void)test966
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SubsetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SubsetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SubsetEqual without a semi-colon");
}
        
- (void)test967
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SubsetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚äÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SubsetEqual; with a semi-colon");
}
        
- (void)test968
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Succeeds"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Succeeds"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Succeeds without a semi-colon");
}
        
- (void)test969
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Succeeds;"];
    NSArray *tokens = @[@[@"Character",@"‚âª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Succeeds; with a semi-colon");
}
        
- (void)test970
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SucceedsEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SucceedsEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SucceedsEqual without a semi-colon");
}
        
- (void)test971
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SucceedsEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚™∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SucceedsEqual; with a semi-colon");
}
        
- (void)test972
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SucceedsSlantEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SucceedsSlantEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SucceedsSlantEqual without a semi-colon");
}
        
- (void)test973
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SucceedsSlantEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SucceedsSlantEqual; with a semi-colon");
}
        
- (void)test974
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SucceedsTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SucceedsTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SucceedsTilde without a semi-colon");
}
        
- (void)test975
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SucceedsTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SucceedsTilde; with a semi-colon");
}
        
- (void)test976
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SuchThat"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SuchThat"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SuchThat without a semi-colon");
}
        
- (void)test977
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SuchThat;"];
    NSArray *tokens = @[@[@"Character",@"‚àã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SuchThat; with a semi-colon");
}
        
- (void)test978
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sum"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sum"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sum without a semi-colon");
}
        
- (void)test979
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sum;"];
    NSArray *tokens = @[@[@"Character",@"‚àë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sum; with a semi-colon");
}
        
- (void)test980
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Sup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Sup without a semi-colon");
}
        
- (void)test981
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Sup;"];
    NSArray *tokens = @[@[@"Character",@"‚ãë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Sup; with a semi-colon");
}
        
- (void)test982
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Superset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Superset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Superset without a semi-colon");
}
        
- (void)test983
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Superset;"];
    NSArray *tokens = @[@[@"Character",@"‚äÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Superset; with a semi-colon");
}
        
- (void)test984
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SupersetEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&SupersetEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: SupersetEqual without a semi-colon");
}
        
- (void)test985
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&SupersetEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚äá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: SupersetEqual; with a semi-colon");
}
        
- (void)test986
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Supset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Supset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Supset without a semi-colon");
}
        
- (void)test987
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Supset;"];
    NSArray *tokens = @[@[@"Character",@"‚ãë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Supset; with a semi-colon");
}
        
- (void)test988
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&THORN"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: THORN without a semi-colon");
}
        
- (void)test989
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&THORN;"];
    NSArray *tokens = @[@[@"Character",@"√û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: THORN; with a semi-colon");
}
        
- (void)test990
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TRADE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&TRADE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: TRADE without a semi-colon");
}
        
- (void)test991
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TRADE;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: TRADE; with a semi-colon");
}
        
- (void)test992
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TSHcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&TSHcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: TSHcy without a semi-colon");
}
        
- (void)test993
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TSHcy;"];
    NSArray *tokens = @[@[@"Character",@"–ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: TSHcy; with a semi-colon");
}
        
- (void)test994
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TScy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&TScy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: TScy without a semi-colon");
}
        
- (void)test995
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TScy;"];
    NSArray *tokens = @[@[@"Character",@"–¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: TScy; with a semi-colon");
}
        
- (void)test996
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tab"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tab"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tab without a semi-colon");
}
        
- (void)test997
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tab;"];
    NSArray *tokens = @[@[@"Character",@"\t"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tab; with a semi-colon");
}
        
- (void)test998
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tau"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tau"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tau without a semi-colon");
}
        
- (void)test999
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tau;"];
    NSArray *tokens = @[@[@"Character",@"Œ§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tau; with a semi-colon");
}
        
- (void)test1000
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tcaron without a semi-colon");
}
        
- (void)test1001
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tcaron;"];
    NSArray *tokens = @[@[@"Character",@"≈§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tcaron; with a semi-colon");
}
        
- (void)test1002
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tcedil without a semi-colon");
}
        
- (void)test1003
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tcedil;"];
    NSArray *tokens = @[@[@"Character",@"≈¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tcedil; with a semi-colon");
}
        
- (void)test1004
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tcy without a semi-colon");
}
        
- (void)test1005
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tcy;"];
    NSArray *tokens = @[@[@"Character",@"–¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tcy; with a semi-colon");
}
        
- (void)test1006
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tfr without a semi-colon");
}
        
- (void)test1007
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tfr; with a semi-colon");
}
        
- (void)test1008
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Therefore"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Therefore"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Therefore without a semi-colon");
}
        
- (void)test1009
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Therefore;"];
    NSArray *tokens = @[@[@"Character",@"‚à¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Therefore; with a semi-colon");
}
        
- (void)test1010
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Theta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Theta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Theta without a semi-colon");
}
        
- (void)test1011
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Theta;"];
    NSArray *tokens = @[@[@"Character",@"Œò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Theta; with a semi-colon");
}
        
- (void)test1012
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ThickSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ThickSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ThickSpace without a semi-colon");
}
        
- (void)test1013
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ThickSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Åü‚Ää"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ThickSpace; with a semi-colon");
}
        
- (void)test1014
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ThinSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ThinSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ThinSpace without a semi-colon");
}
        
- (void)test1015
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ThinSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Äâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ThinSpace; with a semi-colon");
}
        
- (void)test1016
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tilde without a semi-colon");
}
        
- (void)test1017
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tilde;"];
    NSArray *tokens = @[@[@"Character",@"‚àº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tilde; with a semi-colon");
}
        
- (void)test1018
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TildeEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&TildeEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: TildeEqual without a semi-colon");
}
        
- (void)test1019
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TildeEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: TildeEqual; with a semi-colon");
}
        
- (void)test1020
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TildeFullEqual"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&TildeFullEqual"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: TildeFullEqual without a semi-colon");
}
        
- (void)test1021
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TildeFullEqual;"];
    NSArray *tokens = @[@[@"Character",@"‚âÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: TildeFullEqual; with a semi-colon");
}
        
- (void)test1022
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TildeTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&TildeTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: TildeTilde without a semi-colon");
}
        
- (void)test1023
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TildeTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: TildeTilde; with a semi-colon");
}
        
- (void)test1024
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Topf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Topf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Topf without a semi-colon");
}
        
- (void)test1025
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Topf;"];
    NSArray *tokens = @[@[@"Character",@"ùïã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Topf; with a semi-colon");
}
        
- (void)test1026
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TripleDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&TripleDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: TripleDot without a semi-colon");
}
        
- (void)test1027
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&TripleDot;"];
    NSArray *tokens = @[@[@"Character",@"‚Éõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: TripleDot; with a semi-colon");
}
        
- (void)test1028
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tscr without a semi-colon");
}
        
- (void)test1029
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tscr; with a semi-colon");
}
        
- (void)test1030
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Tstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Tstrok without a semi-colon");
}
        
- (void)test1031
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Tstrok;"];
    NSArray *tokens = @[@[@"Character",@"≈¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Tstrok; with a semi-colon");
}
        
- (void)test1032
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uacute without a semi-colon");
}
        
- (void)test1033
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uacute;"];
    NSArray *tokens = @[@[@"Character",@"√ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uacute; with a semi-colon");
}
        
- (void)test1034
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Uarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Uarr without a semi-colon");
}
        
- (void)test1035
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uarr; with a semi-colon");
}
        
- (void)test1036
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uarrocir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Uarrocir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Uarrocir without a semi-colon");
}
        
- (void)test1037
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uarrocir;"];
    NSArray *tokens = @[@[@"Character",@"‚•â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uarrocir; with a semi-colon");
}
        
- (void)test1038
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ubrcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ubrcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ubrcy without a semi-colon");
}
        
- (void)test1039
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ubrcy;"];
    NSArray *tokens = @[@[@"Character",@"–é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ubrcy; with a semi-colon");
}
        
- (void)test1040
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ubreve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ubreve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ubreve without a semi-colon");
}
        
- (void)test1041
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ubreve;"];
    NSArray *tokens = @[@[@"Character",@"≈¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ubreve; with a semi-colon");
}
        
- (void)test1042
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ucirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ucirc without a semi-colon");
}
        
- (void)test1043
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ucirc;"];
    NSArray *tokens = @[@[@"Character",@"√õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ucirc; with a semi-colon");
}
        
- (void)test1044
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ucy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ucy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ucy without a semi-colon");
}
        
- (void)test1045
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ucy;"];
    NSArray *tokens = @[@[@"Character",@"–£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ucy; with a semi-colon");
}
        
- (void)test1046
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Udblac"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Udblac"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Udblac without a semi-colon");
}
        
- (void)test1047
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Udblac;"];
    NSArray *tokens = @[@[@"Character",@"≈∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Udblac; with a semi-colon");
}
        
- (void)test1048
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ufr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ufr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ufr without a semi-colon");
}
        
- (void)test1049
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ufr;"];
    NSArray *tokens = @[@[@"Character",@"ùîò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ufr; with a semi-colon");
}
        
- (void)test1050
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ugrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ugrave without a semi-colon");
}
        
- (void)test1051
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ugrave;"];
    NSArray *tokens = @[@[@"Character",@"√ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ugrave; with a semi-colon");
}
        
- (void)test1052
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Umacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Umacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Umacr without a semi-colon");
}
        
- (void)test1053
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Umacr;"];
    NSArray *tokens = @[@[@"Character",@"≈™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Umacr; with a semi-colon");
}
        
- (void)test1054
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UnderBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UnderBar without a semi-colon");
}
        
- (void)test1055
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderBar;"];
    NSArray *tokens = @[@[@"Character",@"_"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UnderBar; with a semi-colon");
}
        
- (void)test1056
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderBrace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UnderBrace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UnderBrace without a semi-colon");
}
        
- (void)test1057
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderBrace;"];
    NSArray *tokens = @[@[@"Character",@"‚èü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UnderBrace; with a semi-colon");
}
        
- (void)test1058
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderBracket"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UnderBracket"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UnderBracket without a semi-colon");
}
        
- (void)test1059
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderBracket;"];
    NSArray *tokens = @[@[@"Character",@"‚éµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UnderBracket; with a semi-colon");
}
        
- (void)test1060
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderParenthesis"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UnderParenthesis"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UnderParenthesis without a semi-colon");
}
        
- (void)test1061
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnderParenthesis;"];
    NSArray *tokens = @[@[@"Character",@"‚èù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UnderParenthesis; with a semi-colon");
}
        
- (void)test1062
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Union"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Union"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Union without a semi-colon");
}
        
- (void)test1063
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Union;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Union; with a semi-colon");
}
        
- (void)test1064
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnionPlus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UnionPlus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UnionPlus without a semi-colon");
}
        
- (void)test1065
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UnionPlus;"];
    NSArray *tokens = @[@[@"Character",@"‚äé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UnionPlus; with a semi-colon");
}
        
- (void)test1066
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Uogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Uogon without a semi-colon");
}
        
- (void)test1067
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uogon;"];
    NSArray *tokens = @[@[@"Character",@"≈≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uogon; with a semi-colon");
}
        
- (void)test1068
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Uopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Uopf without a semi-colon");
}
        
- (void)test1069
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uopf; with a semi-colon");
}
        
- (void)test1070
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpArrow without a semi-colon");
}
        
- (void)test1071
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpArrow; with a semi-colon");
}
        
- (void)test1072
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpArrowBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpArrowBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpArrowBar without a semi-colon");
}
        
- (void)test1073
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpArrowBar;"];
    NSArray *tokens = @[@[@"Character",@"‚§í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpArrowBar; with a semi-colon");
}
        
- (void)test1074
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpArrowDownArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpArrowDownArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpArrowDownArrow without a semi-colon");
}
        
- (void)test1075
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpArrowDownArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpArrowDownArrow; with a semi-colon");
}
        
- (void)test1076
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpDownArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpDownArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpDownArrow without a semi-colon");
}
        
- (void)test1077
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpDownArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpDownArrow; with a semi-colon");
}
        
- (void)test1078
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpEquilibrium"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpEquilibrium"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpEquilibrium without a semi-colon");
}
        
- (void)test1079
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpEquilibrium;"];
    NSArray *tokens = @[@[@"Character",@"‚•Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpEquilibrium; with a semi-colon");
}
        
- (void)test1080
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpTee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpTee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpTee without a semi-colon");
}
        
- (void)test1081
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpTee;"];
    NSArray *tokens = @[@[@"Character",@"‚ä•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpTee; with a semi-colon");
}
        
- (void)test1082
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpTeeArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpTeeArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpTeeArrow without a semi-colon");
}
        
- (void)test1083
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpTeeArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpTeeArrow; with a semi-colon");
}
        
- (void)test1084
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uparrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Uparrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Uparrow without a semi-colon");
}
        
- (void)test1085
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uparrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uparrow; with a semi-colon");
}
        
- (void)test1086
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Updownarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Updownarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Updownarrow without a semi-colon");
}
        
- (void)test1087
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Updownarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Updownarrow; with a semi-colon");
}
        
- (void)test1088
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpperLeftArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpperLeftArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpperLeftArrow without a semi-colon");
}
        
- (void)test1089
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpperLeftArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpperLeftArrow; with a semi-colon");
}
        
- (void)test1090
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpperRightArrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&UpperRightArrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: UpperRightArrow without a semi-colon");
}
        
- (void)test1091
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&UpperRightArrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: UpperRightArrow; with a semi-colon");
}
        
- (void)test1092
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Upsi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Upsi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Upsi without a semi-colon");
}
        
- (void)test1093
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Upsi;"];
    NSArray *tokens = @[@[@"Character",@"œí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Upsi; with a semi-colon");
}
        
- (void)test1094
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Upsilon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Upsilon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Upsilon without a semi-colon");
}
        
- (void)test1095
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Upsilon;"];
    NSArray *tokens = @[@[@"Character",@"Œ•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Upsilon; with a semi-colon");
}
        
- (void)test1096
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uring"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Uring"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Uring without a semi-colon");
}
        
- (void)test1097
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uring;"];
    NSArray *tokens = @[@[@"Character",@"≈Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uring; with a semi-colon");
}
        
- (void)test1098
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Uscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Uscr without a semi-colon");
}
        
- (void)test1099
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uscr; with a semi-colon");
}
        
- (void)test1100
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Utilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Utilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Utilde without a semi-colon");
}
        
- (void)test1101
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Utilde;"];
    NSArray *tokens = @[@[@"Character",@"≈®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Utilde; with a semi-colon");
}
        
- (void)test1102
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uuml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uuml without a semi-colon");
}
        
- (void)test1103
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Uuml;"];
    NSArray *tokens = @[@[@"Character",@"√ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Uuml; with a semi-colon");
}
        
- (void)test1104
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VDash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&VDash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: VDash without a semi-colon");
}
        
- (void)test1105
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VDash;"];
    NSArray *tokens = @[@[@"Character",@"‚ä´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: VDash; with a semi-colon");
}
        
- (void)test1106
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vbar without a semi-colon");
}
        
- (void)test1107
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vbar;"];
    NSArray *tokens = @[@[@"Character",@"‚´´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vbar; with a semi-colon");
}
        
- (void)test1108
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vcy without a semi-colon");
}
        
- (void)test1109
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vcy;"];
    NSArray *tokens = @[@[@"Character",@"–í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vcy; with a semi-colon");
}
        
- (void)test1110
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vdash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vdash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vdash without a semi-colon");
}
        
- (void)test1111
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vdash;"];
    NSArray *tokens = @[@[@"Character",@"‚ä©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vdash; with a semi-colon");
}
        
- (void)test1112
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vdashl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vdashl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vdashl without a semi-colon");
}
        
- (void)test1113
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vdashl;"];
    NSArray *tokens = @[@[@"Character",@"‚´¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vdashl; with a semi-colon");
}
        
- (void)test1114
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vee without a semi-colon");
}
        
- (void)test1115
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vee;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vee; with a semi-colon");
}
        
- (void)test1116
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Verbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Verbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Verbar without a semi-colon");
}
        
- (void)test1117
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Verbar;"];
    NSArray *tokens = @[@[@"Character",@"‚Äñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Verbar; with a semi-colon");
}
        
- (void)test1118
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vert"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vert"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vert without a semi-colon");
}
        
- (void)test1119
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vert;"];
    NSArray *tokens = @[@[@"Character",@"‚Äñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vert; with a semi-colon");
}
        
- (void)test1120
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&VerticalBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: VerticalBar without a semi-colon");
}
        
- (void)test1121
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalBar;"];
    NSArray *tokens = @[@[@"Character",@"‚à£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: VerticalBar; with a semi-colon");
}
        
- (void)test1122
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalLine"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&VerticalLine"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: VerticalLine without a semi-colon");
}
        
- (void)test1123
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalLine;"];
    NSArray *tokens = @[@[@"Character",@"|"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: VerticalLine; with a semi-colon");
}
        
- (void)test1124
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalSeparator"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&VerticalSeparator"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: VerticalSeparator without a semi-colon");
}
        
- (void)test1125
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalSeparator;"];
    NSArray *tokens = @[@[@"Character",@"‚ùò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: VerticalSeparator; with a semi-colon");
}
        
- (void)test1126
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalTilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&VerticalTilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: VerticalTilde without a semi-colon");
}
        
- (void)test1127
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VerticalTilde;"];
    NSArray *tokens = @[@[@"Character",@"‚âÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: VerticalTilde; with a semi-colon");
}
        
- (void)test1128
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VeryThinSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&VeryThinSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: VeryThinSpace without a semi-colon");
}
        
- (void)test1129
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&VeryThinSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Ää"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: VeryThinSpace; with a semi-colon");
}
        
- (void)test1130
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vfr without a semi-colon");
}
        
- (void)test1131
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vfr; with a semi-colon");
}
        
- (void)test1132
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vopf without a semi-colon");
}
        
- (void)test1133
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vopf; with a semi-colon");
}
        
- (void)test1134
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vscr without a semi-colon");
}
        
- (void)test1135
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vscr; with a semi-colon");
}
        
- (void)test1136
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vvdash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Vvdash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Vvdash without a semi-colon");
}
        
- (void)test1137
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Vvdash;"];
    NSArray *tokens = @[@[@"Character",@"‚ä™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Vvdash; with a semi-colon");
}
        
- (void)test1138
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Wcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Wcirc without a semi-colon");
}
        
- (void)test1139
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wcirc;"];
    NSArray *tokens = @[@[@"Character",@"≈¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Wcirc; with a semi-colon");
}
        
- (void)test1140
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wedge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Wedge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Wedge without a semi-colon");
}
        
- (void)test1141
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wedge;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Wedge; with a semi-colon");
}
        
- (void)test1142
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Wfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Wfr without a semi-colon");
}
        
- (void)test1143
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Wfr; with a semi-colon");
}
        
- (void)test1144
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Wopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Wopf without a semi-colon");
}
        
- (void)test1145
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Wopf; with a semi-colon");
}
        
- (void)test1146
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Wscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Wscr without a semi-colon");
}
        
- (void)test1147
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Wscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Wscr; with a semi-colon");
}
        
- (void)test1148
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Xfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Xfr without a semi-colon");
}
        
- (void)test1149
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Xfr; with a semi-colon");
}
        
- (void)test1150
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Xi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Xi without a semi-colon");
}
        
- (void)test1151
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xi;"];
    NSArray *tokens = @[@[@"Character",@"Œû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Xi; with a semi-colon");
}
        
- (void)test1152
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Xopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Xopf without a semi-colon");
}
        
- (void)test1153
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Xopf; with a semi-colon");
}
        
- (void)test1154
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Xscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Xscr without a semi-colon");
}
        
- (void)test1155
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Xscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Xscr; with a semi-colon");
}
        
- (void)test1156
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&YAcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&YAcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: YAcy without a semi-colon");
}
        
- (void)test1157
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&YAcy;"];
    NSArray *tokens = @[@[@"Character",@"–Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: YAcy; with a semi-colon");
}
        
- (void)test1158
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&YIcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&YIcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: YIcy without a semi-colon");
}
        
- (void)test1159
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&YIcy;"];
    NSArray *tokens = @[@[@"Character",@"–á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: YIcy; with a semi-colon");
}
        
- (void)test1160
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&YUcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&YUcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: YUcy without a semi-colon");
}
        
- (void)test1161
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&YUcy;"];
    NSArray *tokens = @[@[@"Character",@"–Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: YUcy; with a semi-colon");
}
        
- (void)test1162
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Yacute without a semi-colon");
}
        
- (void)test1163
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yacute;"];
    NSArray *tokens = @[@[@"Character",@"√ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Yacute; with a semi-colon");
}
        
- (void)test1164
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ycirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ycirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ycirc without a semi-colon");
}
        
- (void)test1165
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ycirc;"];
    NSArray *tokens = @[@[@"Character",@"≈∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ycirc; with a semi-colon");
}
        
- (void)test1166
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ycy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Ycy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Ycy without a semi-colon");
}
        
- (void)test1167
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Ycy;"];
    NSArray *tokens = @[@[@"Character",@"–´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Ycy; with a semi-colon");
}
        
- (void)test1168
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Yfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Yfr without a semi-colon");
}
        
- (void)test1169
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Yfr; with a semi-colon");
}
        
- (void)test1170
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Yopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Yopf without a semi-colon");
}
        
- (void)test1171
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Yopf; with a semi-colon");
}
        
- (void)test1172
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Yscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Yscr without a semi-colon");
}
        
- (void)test1173
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Yscr; with a semi-colon");
}
        
- (void)test1174
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yuml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Yuml"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Yuml without a semi-colon");
}
        
- (void)test1175
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Yuml;"];
    NSArray *tokens = @[@[@"Character",@"≈∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Yuml; with a semi-colon");
}
        
- (void)test1176
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ZHcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ZHcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ZHcy without a semi-colon");
}
        
- (void)test1177
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ZHcy;"];
    NSArray *tokens = @[@[@"Character",@"–ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ZHcy; with a semi-colon");
}
        
- (void)test1178
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zacute without a semi-colon");
}
        
- (void)test1179
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zacute;"];
    NSArray *tokens = @[@[@"Character",@"≈π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zacute; with a semi-colon");
}
        
- (void)test1180
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zcaron without a semi-colon");
}
        
- (void)test1181
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zcaron;"];
    NSArray *tokens = @[@[@"Character",@"≈Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zcaron; with a semi-colon");
}
        
- (void)test1182
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zcy without a semi-colon");
}
        
- (void)test1183
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zcy;"];
    NSArray *tokens = @[@[@"Character",@"–ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zcy; with a semi-colon");
}
        
- (void)test1184
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zdot without a semi-colon");
}
        
- (void)test1185
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zdot;"];
    NSArray *tokens = @[@[@"Character",@"≈ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zdot; with a semi-colon");
}
        
- (void)test1186
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ZeroWidthSpace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ZeroWidthSpace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ZeroWidthSpace without a semi-colon");
}
        
- (void)test1187
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ZeroWidthSpace;"];
    NSArray *tokens = @[@[@"Character",@"‚Äã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ZeroWidthSpace; with a semi-colon");
}
        
- (void)test1188
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zeta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zeta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zeta without a semi-colon");
}
        
- (void)test1189
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zeta;"];
    NSArray *tokens = @[@[@"Character",@"Œñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zeta; with a semi-colon");
}
        
- (void)test1190
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zfr without a semi-colon");
}
        
- (void)test1191
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zfr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zfr; with a semi-colon");
}
        
- (void)test1192
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zopf without a semi-colon");
}
        
- (void)test1193
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zopf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zopf; with a semi-colon");
}
        
- (void)test1194
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&Zscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: Zscr without a semi-colon");
}
        
- (void)test1195
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&Zscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: Zscr; with a semi-colon");
}
        
- (void)test1196
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aacute without a semi-colon");
}
        
- (void)test1197
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aacute;"];
    NSArray *tokens = @[@[@"Character",@"√°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aacute; with a semi-colon");
}
        
- (void)test1198
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&abreve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&abreve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: abreve without a semi-colon");
}
        
- (void)test1199
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&abreve;"];
    NSArray *tokens = @[@[@"Character",@"ƒÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: abreve; with a semi-colon");
}
        
- (void)test1200
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ac"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ac"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ac without a semi-colon");
}
        
- (void)test1201
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ac;"];
    NSArray *tokens = @[@[@"Character",@"‚àæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ac; with a semi-colon");
}
        
- (void)test1202
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&acE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: acE without a semi-colon");
}
        
- (void)test1203
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acE;"];
    NSArray *tokens = @[@[@"Character",@"‚àæÃ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: acE; with a semi-colon");
}
        
- (void)test1204
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&acd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: acd without a semi-colon");
}
        
- (void)test1205
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acd;"];
    NSArray *tokens = @[@[@"Character",@"‚àø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: acd; with a semi-colon");
}
        
- (void)test1206
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: acirc without a semi-colon");
}
        
- (void)test1207
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acirc;"];
    NSArray *tokens = @[@[@"Character",@"√¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: acirc; with a semi-colon");
}
        
- (void)test1208
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: acute without a semi-colon");
}
        
- (void)test1209
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acute;"];
    NSArray *tokens = @[@[@"Character",@"¬¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: acute; with a semi-colon");
}
        
- (void)test1210
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&acy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: acy without a semi-colon");
}
        
- (void)test1211
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&acy;"];
    NSArray *tokens = @[@[@"Character",@"–∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: acy; with a semi-colon");
}
        
- (void)test1212
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aelig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aelig without a semi-colon");
}
        
- (void)test1213
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aelig;"];
    NSArray *tokens = @[@[@"Character",@"√¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aelig; with a semi-colon");
}
        
- (void)test1214
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&af"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&af"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: af without a semi-colon");
}
        
- (void)test1215
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&af;"];
    NSArray *tokens = @[@[@"Character",@"‚Å°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: af; with a semi-colon");
}
        
- (void)test1216
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&afr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&afr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: afr without a semi-colon");
}
        
- (void)test1217
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&afr;"];
    NSArray *tokens = @[@[@"Character",@"ùîû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: afr; with a semi-colon");
}
        
- (void)test1218
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&agrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: agrave without a semi-colon");
}
        
- (void)test1219
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&agrave;"];
    NSArray *tokens = @[@[@"Character",@"√†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: agrave; with a semi-colon");
}
        
- (void)test1220
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&alefsym"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&alefsym"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: alefsym without a semi-colon");
}
        
- (void)test1221
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&alefsym;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: alefsym; with a semi-colon");
}
        
- (void)test1222
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aleph"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&aleph"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: aleph without a semi-colon");
}
        
- (void)test1223
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aleph;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aleph; with a semi-colon");
}
        
- (void)test1224
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&alpha"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&alpha"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: alpha without a semi-colon");
}
        
- (void)test1225
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&alpha;"];
    NSArray *tokens = @[@[@"Character",@"Œ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: alpha; with a semi-colon");
}
        
- (void)test1226
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&amacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&amacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: amacr without a semi-colon");
}
        
- (void)test1227
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&amacr;"];
    NSArray *tokens = @[@[@"Character",@"ƒÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: amacr; with a semi-colon");
}
        
- (void)test1228
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&amalg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&amalg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: amalg without a semi-colon");
}
        
- (void)test1229
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&amalg;"];
    NSArray *tokens = @[@[@"Character",@"‚®ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: amalg; with a semi-colon");
}
        
- (void)test1230
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&amp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: amp without a semi-colon");
}
        
- (void)test1231
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&amp;"];
    NSArray *tokens = @[@[@"Character",@"&"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: amp; with a semi-colon");
}
        
- (void)test1232
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&and"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&and"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: and without a semi-colon");
}
        
- (void)test1233
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&and;"];
    NSArray *tokens = @[@[@"Character",@"‚àß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: and; with a semi-colon");
}
        
- (void)test1234
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andand"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&andand"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: andand without a semi-colon");
}
        
- (void)test1235
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andand;"];
    NSArray *tokens = @[@[@"Character",@"‚©ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: andand; with a semi-colon");
}
        
- (void)test1236
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&andd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: andd without a semi-colon");
}
        
- (void)test1237
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andd;"];
    NSArray *tokens = @[@[@"Character",@"‚©ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: andd; with a semi-colon");
}
        
- (void)test1238
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andslope"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&andslope"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: andslope without a semi-colon");
}
        
- (void)test1239
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andslope;"];
    NSArray *tokens = @[@[@"Character",@"‚©ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: andslope; with a semi-colon");
}
        
- (void)test1240
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&andv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: andv without a semi-colon");
}
        
- (void)test1241
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&andv;"];
    NSArray *tokens = @[@[@"Character",@"‚©ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: andv; with a semi-colon");
}
        
- (void)test1242
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ang without a semi-colon");
}
        
- (void)test1243
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ang;"];
    NSArray *tokens = @[@[@"Character",@"‚à†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ang; with a semi-colon");
}
        
- (void)test1244
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ange"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ange"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ange without a semi-colon");
}
        
- (void)test1245
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ange;"];
    NSArray *tokens = @[@[@"Character",@"‚¶§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ange; with a semi-colon");
}
        
- (void)test1246
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angle without a semi-colon");
}
        
- (void)test1247
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angle;"];
    NSArray *tokens = @[@[@"Character",@"‚à†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angle; with a semi-colon");
}
        
- (void)test1248
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsd without a semi-colon");
}
        
- (void)test1249
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsd;"];
    NSArray *tokens = @[@[@"Character",@"‚à°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsd; with a semi-colon");
}
        
- (void)test1250
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdaa"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdaa"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdaa without a semi-colon");
}
        
- (void)test1251
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdaa;"];
    NSArray *tokens = @[@[@"Character",@"‚¶®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdaa; with a semi-colon");
}
        
- (void)test1252
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdab"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdab"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdab without a semi-colon");
}
        
- (void)test1253
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdab;"];
    NSArray *tokens = @[@[@"Character",@"‚¶©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdab; with a semi-colon");
}
        
- (void)test1254
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdac"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdac"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdac without a semi-colon");
}
        
- (void)test1255
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdac;"];
    NSArray *tokens = @[@[@"Character",@"‚¶™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdac; with a semi-colon");
}
        
- (void)test1256
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdad"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdad"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdad without a semi-colon");
}
        
- (void)test1257
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdad;"];
    NSArray *tokens = @[@[@"Character",@"‚¶´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdad; with a semi-colon");
}
        
- (void)test1258
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdae"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdae"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdae without a semi-colon");
}
        
- (void)test1259
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdae;"];
    NSArray *tokens = @[@[@"Character",@"‚¶¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdae; with a semi-colon");
}
        
- (void)test1260
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdaf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdaf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdaf without a semi-colon");
}
        
- (void)test1261
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdaf;"];
    NSArray *tokens = @[@[@"Character",@"‚¶≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdaf; with a semi-colon");
}
        
- (void)test1262
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdag"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdag"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdag without a semi-colon");
}
        
- (void)test1263
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdag;"];
    NSArray *tokens = @[@[@"Character",@"‚¶Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdag; with a semi-colon");
}
        
- (void)test1264
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdah"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angmsdah"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angmsdah without a semi-colon");
}
        
- (void)test1265
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angmsdah;"];
    NSArray *tokens = @[@[@"Character",@"‚¶Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angmsdah; with a semi-colon");
}
        
- (void)test1266
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angrt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angrt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angrt without a semi-colon");
}
        
- (void)test1267
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angrt;"];
    NSArray *tokens = @[@[@"Character",@"‚àü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angrt; with a semi-colon");
}
        
- (void)test1268
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angrtvb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angrtvb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angrtvb without a semi-colon");
}
        
- (void)test1269
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angrtvb;"];
    NSArray *tokens = @[@[@"Character",@"‚äæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angrtvb; with a semi-colon");
}
        
- (void)test1270
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angrtvbd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angrtvbd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angrtvbd without a semi-colon");
}
        
- (void)test1271
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angrtvbd;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angrtvbd; with a semi-colon");
}
        
- (void)test1272
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angsph"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angsph"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angsph without a semi-colon");
}
        
- (void)test1273
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angsph;"];
    NSArray *tokens = @[@[@"Character",@"‚à¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angsph; with a semi-colon");
}
        
- (void)test1274
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angst"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angst"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angst without a semi-colon");
}
        
- (void)test1275
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angst;"];
    NSArray *tokens = @[@[@"Character",@"√Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angst; with a semi-colon");
}
        
- (void)test1276
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angzarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&angzarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: angzarr without a semi-colon");
}
        
- (void)test1277
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&angzarr;"];
    NSArray *tokens = @[@[@"Character",@"‚çº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: angzarr; with a semi-colon");
}
        
- (void)test1278
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&aogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: aogon without a semi-colon");
}
        
- (void)test1279
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aogon;"];
    NSArray *tokens = @[@[@"Character",@"ƒÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aogon; with a semi-colon");
}
        
- (void)test1280
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&aopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: aopf without a semi-colon");
}
        
- (void)test1281
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aopf; with a semi-colon");
}
        
- (void)test1282
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ap without a semi-colon");
}
        
- (void)test1283
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ap;"];
    NSArray *tokens = @[@[@"Character",@"‚âà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ap; with a semi-colon");
}
        
- (void)test1284
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&apE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: apE without a semi-colon");
}
        
- (void)test1285
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apE;"];
    NSArray *tokens = @[@[@"Character",@"‚©∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: apE; with a semi-colon");
}
        
- (void)test1286
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apacir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&apacir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: apacir without a semi-colon");
}
        
- (void)test1287
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apacir;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: apacir; with a semi-colon");
}
        
- (void)test1288
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ape"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ape"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ape without a semi-colon");
}
        
- (void)test1289
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ape;"];
    NSArray *tokens = @[@[@"Character",@"‚âä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ape; with a semi-colon");
}
        
- (void)test1290
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&apid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: apid without a semi-colon");
}
        
- (void)test1291
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apid;"];
    NSArray *tokens = @[@[@"Character",@"‚âã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: apid; with a semi-colon");
}
        
- (void)test1292
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apos"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&apos"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: apos without a semi-colon");
}
        
- (void)test1293
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&apos;"];
    NSArray *tokens = @[@[@"Character",@"'"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: apos; with a semi-colon");
}
        
- (void)test1294
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&approx"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&approx"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: approx without a semi-colon");
}
        
- (void)test1295
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&approx;"];
    NSArray *tokens = @[@[@"Character",@"‚âà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: approx; with a semi-colon");
}
        
- (void)test1296
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&approxeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&approxeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: approxeq without a semi-colon");
}
        
- (void)test1297
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&approxeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: approxeq; with a semi-colon");
}
        
- (void)test1298
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aring"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aring without a semi-colon");
}
        
- (void)test1299
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&aring;"];
    NSArray *tokens = @[@[@"Character",@"√•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: aring; with a semi-colon");
}
        
- (void)test1300
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ascr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ascr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ascr without a semi-colon");
}
        
- (void)test1301
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ascr;"];
    NSArray *tokens = @[@[@"Character",@"ùí∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ascr; with a semi-colon");
}
        
- (void)test1302
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ast"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ast"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ast without a semi-colon");
}
        
- (void)test1303
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ast;"];
    NSArray *tokens = @[@[@"Character",@"*"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ast; with a semi-colon");
}
        
- (void)test1304
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&asymp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&asymp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: asymp without a semi-colon");
}
        
- (void)test1305
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&asymp;"];
    NSArray *tokens = @[@[@"Character",@"‚âà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: asymp; with a semi-colon");
}
        
- (void)test1306
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&asympeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&asympeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: asympeq without a semi-colon");
}
        
- (void)test1307
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&asympeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: asympeq; with a semi-colon");
}
        
- (void)test1308
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&atilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: atilde without a semi-colon");
}
        
- (void)test1309
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&atilde;"];
    NSArray *tokens = @[@[@"Character",@"√£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: atilde; with a semi-colon");
}
        
- (void)test1310
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&auml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: auml without a semi-colon");
}
        
- (void)test1311
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&auml;"];
    NSArray *tokens = @[@[@"Character",@"√§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: auml; with a semi-colon");
}
        
- (void)test1312
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&awconint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&awconint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: awconint without a semi-colon");
}
        
- (void)test1313
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&awconint;"];
    NSArray *tokens = @[@[@"Character",@"‚à≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: awconint; with a semi-colon");
}
        
- (void)test1314
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&awint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&awint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: awint without a semi-colon");
}
        
- (void)test1315
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&awint;"];
    NSArray *tokens = @[@[@"Character",@"‚®ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: awint; with a semi-colon");
}
        
- (void)test1316
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bNot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bNot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bNot without a semi-colon");
}
        
- (void)test1317
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bNot;"];
    NSArray *tokens = @[@[@"Character",@"‚´≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bNot; with a semi-colon");
}
        
- (void)test1318
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backcong"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&backcong"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: backcong without a semi-colon");
}
        
- (void)test1319
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backcong;"];
    NSArray *tokens = @[@[@"Character",@"‚âå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: backcong; with a semi-colon");
}
        
- (void)test1320
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backepsilon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&backepsilon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: backepsilon without a semi-colon");
}
        
- (void)test1321
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backepsilon;"];
    NSArray *tokens = @[@[@"Character",@"œ∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: backepsilon; with a semi-colon");
}
        
- (void)test1322
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backprime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&backprime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: backprime without a semi-colon");
}
        
- (void)test1323
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backprime;"];
    NSArray *tokens = @[@[@"Character",@"‚Äµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: backprime; with a semi-colon");
}
        
- (void)test1324
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&backsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: backsim without a semi-colon");
}
        
- (void)test1325
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backsim;"];
    NSArray *tokens = @[@[@"Character",@"‚àΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: backsim; with a semi-colon");
}
        
- (void)test1326
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backsimeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&backsimeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: backsimeq without a semi-colon");
}
        
- (void)test1327
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&backsimeq;"];
    NSArray *tokens = @[@[@"Character",@"‚ãç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: backsimeq; with a semi-colon");
}
        
- (void)test1328
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&barvee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&barvee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: barvee without a semi-colon");
}
        
- (void)test1329
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&barvee;"];
    NSArray *tokens = @[@[@"Character",@"‚äΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: barvee; with a semi-colon");
}
        
- (void)test1330
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&barwed"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&barwed"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: barwed without a semi-colon");
}
        
- (void)test1331
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&barwed;"];
    NSArray *tokens = @[@[@"Character",@"‚åÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: barwed; with a semi-colon");
}
        
- (void)test1332
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&barwedge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&barwedge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: barwedge without a semi-colon");
}
        
- (void)test1333
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&barwedge;"];
    NSArray *tokens = @[@[@"Character",@"‚åÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: barwedge; with a semi-colon");
}
        
- (void)test1334
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bbrk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bbrk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bbrk without a semi-colon");
}
        
- (void)test1335
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bbrk;"];
    NSArray *tokens = @[@[@"Character",@"‚éµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bbrk; with a semi-colon");
}
        
- (void)test1336
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bbrktbrk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bbrktbrk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bbrktbrk without a semi-colon");
}
        
- (void)test1337
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bbrktbrk;"];
    NSArray *tokens = @[@[@"Character",@"‚é∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bbrktbrk; with a semi-colon");
}
        
- (void)test1338
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bcong"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bcong"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bcong without a semi-colon");
}
        
- (void)test1339
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bcong;"];
    NSArray *tokens = @[@[@"Character",@"‚âå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bcong; with a semi-colon");
}
        
- (void)test1340
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bcy without a semi-colon");
}
        
- (void)test1341
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bcy;"];
    NSArray *tokens = @[@[@"Character",@"–±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bcy; with a semi-colon");
}
        
- (void)test1342
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bdquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bdquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bdquo without a semi-colon");
}
        
- (void)test1343
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bdquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Äû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bdquo; with a semi-colon");
}
        
- (void)test1344
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&becaus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&becaus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: becaus without a semi-colon");
}
        
- (void)test1345
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&becaus;"];
    NSArray *tokens = @[@[@"Character",@"‚àµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: becaus; with a semi-colon");
}
        
- (void)test1346
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&because"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&because"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: because without a semi-colon");
}
        
- (void)test1347
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&because;"];
    NSArray *tokens = @[@[@"Character",@"‚àµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: because; with a semi-colon");
}
        
- (void)test1348
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bemptyv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bemptyv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bemptyv without a semi-colon");
}
        
- (void)test1349
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bemptyv;"];
    NSArray *tokens = @[@[@"Character",@"‚¶∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bemptyv; with a semi-colon");
}
        
- (void)test1350
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bepsi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bepsi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bepsi without a semi-colon");
}
        
- (void)test1351
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bepsi;"];
    NSArray *tokens = @[@[@"Character",@"œ∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bepsi; with a semi-colon");
}
        
- (void)test1352
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bernou"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bernou"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bernou without a semi-colon");
}
        
- (void)test1353
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bernou;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bernou; with a semi-colon");
}
        
- (void)test1354
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&beta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&beta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: beta without a semi-colon");
}
        
- (void)test1355
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&beta;"];
    NSArray *tokens = @[@[@"Character",@"Œ≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: beta; with a semi-colon");
}
        
- (void)test1356
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&beth"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&beth"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: beth without a semi-colon");
}
        
- (void)test1357
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&beth;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: beth; with a semi-colon");
}
        
- (void)test1358
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&between"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&between"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: between without a semi-colon");
}
        
- (void)test1359
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&between;"];
    NSArray *tokens = @[@[@"Character",@"‚â¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: between; with a semi-colon");
}
        
- (void)test1360
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bfr without a semi-colon");
}
        
- (void)test1361
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bfr; with a semi-colon");
}
        
- (void)test1362
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigcap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigcap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigcap without a semi-colon");
}
        
- (void)test1363
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigcap;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigcap; with a semi-colon");
}
        
- (void)test1364
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigcirc without a semi-colon");
}
        
- (void)test1365
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigcirc;"];
    NSArray *tokens = @[@[@"Character",@"‚óØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigcirc; with a semi-colon");
}
        
- (void)test1366
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigcup without a semi-colon");
}
        
- (void)test1367
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigcup;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigcup; with a semi-colon");
}
        
- (void)test1368
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigodot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigodot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigodot without a semi-colon");
}
        
- (void)test1369
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigodot;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigodot; with a semi-colon");
}
        
- (void)test1370
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigoplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigoplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigoplus without a semi-colon");
}
        
- (void)test1371
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigoplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigoplus; with a semi-colon");
}
        
- (void)test1372
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigotimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigotimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigotimes without a semi-colon");
}
        
- (void)test1373
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigotimes;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigotimes; with a semi-colon");
}
        
- (void)test1374
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigsqcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigsqcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigsqcup without a semi-colon");
}
        
- (void)test1375
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigsqcup;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigsqcup; with a semi-colon");
}
        
- (void)test1376
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigstar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigstar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigstar without a semi-colon");
}
        
- (void)test1377
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigstar;"];
    NSArray *tokens = @[@[@"Character",@"‚òÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigstar; with a semi-colon");
}
        
- (void)test1378
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigtriangledown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigtriangledown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigtriangledown without a semi-colon");
}
        
- (void)test1379
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigtriangledown;"];
    NSArray *tokens = @[@[@"Character",@"‚ñΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigtriangledown; with a semi-colon");
}
        
- (void)test1380
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigtriangleup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigtriangleup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigtriangleup without a semi-colon");
}
        
- (void)test1381
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigtriangleup;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigtriangleup; with a semi-colon");
}
        
- (void)test1382
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&biguplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&biguplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: biguplus without a semi-colon");
}
        
- (void)test1383
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&biguplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: biguplus; with a semi-colon");
}
        
- (void)test1384
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigvee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigvee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigvee without a semi-colon");
}
        
- (void)test1385
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigvee;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigvee; with a semi-colon");
}
        
- (void)test1386
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigwedge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bigwedge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bigwedge without a semi-colon");
}
        
- (void)test1387
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bigwedge;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bigwedge; with a semi-colon");
}
        
- (void)test1388
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bkarow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bkarow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bkarow without a semi-colon");
}
        
- (void)test1389
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bkarow;"];
    NSArray *tokens = @[@[@"Character",@"‚§ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bkarow; with a semi-colon");
}
        
- (void)test1390
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacklozenge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blacklozenge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blacklozenge without a semi-colon");
}
        
- (void)test1391
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacklozenge;"];
    NSArray *tokens = @[@[@"Character",@"‚ß´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blacklozenge; with a semi-colon");
}
        
- (void)test1392
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacksquare"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blacksquare"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blacksquare without a semi-colon");
}
        
- (void)test1393
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacksquare;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blacksquare; with a semi-colon");
}
        
- (void)test1394
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blacktriangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blacktriangle without a semi-colon");
}
        
- (void)test1395
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangle;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blacktriangle; with a semi-colon");
}
        
- (void)test1396
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangledown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blacktriangledown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blacktriangledown without a semi-colon");
}
        
- (void)test1397
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangledown;"];
    NSArray *tokens = @[@[@"Character",@"‚ñæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blacktriangledown; with a semi-colon");
}
        
- (void)test1398
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangleleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blacktriangleleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blacktriangleleft without a semi-colon");
}
        
- (void)test1399
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangleleft;"];
    NSArray *tokens = @[@[@"Character",@"‚óÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blacktriangleleft; with a semi-colon");
}
        
- (void)test1400
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangleright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blacktriangleright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blacktriangleright without a semi-colon");
}
        
- (void)test1401
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blacktriangleright;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blacktriangleright; with a semi-colon");
}
        
- (void)test1402
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blank"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blank"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blank without a semi-colon");
}
        
- (void)test1403
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blank;"];
    NSArray *tokens = @[@[@"Character",@"‚ê£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blank; with a semi-colon");
}
        
- (void)test1404
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blk12"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blk12"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blk12 without a semi-colon");
}
        
- (void)test1405
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blk12;"];
    NSArray *tokens = @[@[@"Character",@"‚ñí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blk12; with a semi-colon");
}
        
- (void)test1406
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blk14"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blk14"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blk14 without a semi-colon");
}
        
- (void)test1407
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blk14;"];
    NSArray *tokens = @[@[@"Character",@"‚ñë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blk14; with a semi-colon");
}
        
- (void)test1408
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blk34"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&blk34"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: blk34 without a semi-colon");
}
        
- (void)test1409
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&blk34;"];
    NSArray *tokens = @[@[@"Character",@"‚ñì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: blk34; with a semi-colon");
}
        
- (void)test1410
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&block"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&block"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: block without a semi-colon");
}
        
- (void)test1411
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&block;"];
    NSArray *tokens = @[@[@"Character",@"‚ñà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: block; with a semi-colon");
}
        
- (void)test1412
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bne without a semi-colon");
}
        
- (void)test1413
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bne;"];
    NSArray *tokens = @[@[@"Character",@"=‚É•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bne; with a semi-colon");
}
        
- (void)test1414
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bnequiv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bnequiv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bnequiv without a semi-colon");
}
        
- (void)test1415
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bnequiv;"];
    NSArray *tokens = @[@[@"Character",@"‚â°‚É•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bnequiv; with a semi-colon");
}
        
- (void)test1416
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bnot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bnot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bnot without a semi-colon");
}
        
- (void)test1417
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bnot;"];
    NSArray *tokens = @[@[@"Character",@"‚åê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bnot; with a semi-colon");
}
        
- (void)test1418
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bopf without a semi-colon");
}
        
- (void)test1419
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bopf; with a semi-colon");
}
        
- (void)test1420
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bot without a semi-colon");
}
        
- (void)test1421
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bot;"];
    NSArray *tokens = @[@[@"Character",@"‚ä•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bot; with a semi-colon");
}
        
- (void)test1422
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bottom"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bottom"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bottom without a semi-colon");
}
        
- (void)test1423
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bottom;"];
    NSArray *tokens = @[@[@"Character",@"‚ä•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bottom; with a semi-colon");
}
        
- (void)test1424
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bowtie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bowtie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bowtie without a semi-colon");
}
        
- (void)test1425
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bowtie;"];
    NSArray *tokens = @[@[@"Character",@"‚ãà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bowtie; with a semi-colon");
}
        
- (void)test1426
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDL"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxDL"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxDL without a semi-colon");
}
        
- (void)test1427
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDL;"];
    NSArray *tokens = @[@[@"Character",@"‚ïó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxDL; with a semi-colon");
}
        
- (void)test1428
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDR"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxDR"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxDR without a semi-colon");
}
        
- (void)test1429
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDR;"];
    NSArray *tokens = @[@[@"Character",@"‚ïî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxDR; with a semi-colon");
}
        
- (void)test1430
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxDl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxDl without a semi-colon");
}
        
- (void)test1431
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDl;"];
    NSArray *tokens = @[@[@"Character",@"‚ïñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxDl; with a semi-colon");
}
        
- (void)test1432
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxDr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxDr without a semi-colon");
}
        
- (void)test1433
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxDr;"];
    NSArray *tokens = @[@[@"Character",@"‚ïì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxDr; with a semi-colon");
}
        
- (void)test1434
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxH"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxH"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxH without a semi-colon");
}
        
- (void)test1435
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxH;"];
    NSArray *tokens = @[@[@"Character",@"‚ïê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxH; with a semi-colon");
}
        
- (void)test1436
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHD"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxHD"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxHD without a semi-colon");
}
        
- (void)test1437
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHD;"];
    NSArray *tokens = @[@[@"Character",@"‚ï¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxHD; with a semi-colon");
}
        
- (void)test1438
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHU"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxHU"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxHU without a semi-colon");
}
        
- (void)test1439
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHU;"];
    NSArray *tokens = @[@[@"Character",@"‚ï©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxHU; with a semi-colon");
}
        
- (void)test1440
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxHd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxHd without a semi-colon");
}
        
- (void)test1441
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHd;"];
    NSArray *tokens = @[@[@"Character",@"‚ï§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxHd; with a semi-colon");
}
        
- (void)test1442
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxHu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxHu without a semi-colon");
}
        
- (void)test1443
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxHu;"];
    NSArray *tokens = @[@[@"Character",@"‚ïß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxHu; with a semi-colon");
}
        
- (void)test1444
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUL"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxUL"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxUL without a semi-colon");
}
        
- (void)test1445
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUL;"];
    NSArray *tokens = @[@[@"Character",@"‚ïù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxUL; with a semi-colon");
}
        
- (void)test1446
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUR"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxUR"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxUR without a semi-colon");
}
        
- (void)test1447
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUR;"];
    NSArray *tokens = @[@[@"Character",@"‚ïö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxUR; with a semi-colon");
}
        
- (void)test1448
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxUl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxUl without a semi-colon");
}
        
- (void)test1449
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUl;"];
    NSArray *tokens = @[@[@"Character",@"‚ïú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxUl; with a semi-colon");
}
        
- (void)test1450
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxUr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxUr without a semi-colon");
}
        
- (void)test1451
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxUr;"];
    NSArray *tokens = @[@[@"Character",@"‚ïô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxUr; with a semi-colon");
}
        
- (void)test1452
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxV"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxV"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxV without a semi-colon");
}
        
- (void)test1453
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxV;"];
    NSArray *tokens = @[@[@"Character",@"‚ïë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxV; with a semi-colon");
}
        
- (void)test1454
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVH"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxVH"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxVH without a semi-colon");
}
        
- (void)test1455
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVH;"];
    NSArray *tokens = @[@[@"Character",@"‚ï¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxVH; with a semi-colon");
}
        
- (void)test1456
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVL"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxVL"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxVL without a semi-colon");
}
        
- (void)test1457
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVL;"];
    NSArray *tokens = @[@[@"Character",@"‚ï£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxVL; with a semi-colon");
}
        
- (void)test1458
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVR"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxVR"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxVR without a semi-colon");
}
        
- (void)test1459
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVR;"];
    NSArray *tokens = @[@[@"Character",@"‚ï†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxVR; with a semi-colon");
}
        
- (void)test1460
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxVh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxVh without a semi-colon");
}
        
- (void)test1461
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVh;"];
    NSArray *tokens = @[@[@"Character",@"‚ï´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxVh; with a semi-colon");
}
        
- (void)test1462
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxVl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxVl without a semi-colon");
}
        
- (void)test1463
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVl;"];
    NSArray *tokens = @[@[@"Character",@"‚ï¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxVl; with a semi-colon");
}
        
- (void)test1464
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxVr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxVr without a semi-colon");
}
        
- (void)test1465
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxVr;"];
    NSArray *tokens = @[@[@"Character",@"‚ïü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxVr; with a semi-colon");
}
        
- (void)test1466
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxbox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxbox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxbox without a semi-colon");
}
        
- (void)test1467
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxbox;"];
    NSArray *tokens = @[@[@"Character",@"‚ßâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxbox; with a semi-colon");
}
        
- (void)test1468
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdL"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxdL"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxdL without a semi-colon");
}
        
- (void)test1469
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdL;"];
    NSArray *tokens = @[@[@"Character",@"‚ïï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxdL; with a semi-colon");
}
        
- (void)test1470
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdR"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxdR"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxdR without a semi-colon");
}
        
- (void)test1471
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdR;"];
    NSArray *tokens = @[@[@"Character",@"‚ïí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxdR; with a semi-colon");
}
        
- (void)test1472
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxdl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxdl without a semi-colon");
}
        
- (void)test1473
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdl;"];
    NSArray *tokens = @[@[@"Character",@"‚îê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxdl; with a semi-colon");
}
        
- (void)test1474
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxdr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxdr without a semi-colon");
}
        
- (void)test1475
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxdr;"];
    NSArray *tokens = @[@[@"Character",@"‚îå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxdr; with a semi-colon");
}
        
- (void)test1476
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxh without a semi-colon");
}
        
- (void)test1477
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxh;"];
    NSArray *tokens = @[@[@"Character",@"‚îÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxh; with a semi-colon");
}
        
- (void)test1478
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhD"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxhD"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxhD without a semi-colon");
}
        
- (void)test1479
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhD;"];
    NSArray *tokens = @[@[@"Character",@"‚ï•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxhD; with a semi-colon");
}
        
- (void)test1480
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhU"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxhU"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxhU without a semi-colon");
}
        
- (void)test1481
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhU;"];
    NSArray *tokens = @[@[@"Character",@"‚ï®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxhU; with a semi-colon");
}
        
- (void)test1482
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxhd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxhd without a semi-colon");
}
        
- (void)test1483
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhd;"];
    NSArray *tokens = @[@[@"Character",@"‚î¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxhd; with a semi-colon");
}
        
- (void)test1484
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxhu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxhu without a semi-colon");
}
        
- (void)test1485
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxhu;"];
    NSArray *tokens = @[@[@"Character",@"‚î¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxhu; with a semi-colon");
}
        
- (void)test1486
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxminus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxminus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxminus without a semi-colon");
}
        
- (void)test1487
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxminus;"];
    NSArray *tokens = @[@[@"Character",@"‚äü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxminus; with a semi-colon");
}
        
- (void)test1488
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxplus without a semi-colon");
}
        
- (void)test1489
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxplus;"];
    NSArray *tokens = @[@[@"Character",@"‚äû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxplus; with a semi-colon");
}
        
- (void)test1490
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxtimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxtimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxtimes without a semi-colon");
}
        
- (void)test1491
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxtimes;"];
    NSArray *tokens = @[@[@"Character",@"‚ä†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxtimes; with a semi-colon");
}
        
- (void)test1492
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxuL"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxuL"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxuL without a semi-colon");
}
        
- (void)test1493
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxuL;"];
    NSArray *tokens = @[@[@"Character",@"‚ïõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxuL; with a semi-colon");
}
        
- (void)test1494
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxuR"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxuR"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxuR without a semi-colon");
}
        
- (void)test1495
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxuR;"];
    NSArray *tokens = @[@[@"Character",@"‚ïò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxuR; with a semi-colon");
}
        
- (void)test1496
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxul"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxul"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxul without a semi-colon");
}
        
- (void)test1497
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxul;"];
    NSArray *tokens = @[@[@"Character",@"‚îò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxul; with a semi-colon");
}
        
- (void)test1498
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxur"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxur"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxur without a semi-colon");
}
        
- (void)test1499
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxur;"];
    NSArray *tokens = @[@[@"Character",@"‚îî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxur; with a semi-colon");
}
        
- (void)test1500
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxv without a semi-colon");
}
        
- (void)test1501
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxv;"];
    NSArray *tokens = @[@[@"Character",@"‚îÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxv; with a semi-colon");
}
        
- (void)test1502
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvH"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxvH"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxvH without a semi-colon");
}
        
- (void)test1503
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvH;"];
    NSArray *tokens = @[@[@"Character",@"‚ï™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxvH; with a semi-colon");
}
        
- (void)test1504
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvL"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxvL"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxvL without a semi-colon");
}
        
- (void)test1505
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvL;"];
    NSArray *tokens = @[@[@"Character",@"‚ï°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxvL; with a semi-colon");
}
        
- (void)test1506
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvR"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxvR"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxvR without a semi-colon");
}
        
- (void)test1507
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvR;"];
    NSArray *tokens = @[@[@"Character",@"‚ïû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxvR; with a semi-colon");
}
        
- (void)test1508
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxvh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxvh without a semi-colon");
}
        
- (void)test1509
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvh;"];
    NSArray *tokens = @[@[@"Character",@"‚îº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxvh; with a semi-colon");
}
        
- (void)test1510
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxvl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxvl without a semi-colon");
}
        
- (void)test1511
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvl;"];
    NSArray *tokens = @[@[@"Character",@"‚î§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxvl; with a semi-colon");
}
        
- (void)test1512
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&boxvr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: boxvr without a semi-colon");
}
        
- (void)test1513
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&boxvr;"];
    NSArray *tokens = @[@[@"Character",@"‚îú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: boxvr; with a semi-colon");
}
        
- (void)test1514
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bprime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bprime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bprime without a semi-colon");
}
        
- (void)test1515
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bprime;"];
    NSArray *tokens = @[@[@"Character",@"‚Äµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bprime; with a semi-colon");
}
        
- (void)test1516
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&breve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&breve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: breve without a semi-colon");
}
        
- (void)test1517
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&breve;"];
    NSArray *tokens = @[@[@"Character",@"Àò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: breve; with a semi-colon");
}
        
- (void)test1518
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&brvbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: brvbar without a semi-colon");
}
        
- (void)test1519
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&brvbar;"];
    NSArray *tokens = @[@[@"Character",@"¬¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: brvbar; with a semi-colon");
}
        
- (void)test1520
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bscr without a semi-colon");
}
        
- (void)test1521
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bscr; with a semi-colon");
}
        
- (void)test1522
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsemi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bsemi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bsemi without a semi-colon");
}
        
- (void)test1523
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsemi;"];
    NSArray *tokens = @[@[@"Character",@"‚Åè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bsemi; with a semi-colon");
}
        
- (void)test1524
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bsim without a semi-colon");
}
        
- (void)test1525
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsim;"];
    NSArray *tokens = @[@[@"Character",@"‚àΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bsim; with a semi-colon");
}
        
- (void)test1526
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bsime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bsime without a semi-colon");
}
        
- (void)test1527
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsime;"];
    NSArray *tokens = @[@[@"Character",@"‚ãç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bsime; with a semi-colon");
}
        
- (void)test1528
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsol"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bsol"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bsol without a semi-colon");
}
        
- (void)test1529
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsol;"];
    NSArray *tokens = @[@[@"Character",@"\\"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bsol; with a semi-colon");
}
        
- (void)test1530
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsolb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bsolb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bsolb without a semi-colon");
}
        
- (void)test1531
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsolb;"];
    NSArray *tokens = @[@[@"Character",@"‚ßÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bsolb; with a semi-colon");
}
        
- (void)test1532
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsolhsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bsolhsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bsolhsub without a semi-colon");
}
        
- (void)test1533
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bsolhsub;"];
    NSArray *tokens = @[@[@"Character",@"‚üà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bsolhsub; with a semi-colon");
}
        
- (void)test1534
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bull"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bull"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bull without a semi-colon");
}
        
- (void)test1535
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bull;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bull; with a semi-colon");
}
        
- (void)test1536
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bullet"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bullet"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bullet without a semi-colon");
}
        
- (void)test1537
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bullet;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bullet; with a semi-colon");
}
        
- (void)test1538
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bump"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bump"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bump without a semi-colon");
}
        
- (void)test1539
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bump;"];
    NSArray *tokens = @[@[@"Character",@"‚âé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bump; with a semi-colon");
}
        
- (void)test1540
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bumpE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bumpE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bumpE without a semi-colon");
}
        
- (void)test1541
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bumpE;"];
    NSArray *tokens = @[@[@"Character",@"‚™Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bumpE; with a semi-colon");
}
        
- (void)test1542
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bumpe"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bumpe"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bumpe without a semi-colon");
}
        
- (void)test1543
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bumpe;"];
    NSArray *tokens = @[@[@"Character",@"‚âè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bumpe; with a semi-colon");
}
        
- (void)test1544
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bumpeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&bumpeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: bumpeq without a semi-colon");
}
        
- (void)test1545
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&bumpeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: bumpeq; with a semi-colon");
}
        
- (void)test1546
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cacute without a semi-colon");
}
        
- (void)test1547
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cacute;"];
    NSArray *tokens = @[@[@"Character",@"ƒá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cacute; with a semi-colon");
}
        
- (void)test1548
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cap without a semi-colon");
}
        
- (void)test1549
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cap;"];
    NSArray *tokens = @[@[@"Character",@"‚à©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cap; with a semi-colon");
}
        
- (void)test1550
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capand"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&capand"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: capand without a semi-colon");
}
        
- (void)test1551
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capand;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: capand; with a semi-colon");
}
        
- (void)test1552
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capbrcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&capbrcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: capbrcup without a semi-colon");
}
        
- (void)test1553
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capbrcup;"];
    NSArray *tokens = @[@[@"Character",@"‚©â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: capbrcup; with a semi-colon");
}
        
- (void)test1554
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capcap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&capcap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: capcap without a semi-colon");
}
        
- (void)test1555
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capcap;"];
    NSArray *tokens = @[@[@"Character",@"‚©ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: capcap; with a semi-colon");
}
        
- (void)test1556
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&capcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: capcup without a semi-colon");
}
        
- (void)test1557
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capcup;"];
    NSArray *tokens = @[@[@"Character",@"‚©á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: capcup; with a semi-colon");
}
        
- (void)test1558
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&capdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: capdot without a semi-colon");
}
        
- (void)test1559
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&capdot;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: capdot; with a semi-colon");
}
        
- (void)test1560
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&caps"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&caps"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: caps without a semi-colon");
}
        
- (void)test1561
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&caps;"];
    NSArray *tokens = @[@[@"Character",@"‚à©Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: caps; with a semi-colon");
}
        
- (void)test1562
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&caret"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&caret"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: caret without a semi-colon");
}
        
- (void)test1563
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&caret;"];
    NSArray *tokens = @[@[@"Character",@"‚ÅÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: caret; with a semi-colon");
}
        
- (void)test1564
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&caron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&caron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: caron without a semi-colon");
}
        
- (void)test1565
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&caron;"];
    NSArray *tokens = @[@[@"Character",@"Àá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: caron; with a semi-colon");
}
        
- (void)test1566
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccaps"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ccaps"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ccaps without a semi-colon");
}
        
- (void)test1567
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccaps;"];
    NSArray *tokens = @[@[@"Character",@"‚©ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ccaps; with a semi-colon");
}
        
- (void)test1568
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ccaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ccaron without a semi-colon");
}
        
- (void)test1569
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ccaron; with a semi-colon");
}
        
- (void)test1570
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ccedil without a semi-colon");
}
        
- (void)test1571
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccedil;"];
    NSArray *tokens = @[@[@"Character",@"√ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ccedil; with a semi-colon");
}
        
- (void)test1572
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ccirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ccirc without a semi-colon");
}
        
- (void)test1573
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ccirc; with a semi-colon");
}
        
- (void)test1574
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccups"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ccups"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ccups without a semi-colon");
}
        
- (void)test1575
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccups;"];
    NSArray *tokens = @[@[@"Character",@"‚©å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ccups; with a semi-colon");
}
        
- (void)test1576
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccupssm"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ccupssm"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ccupssm without a semi-colon");
}
        
- (void)test1577
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ccupssm;"];
    NSArray *tokens = @[@[@"Character",@"‚©ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ccupssm; with a semi-colon");
}
        
- (void)test1578
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cdot without a semi-colon");
}
        
- (void)test1579
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cdot;"];
    NSArray *tokens = @[@[@"Character",@"ƒã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cdot; with a semi-colon");
}
        
- (void)test1580
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cedil without a semi-colon");
}
        
- (void)test1581
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cedil;"];
    NSArray *tokens = @[@[@"Character",@"¬∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cedil; with a semi-colon");
}
        
- (void)test1582
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cemptyv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cemptyv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cemptyv without a semi-colon");
}
        
- (void)test1583
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cemptyv;"];
    NSArray *tokens = @[@[@"Character",@"‚¶≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cemptyv; with a semi-colon");
}
        
- (void)test1584
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cent"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cent without a semi-colon");
}
        
- (void)test1585
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cent;"];
    NSArray *tokens = @[@[@"Character",@"¬¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cent; with a semi-colon");
}
        
- (void)test1586
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&centerdot;"];
    NSArray *tokens = @[@[@"Character",@"¬∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: centerdot; with a semi-colon");
}
        
- (void)test1587
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cfr without a semi-colon");
}
        
- (void)test1588
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cfr; with a semi-colon");
}
        
- (void)test1589
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&chcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&chcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: chcy without a semi-colon");
}
        
- (void)test1590
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&chcy;"];
    NSArray *tokens = @[@[@"Character",@"—á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: chcy; with a semi-colon");
}
        
- (void)test1591
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&check"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&check"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: check without a semi-colon");
}
        
- (void)test1592
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&check;"];
    NSArray *tokens = @[@[@"Character",@"‚úì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: check; with a semi-colon");
}
        
- (void)test1593
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&checkmark"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&checkmark"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: checkmark without a semi-colon");
}
        
- (void)test1594
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&checkmark;"];
    NSArray *tokens = @[@[@"Character",@"‚úì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: checkmark; with a semi-colon");
}
        
- (void)test1595
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&chi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&chi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: chi without a semi-colon");
}
        
- (void)test1596
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&chi;"];
    NSArray *tokens = @[@[@"Character",@"œá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: chi; with a semi-colon");
}
        
- (void)test1597
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cir without a semi-colon");
}
        
- (void)test1598
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cir;"];
    NSArray *tokens = @[@[@"Character",@"‚óã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cir; with a semi-colon");
}
        
- (void)test1599
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cirE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cirE without a semi-colon");
}
        
- (void)test1600
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirE;"];
    NSArray *tokens = @[@[@"Character",@"‚ßÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cirE; with a semi-colon");
}
        
- (void)test1601
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circ"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circ without a semi-colon");
}
        
- (void)test1602
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circ;"];
    NSArray *tokens = @[@[@"Character",@"ÀÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circ; with a semi-colon");
}
        
- (void)test1603
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circeq without a semi-colon");
}
        
- (void)test1604
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circeq; with a semi-colon");
}
        
- (void)test1605
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circlearrowleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circlearrowleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circlearrowleft without a semi-colon");
}
        
- (void)test1606
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circlearrowleft;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circlearrowleft; with a semi-colon");
}
        
- (void)test1607
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circlearrowright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circlearrowright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circlearrowright without a semi-colon");
}
        
- (void)test1608
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circlearrowright;"];
    NSArray *tokens = @[@[@"Character",@"‚Üª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circlearrowright; with a semi-colon");
}
        
- (void)test1609
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledR"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circledR"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circledR without a semi-colon");
}
        
- (void)test1610
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledR;"];
    NSArray *tokens = @[@[@"Character",@"¬Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circledR; with a semi-colon");
}
        
- (void)test1611
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledS"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circledS"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circledS without a semi-colon");
}
        
- (void)test1612
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledS;"];
    NSArray *tokens = @[@[@"Character",@"‚ìà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circledS; with a semi-colon");
}
        
- (void)test1613
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledast"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circledast"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circledast without a semi-colon");
}
        
- (void)test1614
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledast;"];
    NSArray *tokens = @[@[@"Character",@"‚äõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circledast; with a semi-colon");
}
        
- (void)test1615
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circledcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circledcirc without a semi-colon");
}
        
- (void)test1616
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circledcirc;"];
    NSArray *tokens = @[@[@"Character",@"‚äö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circledcirc; with a semi-colon");
}
        
- (void)test1617
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circleddash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&circleddash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: circleddash without a semi-colon");
}
        
- (void)test1618
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&circleddash;"];
    NSArray *tokens = @[@[@"Character",@"‚äù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: circleddash; with a semi-colon");
}
        
- (void)test1619
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cire"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cire"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cire without a semi-colon");
}
        
- (void)test1620
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cire;"];
    NSArray *tokens = @[@[@"Character",@"‚âó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cire; with a semi-colon");
}
        
- (void)test1621
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirfnint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cirfnint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cirfnint without a semi-colon");
}
        
- (void)test1622
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirfnint;"];
    NSArray *tokens = @[@[@"Character",@"‚®ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cirfnint; with a semi-colon");
}
        
- (void)test1623
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirmid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cirmid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cirmid without a semi-colon");
}
        
- (void)test1624
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirmid;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cirmid; with a semi-colon");
}
        
- (void)test1625
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirscir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cirscir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cirscir without a semi-colon");
}
        
- (void)test1626
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cirscir;"];
    NSArray *tokens = @[@[@"Character",@"‚ßÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cirscir; with a semi-colon");
}
        
- (void)test1627
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&clubs"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&clubs"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: clubs without a semi-colon");
}
        
- (void)test1628
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&clubs;"];
    NSArray *tokens = @[@[@"Character",@"‚ô£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: clubs; with a semi-colon");
}
        
- (void)test1629
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&clubsuit"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&clubsuit"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: clubsuit without a semi-colon");
}
        
- (void)test1630
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&clubsuit;"];
    NSArray *tokens = @[@[@"Character",@"‚ô£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: clubsuit; with a semi-colon");
}
        
- (void)test1631
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&colon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&colon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: colon without a semi-colon");
}
        
- (void)test1632
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&colon;"];
    NSArray *tokens = @[@[@"Character",@":"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: colon; with a semi-colon");
}
        
- (void)test1633
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&colone"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&colone"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: colone without a semi-colon");
}
        
- (void)test1634
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&colone;"];
    NSArray *tokens = @[@[@"Character",@"‚âî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: colone; with a semi-colon");
}
        
- (void)test1635
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&coloneq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&coloneq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: coloneq without a semi-colon");
}
        
- (void)test1636
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&coloneq;"];
    NSArray *tokens = @[@[@"Character",@"‚âî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: coloneq; with a semi-colon");
}
        
- (void)test1637
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&comma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&comma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: comma without a semi-colon");
}
        
- (void)test1638
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&comma;"];
    NSArray *tokens = @[@[@"Character",@","]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: comma; with a semi-colon");
}
        
- (void)test1639
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&commat"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&commat"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: commat without a semi-colon");
}
        
- (void)test1640
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&commat;"];
    NSArray *tokens = @[@[@"Character",@"@"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: commat; with a semi-colon");
}
        
- (void)test1641
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&comp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&comp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: comp without a semi-colon");
}
        
- (void)test1642
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&comp;"];
    NSArray *tokens = @[@[@"Character",@"‚àÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: comp; with a semi-colon");
}
        
- (void)test1643
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&compfn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&compfn"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: compfn without a semi-colon");
}
        
- (void)test1644
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&compfn;"];
    NSArray *tokens = @[@[@"Character",@"‚àò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: compfn; with a semi-colon");
}
        
- (void)test1645
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&complement"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&complement"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: complement without a semi-colon");
}
        
- (void)test1646
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&complement;"];
    NSArray *tokens = @[@[@"Character",@"‚àÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: complement; with a semi-colon");
}
        
- (void)test1647
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&complexes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&complexes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: complexes without a semi-colon");
}
        
- (void)test1648
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&complexes;"];
    NSArray *tokens = @[@[@"Character",@"‚ÑÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: complexes; with a semi-colon");
}
        
- (void)test1649
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cong"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cong"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cong without a semi-colon");
}
        
- (void)test1650
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cong;"];
    NSArray *tokens = @[@[@"Character",@"‚âÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cong; with a semi-colon");
}
        
- (void)test1651
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&congdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&congdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: congdot without a semi-colon");
}
        
- (void)test1652
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&congdot;"];
    NSArray *tokens = @[@[@"Character",@"‚©≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: congdot; with a semi-colon");
}
        
- (void)test1653
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&conint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&conint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: conint without a semi-colon");
}
        
- (void)test1654
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&conint;"];
    NSArray *tokens = @[@[@"Character",@"‚àÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: conint; with a semi-colon");
}
        
- (void)test1655
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&copf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&copf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: copf without a semi-colon");
}
        
- (void)test1656
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&copf;"];
    NSArray *tokens = @[@[@"Character",@"ùïî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: copf; with a semi-colon");
}
        
- (void)test1657
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&coprod"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&coprod"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: coprod without a semi-colon");
}
        
- (void)test1658
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&coprod;"];
    NSArray *tokens = @[@[@"Character",@"‚àê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: coprod; with a semi-colon");
}
        
- (void)test1659
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&copy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: copy without a semi-colon");
}
        
- (void)test1660
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&copy;"];
    NSArray *tokens = @[@[@"Character",@"¬©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: copy; with a semi-colon");
}
        
- (void)test1661
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&copysr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: copysr; with a semi-colon");
}
        
- (void)test1662
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&crarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&crarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: crarr without a semi-colon");
}
        
- (void)test1663
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&crarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: crarr; with a semi-colon");
}
        
- (void)test1664
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cross"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cross"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cross without a semi-colon");
}
        
- (void)test1665
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cross;"];
    NSArray *tokens = @[@[@"Character",@"‚úó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cross; with a semi-colon");
}
        
- (void)test1666
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cscr without a semi-colon");
}
        
- (void)test1667
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cscr;"];
    NSArray *tokens = @[@[@"Character",@"ùí∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cscr; with a semi-colon");
}
        
- (void)test1668
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&csub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: csub without a semi-colon");
}
        
- (void)test1669
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csub;"];
    NSArray *tokens = @[@[@"Character",@"‚´è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: csub; with a semi-colon");
}
        
- (void)test1670
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csube"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&csube"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: csube without a semi-colon");
}
        
- (void)test1671
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csube;"];
    NSArray *tokens = @[@[@"Character",@"‚´ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: csube; with a semi-colon");
}
        
- (void)test1672
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&csup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: csup without a semi-colon");
}
        
- (void)test1673
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csup;"];
    NSArray *tokens = @[@[@"Character",@"‚´ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: csup; with a semi-colon");
}
        
- (void)test1674
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csupe"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&csupe"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: csupe without a semi-colon");
}
        
- (void)test1675
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&csupe;"];
    NSArray *tokens = @[@[@"Character",@"‚´í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: csupe; with a semi-colon");
}
        
- (void)test1676
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ctdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ctdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ctdot without a semi-colon");
}
        
- (void)test1677
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ctdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ctdot; with a semi-colon");
}
        
- (void)test1678
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cudarrl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cudarrl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cudarrl without a semi-colon");
}
        
- (void)test1679
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cudarrl;"];
    NSArray *tokens = @[@[@"Character",@"‚§∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cudarrl; with a semi-colon");
}
        
- (void)test1680
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cudarrr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cudarrr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cudarrr without a semi-colon");
}
        
- (void)test1681
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cudarrr;"];
    NSArray *tokens = @[@[@"Character",@"‚§µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cudarrr; with a semi-colon");
}
        
- (void)test1682
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuepr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cuepr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cuepr without a semi-colon");
}
        
- (void)test1683
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuepr;"];
    NSArray *tokens = @[@[@"Character",@"‚ãû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cuepr; with a semi-colon");
}
        
- (void)test1684
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuesc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cuesc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cuesc without a semi-colon");
}
        
- (void)test1685
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuesc;"];
    NSArray *tokens = @[@[@"Character",@"‚ãü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cuesc; with a semi-colon");
}
        
- (void)test1686
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cularr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cularr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cularr without a semi-colon");
}
        
- (void)test1687
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cularr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cularr; with a semi-colon");
}
        
- (void)test1688
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cularrp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cularrp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cularrp without a semi-colon");
}
        
- (void)test1689
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cularrp;"];
    NSArray *tokens = @[@[@"Character",@"‚§Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cularrp; with a semi-colon");
}
        
- (void)test1690
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cup without a semi-colon");
}
        
- (void)test1691
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cup;"];
    NSArray *tokens = @[@[@"Character",@"‚à™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cup; with a semi-colon");
}
        
- (void)test1692
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupbrcap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cupbrcap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cupbrcap without a semi-colon");
}
        
- (void)test1693
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupbrcap;"];
    NSArray *tokens = @[@[@"Character",@"‚©à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cupbrcap; with a semi-colon");
}
        
- (void)test1694
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupcap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cupcap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cupcap without a semi-colon");
}
        
- (void)test1695
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupcap;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cupcap; with a semi-colon");
}
        
- (void)test1696
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cupcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cupcup without a semi-colon");
}
        
- (void)test1697
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupcup;"];
    NSArray *tokens = @[@[@"Character",@"‚©ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cupcup; with a semi-colon");
}
        
- (void)test1698
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cupdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cupdot without a semi-colon");
}
        
- (void)test1699
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupdot;"];
    NSArray *tokens = @[@[@"Character",@"‚äç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cupdot; with a semi-colon");
}
        
- (void)test1700
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cupor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cupor without a semi-colon");
}
        
- (void)test1701
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cupor;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cupor; with a semi-colon");
}
        
- (void)test1702
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cups"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cups"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cups without a semi-colon");
}
        
- (void)test1703
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cups;"];
    NSArray *tokens = @[@[@"Character",@"‚à™Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cups; with a semi-colon");
}
        
- (void)test1704
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curarr without a semi-colon");
}
        
- (void)test1705
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curarr; with a semi-colon");
}
        
- (void)test1706
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curarrm"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curarrm"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curarrm without a semi-colon");
}
        
- (void)test1707
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curarrm;"];
    NSArray *tokens = @[@[@"Character",@"‚§º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curarrm; with a semi-colon");
}
        
- (void)test1708
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlyeqprec"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curlyeqprec"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curlyeqprec without a semi-colon");
}
        
- (void)test1709
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlyeqprec;"];
    NSArray *tokens = @[@[@"Character",@"‚ãû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curlyeqprec; with a semi-colon");
}
        
- (void)test1710
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlyeqsucc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curlyeqsucc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curlyeqsucc without a semi-colon");
}
        
- (void)test1711
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlyeqsucc;"];
    NSArray *tokens = @[@[@"Character",@"‚ãü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curlyeqsucc; with a semi-colon");
}
        
- (void)test1712
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlyvee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curlyvee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curlyvee without a semi-colon");
}
        
- (void)test1713
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlyvee;"];
    NSArray *tokens = @[@[@"Character",@"‚ãé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curlyvee; with a semi-colon");
}
        
- (void)test1714
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlywedge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curlywedge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curlywedge without a semi-colon");
}
        
- (void)test1715
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curlywedge;"];
    NSArray *tokens = @[@[@"Character",@"‚ãè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curlywedge; with a semi-colon");
}
        
- (void)test1716
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curren"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curren without a semi-colon");
}
        
- (void)test1717
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curren;"];
    NSArray *tokens = @[@[@"Character",@"¬§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curren; with a semi-colon");
}
        
- (void)test1718
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curvearrowleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curvearrowleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curvearrowleft without a semi-colon");
}
        
- (void)test1719
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curvearrowleft;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curvearrowleft; with a semi-colon");
}
        
- (void)test1720
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curvearrowright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&curvearrowright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: curvearrowright without a semi-colon");
}
        
- (void)test1721
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&curvearrowright;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: curvearrowright; with a semi-colon");
}
        
- (void)test1722
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuvee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cuvee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cuvee without a semi-colon");
}
        
- (void)test1723
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuvee;"];
    NSArray *tokens = @[@[@"Character",@"‚ãé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cuvee; with a semi-colon");
}
        
- (void)test1724
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuwed"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cuwed"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cuwed without a semi-colon");
}
        
- (void)test1725
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cuwed;"];
    NSArray *tokens = @[@[@"Character",@"‚ãè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cuwed; with a semi-colon");
}
        
- (void)test1726
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cwconint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cwconint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cwconint without a semi-colon");
}
        
- (void)test1727
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cwconint;"];
    NSArray *tokens = @[@[@"Character",@"‚à≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cwconint; with a semi-colon");
}
        
- (void)test1728
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cwint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cwint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cwint without a semi-colon");
}
        
- (void)test1729
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cwint;"];
    NSArray *tokens = @[@[@"Character",@"‚à±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cwint; with a semi-colon");
}
        
- (void)test1730
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cylcty"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&cylcty"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: cylcty without a semi-colon");
}
        
- (void)test1731
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&cylcty;"];
    NSArray *tokens = @[@[@"Character",@"‚å≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: cylcty; with a semi-colon");
}
        
- (void)test1732
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dArr without a semi-colon");
}
        
- (void)test1733
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dArr; with a semi-colon");
}
        
- (void)test1734
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dHar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dHar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dHar without a semi-colon");
}
        
- (void)test1735
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dHar;"];
    NSArray *tokens = @[@[@"Character",@"‚••"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dHar; with a semi-colon");
}
        
- (void)test1736
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dagger"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dagger"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dagger without a semi-colon");
}
        
- (void)test1737
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dagger;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dagger; with a semi-colon");
}
        
- (void)test1738
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&daleth"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&daleth"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: daleth without a semi-colon");
}
        
- (void)test1739
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&daleth;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: daleth; with a semi-colon");
}
        
- (void)test1740
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&darr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&darr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: darr without a semi-colon");
}
        
- (void)test1741
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&darr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: darr; with a semi-colon");
}
        
- (void)test1742
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dash without a semi-colon");
}
        
- (void)test1743
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dash;"];
    NSArray *tokens = @[@[@"Character",@"‚Äê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dash; with a semi-colon");
}
        
- (void)test1744
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dashv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dashv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dashv without a semi-colon");
}
        
- (void)test1745
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dashv;"];
    NSArray *tokens = @[@[@"Character",@"‚ä£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dashv; with a semi-colon");
}
        
- (void)test1746
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dbkarow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dbkarow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dbkarow without a semi-colon");
}
        
- (void)test1747
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dbkarow;"];
    NSArray *tokens = @[@[@"Character",@"‚§è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dbkarow; with a semi-colon");
}
        
- (void)test1748
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dblac"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dblac"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dblac without a semi-colon");
}
        
- (void)test1749
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dblac;"];
    NSArray *tokens = @[@[@"Character",@"Àù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dblac; with a semi-colon");
}
        
- (void)test1750
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dcaron without a semi-colon");
}
        
- (void)test1751
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dcaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dcaron; with a semi-colon");
}
        
- (void)test1752
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dcy without a semi-colon");
}
        
- (void)test1753
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dcy;"];
    NSArray *tokens = @[@[@"Character",@"–¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dcy; with a semi-colon");
}
        
- (void)test1754
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dd without a semi-colon");
}
        
- (void)test1755
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dd;"];
    NSArray *tokens = @[@[@"Character",@"‚ÖÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dd; with a semi-colon");
}
        
- (void)test1756
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ddagger"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ddagger"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ddagger without a semi-colon");
}
        
- (void)test1757
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ddagger;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ddagger; with a semi-colon");
}
        
- (void)test1758
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ddarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ddarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ddarr without a semi-colon");
}
        
- (void)test1759
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ddarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ddarr; with a semi-colon");
}
        
- (void)test1760
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ddotseq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ddotseq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ddotseq without a semi-colon");
}
        
- (void)test1761
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ddotseq;"];
    NSArray *tokens = @[@[@"Character",@"‚©∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ddotseq; with a semi-colon");
}
        
- (void)test1762
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&deg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: deg without a semi-colon");
}
        
- (void)test1763
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&deg;"];
    NSArray *tokens = @[@[@"Character",@"¬∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: deg; with a semi-colon");
}
        
- (void)test1764
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&delta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&delta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: delta without a semi-colon");
}
        
- (void)test1765
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&delta;"];
    NSArray *tokens = @[@[@"Character",@"Œ¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: delta; with a semi-colon");
}
        
- (void)test1766
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&demptyv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&demptyv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: demptyv without a semi-colon");
}
        
- (void)test1767
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&demptyv;"];
    NSArray *tokens = @[@[@"Character",@"‚¶±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: demptyv; with a semi-colon");
}
        
- (void)test1768
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dfisht"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dfisht"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dfisht without a semi-colon");
}
        
- (void)test1769
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dfisht;"];
    NSArray *tokens = @[@[@"Character",@"‚•ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dfisht; with a semi-colon");
}
        
- (void)test1770
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dfr without a semi-colon");
}
        
- (void)test1771
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dfr; with a semi-colon");
}
        
- (void)test1772
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dharl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dharl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dharl without a semi-colon");
}
        
- (void)test1773
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dharl;"];
    NSArray *tokens = @[@[@"Character",@"‚áÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dharl; with a semi-colon");
}
        
- (void)test1774
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dharr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dharr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dharr without a semi-colon");
}
        
- (void)test1775
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dharr;"];
    NSArray *tokens = @[@[@"Character",@"‚áÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dharr; with a semi-colon");
}
        
- (void)test1776
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diam"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&diam"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: diam without a semi-colon");
}
        
- (void)test1777
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diam;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: diam; with a semi-colon");
}
        
- (void)test1778
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diamond"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&diamond"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: diamond without a semi-colon");
}
        
- (void)test1779
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diamond;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: diamond; with a semi-colon");
}
        
- (void)test1780
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diamondsuit"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&diamondsuit"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: diamondsuit without a semi-colon");
}
        
- (void)test1781
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diamondsuit;"];
    NSArray *tokens = @[@[@"Character",@"‚ô¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: diamondsuit; with a semi-colon");
}
        
- (void)test1782
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diams"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&diams"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: diams without a semi-colon");
}
        
- (void)test1783
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&diams;"];
    NSArray *tokens = @[@[@"Character",@"‚ô¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: diams; with a semi-colon");
}
        
- (void)test1784
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&die"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&die"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: die without a semi-colon");
}
        
- (void)test1785
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&die;"];
    NSArray *tokens = @[@[@"Character",@"¬®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: die; with a semi-colon");
}
        
- (void)test1786
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&digamma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&digamma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: digamma without a semi-colon");
}
        
- (void)test1787
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&digamma;"];
    NSArray *tokens = @[@[@"Character",@"œù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: digamma; with a semi-colon");
}
        
- (void)test1788
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&disin"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&disin"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: disin without a semi-colon");
}
        
- (void)test1789
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&disin;"];
    NSArray *tokens = @[@[@"Character",@"‚ã≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: disin; with a semi-colon");
}
        
- (void)test1790
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&div"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&div"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: div without a semi-colon");
}
        
- (void)test1791
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&div;"];
    NSArray *tokens = @[@[@"Character",@"√∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: div; with a semi-colon");
}
        
- (void)test1792
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&divide"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: divide without a semi-colon");
}
        
- (void)test1793
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&divide;"];
    NSArray *tokens = @[@[@"Character",@"√∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: divide; with a semi-colon");
}
        
- (void)test1794
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&divideontimes;"];
    NSArray *tokens = @[@[@"Character",@"‚ãá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: divideontimes; with a semi-colon");
}
        
- (void)test1795
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&divonx"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&divonx"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: divonx without a semi-colon");
}
        
- (void)test1796
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&divonx;"];
    NSArray *tokens = @[@[@"Character",@"‚ãá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: divonx; with a semi-colon");
}
        
- (void)test1797
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&djcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&djcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: djcy without a semi-colon");
}
        
- (void)test1798
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&djcy;"];
    NSArray *tokens = @[@[@"Character",@"—í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: djcy; with a semi-colon");
}
        
- (void)test1799
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dlcorn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dlcorn"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dlcorn without a semi-colon");
}
        
- (void)test1800
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dlcorn;"];
    NSArray *tokens = @[@[@"Character",@"‚åû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dlcorn; with a semi-colon");
}
        
- (void)test1801
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dlcrop"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dlcrop"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dlcrop without a semi-colon");
}
        
- (void)test1802
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dlcrop;"];
    NSArray *tokens = @[@[@"Character",@"‚åç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dlcrop; with a semi-colon");
}
        
- (void)test1803
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dollar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dollar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dollar without a semi-colon");
}
        
- (void)test1804
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dollar;"];
    NSArray *tokens = @[@[@"Character",@"$"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dollar; with a semi-colon");
}
        
- (void)test1805
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dopf without a semi-colon");
}
        
- (void)test1806
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dopf; with a semi-colon");
}
        
- (void)test1807
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dot without a semi-colon");
}
        
- (void)test1808
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dot;"];
    NSArray *tokens = @[@[@"Character",@"Àô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dot; with a semi-colon");
}
        
- (void)test1809
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&doteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&doteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: doteq without a semi-colon");
}
        
- (void)test1810
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&doteq;"];
    NSArray *tokens = @[@[@"Character",@"‚âê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: doteq; with a semi-colon");
}
        
- (void)test1811
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&doteqdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&doteqdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: doteqdot without a semi-colon");
}
        
- (void)test1812
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&doteqdot;"];
    NSArray *tokens = @[@[@"Character",@"‚âë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: doteqdot; with a semi-colon");
}
        
- (void)test1813
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dotminus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dotminus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dotminus without a semi-colon");
}
        
- (void)test1814
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dotminus;"];
    NSArray *tokens = @[@[@"Character",@"‚à∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dotminus; with a semi-colon");
}
        
- (void)test1815
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dotplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dotplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dotplus without a semi-colon");
}
        
- (void)test1816
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dotplus;"];
    NSArray *tokens = @[@[@"Character",@"‚àî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dotplus; with a semi-colon");
}
        
- (void)test1817
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dotsquare"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dotsquare"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dotsquare without a semi-colon");
}
        
- (void)test1818
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dotsquare;"];
    NSArray *tokens = @[@[@"Character",@"‚ä°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dotsquare; with a semi-colon");
}
        
- (void)test1819
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&doublebarwedge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&doublebarwedge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: doublebarwedge without a semi-colon");
}
        
- (void)test1820
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&doublebarwedge;"];
    NSArray *tokens = @[@[@"Character",@"‚åÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: doublebarwedge; with a semi-colon");
}
        
- (void)test1821
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&downarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: downarrow without a semi-colon");
}
        
- (void)test1822
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: downarrow; with a semi-colon");
}
        
- (void)test1823
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downdownarrows"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&downdownarrows"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: downdownarrows without a semi-colon");
}
        
- (void)test1824
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downdownarrows;"];
    NSArray *tokens = @[@[@"Character",@"‚áä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: downdownarrows; with a semi-colon");
}
        
- (void)test1825
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downharpoonleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&downharpoonleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: downharpoonleft without a semi-colon");
}
        
- (void)test1826
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downharpoonleft;"];
    NSArray *tokens = @[@[@"Character",@"‚áÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: downharpoonleft; with a semi-colon");
}
        
- (void)test1827
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downharpoonright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&downharpoonright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: downharpoonright without a semi-colon");
}
        
- (void)test1828
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&downharpoonright;"];
    NSArray *tokens = @[@[@"Character",@"‚áÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: downharpoonright; with a semi-colon");
}
        
- (void)test1829
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&drbkarow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&drbkarow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: drbkarow without a semi-colon");
}
        
- (void)test1830
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&drbkarow;"];
    NSArray *tokens = @[@[@"Character",@"‚§ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: drbkarow; with a semi-colon");
}
        
- (void)test1831
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&drcorn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&drcorn"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: drcorn without a semi-colon");
}
        
- (void)test1832
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&drcorn;"];
    NSArray *tokens = @[@[@"Character",@"‚åü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: drcorn; with a semi-colon");
}
        
- (void)test1833
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&drcrop"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&drcrop"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: drcrop without a semi-colon");
}
        
- (void)test1834
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&drcrop;"];
    NSArray *tokens = @[@[@"Character",@"‚åå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: drcrop; with a semi-colon");
}
        
- (void)test1835
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dscr without a semi-colon");
}
        
- (void)test1836
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dscr; with a semi-colon");
}
        
- (void)test1837
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dscy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dscy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dscy without a semi-colon");
}
        
- (void)test1838
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dscy;"];
    NSArray *tokens = @[@[@"Character",@"—ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dscy; with a semi-colon");
}
        
- (void)test1839
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dsol"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dsol"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dsol without a semi-colon");
}
        
- (void)test1840
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dsol;"];
    NSArray *tokens = @[@[@"Character",@"‚ß∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dsol; with a semi-colon");
}
        
- (void)test1841
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dstrok without a semi-colon");
}
        
- (void)test1842
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dstrok;"];
    NSArray *tokens = @[@[@"Character",@"ƒë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dstrok; with a semi-colon");
}
        
- (void)test1843
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dtdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dtdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dtdot without a semi-colon");
}
        
- (void)test1844
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dtdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ã±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dtdot; with a semi-colon");
}
        
- (void)test1845
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dtri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dtri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dtri without a semi-colon");
}
        
- (void)test1846
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dtri;"];
    NSArray *tokens = @[@[@"Character",@"‚ñø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dtri; with a semi-colon");
}
        
- (void)test1847
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dtrif"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dtrif"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dtrif without a semi-colon");
}
        
- (void)test1848
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dtrif;"];
    NSArray *tokens = @[@[@"Character",@"‚ñæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dtrif; with a semi-colon");
}
        
- (void)test1849
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&duarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&duarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: duarr without a semi-colon");
}
        
- (void)test1850
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&duarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: duarr; with a semi-colon");
}
        
- (void)test1851
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&duhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&duhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: duhar without a semi-colon");
}
        
- (void)test1852
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&duhar;"];
    NSArray *tokens = @[@[@"Character",@"‚•Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: duhar; with a semi-colon");
}
        
- (void)test1853
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dwangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dwangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dwangle without a semi-colon");
}
        
- (void)test1854
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dwangle;"];
    NSArray *tokens = @[@[@"Character",@"‚¶¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dwangle; with a semi-colon");
}
        
- (void)test1855
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dzcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dzcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dzcy without a semi-colon");
}
        
- (void)test1856
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dzcy;"];
    NSArray *tokens = @[@[@"Character",@"—ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dzcy; with a semi-colon");
}
        
- (void)test1857
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dzigrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&dzigrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: dzigrarr without a semi-colon");
}
        
- (void)test1858
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&dzigrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚üø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: dzigrarr; with a semi-colon");
}
        
- (void)test1859
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eDDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eDDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eDDot without a semi-colon");
}
        
- (void)test1860
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eDDot;"];
    NSArray *tokens = @[@[@"Character",@"‚©∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eDDot; with a semi-colon");
}
        
- (void)test1861
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eDot without a semi-colon");
}
        
- (void)test1862
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eDot;"];
    NSArray *tokens = @[@[@"Character",@"‚âë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eDot; with a semi-colon");
}
        
- (void)test1863
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eacute without a semi-colon");
}
        
- (void)test1864
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eacute;"];
    NSArray *tokens = @[@[@"Character",@"√©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eacute; with a semi-colon");
}
        
- (void)test1865
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&easter"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&easter"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: easter without a semi-colon");
}
        
- (void)test1866
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&easter;"];
    NSArray *tokens = @[@[@"Character",@"‚©Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: easter; with a semi-colon");
}
        
- (void)test1867
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ecaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ecaron without a semi-colon");
}
        
- (void)test1868
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ecaron; with a semi-colon");
}
        
- (void)test1869
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ecir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ecir without a semi-colon");
}
        
- (void)test1870
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecir;"];
    NSArray *tokens = @[@[@"Character",@"‚âñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ecir; with a semi-colon");
}
        
- (void)test1871
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ecirc without a semi-colon");
}
        
- (void)test1872
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecirc;"];
    NSArray *tokens = @[@[@"Character",@"√™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ecirc; with a semi-colon");
}
        
- (void)test1873
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecolon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ecolon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ecolon without a semi-colon");
}
        
- (void)test1874
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecolon;"];
    NSArray *tokens = @[@[@"Character",@"‚âï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ecolon; with a semi-colon");
}
        
- (void)test1875
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ecy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ecy without a semi-colon");
}
        
- (void)test1876
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ecy;"];
    NSArray *tokens = @[@[@"Character",@"—ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ecy; with a semi-colon");
}
        
- (void)test1877
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&edot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&edot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: edot without a semi-colon");
}
        
- (void)test1878
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&edot;"];
    NSArray *tokens = @[@[@"Character",@"ƒó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: edot; with a semi-colon");
}
        
- (void)test1879
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ee without a semi-colon");
}
        
- (void)test1880
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ee;"];
    NSArray *tokens = @[@[@"Character",@"‚Öá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ee; with a semi-colon");
}
        
- (void)test1881
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&efDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&efDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: efDot without a semi-colon");
}
        
- (void)test1882
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&efDot;"];
    NSArray *tokens = @[@[@"Character",@"‚âí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: efDot; with a semi-colon");
}
        
- (void)test1883
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&efr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&efr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: efr without a semi-colon");
}
        
- (void)test1884
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&efr;"];
    NSArray *tokens = @[@[@"Character",@"ùî¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: efr; with a semi-colon");
}
        
- (void)test1885
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eg without a semi-colon");
}
        
- (void)test1886
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eg;"];
    NSArray *tokens = @[@[@"Character",@"‚™ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eg; with a semi-colon");
}
        
- (void)test1887
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&egrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: egrave without a semi-colon");
}
        
- (void)test1888
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&egrave;"];
    NSArray *tokens = @[@[@"Character",@"√®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: egrave; with a semi-colon");
}
        
- (void)test1889
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&egs"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&egs"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: egs without a semi-colon");
}
        
- (void)test1890
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&egs;"];
    NSArray *tokens = @[@[@"Character",@"‚™ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: egs; with a semi-colon");
}
        
- (void)test1891
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&egsdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&egsdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: egsdot without a semi-colon");
}
        
- (void)test1892
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&egsdot;"];
    NSArray *tokens = @[@[@"Character",@"‚™ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: egsdot; with a semi-colon");
}
        
- (void)test1893
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&el"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&el"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: el without a semi-colon");
}
        
- (void)test1894
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&el;"];
    NSArray *tokens = @[@[@"Character",@"‚™ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: el; with a semi-colon");
}
        
- (void)test1895
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&elinters"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&elinters"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: elinters without a semi-colon");
}
        
- (void)test1896
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&elinters;"];
    NSArray *tokens = @[@[@"Character",@"‚èß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: elinters; with a semi-colon");
}
        
- (void)test1897
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ell"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ell"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ell without a semi-colon");
}
        
- (void)test1898
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ell;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ell; with a semi-colon");
}
        
- (void)test1899
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&els"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&els"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: els without a semi-colon");
}
        
- (void)test1900
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&els;"];
    NSArray *tokens = @[@[@"Character",@"‚™ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: els; with a semi-colon");
}
        
- (void)test1901
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&elsdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&elsdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: elsdot without a semi-colon");
}
        
- (void)test1902
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&elsdot;"];
    NSArray *tokens = @[@[@"Character",@"‚™ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: elsdot; with a semi-colon");
}
        
- (void)test1903
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&emacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: emacr without a semi-colon");
}
        
- (void)test1904
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emacr;"];
    NSArray *tokens = @[@[@"Character",@"ƒì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: emacr; with a semi-colon");
}
        
- (void)test1905
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&empty"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&empty"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: empty without a semi-colon");
}
        
- (void)test1906
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&empty;"];
    NSArray *tokens = @[@[@"Character",@"‚àÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: empty; with a semi-colon");
}
        
- (void)test1907
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emptyset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&emptyset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: emptyset without a semi-colon");
}
        
- (void)test1908
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emptyset;"];
    NSArray *tokens = @[@[@"Character",@"‚àÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: emptyset; with a semi-colon");
}
        
- (void)test1909
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emptyv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&emptyv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: emptyv without a semi-colon");
}
        
- (void)test1910
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emptyv;"];
    NSArray *tokens = @[@[@"Character",@"‚àÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: emptyv; with a semi-colon");
}
        
- (void)test1911
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emsp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&emsp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: emsp without a semi-colon");
}
        
- (void)test1912
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emsp13"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&emsp13"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: emsp13 without a semi-colon");
}
        
- (void)test1913
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emsp13;"];
    NSArray *tokens = @[@[@"Character",@"‚ÄÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: emsp13; with a semi-colon");
}
        
- (void)test1914
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emsp14"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&emsp14"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: emsp14 without a semi-colon");
}
        
- (void)test1915
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emsp14;"];
    NSArray *tokens = @[@[@"Character",@"‚ÄÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: emsp14; with a semi-colon");
}
        
- (void)test1916
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&emsp;"];
    NSArray *tokens = @[@[@"Character",@"‚ÄÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: emsp; with a semi-colon");
}
        
- (void)test1917
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eng"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eng"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eng without a semi-colon");
}
        
- (void)test1918
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eng;"];
    NSArray *tokens = @[@[@"Character",@"≈ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eng; with a semi-colon");
}
        
- (void)test1919
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ensp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ensp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ensp without a semi-colon");
}
        
- (void)test1920
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ensp;"];
    NSArray *tokens = @[@[@"Character",@"‚ÄÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ensp; with a semi-colon");
}
        
- (void)test1921
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eogon without a semi-colon");
}
        
- (void)test1922
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eogon;"];
    NSArray *tokens = @[@[@"Character",@"ƒô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eogon; with a semi-colon");
}
        
- (void)test1923
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eopf without a semi-colon");
}
        
- (void)test1924
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eopf; with a semi-colon");
}
        
- (void)test1925
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&epar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: epar without a semi-colon");
}
        
- (void)test1926
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epar;"];
    NSArray *tokens = @[@[@"Character",@"‚ãï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: epar; with a semi-colon");
}
        
- (void)test1927
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eparsl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eparsl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eparsl without a semi-colon");
}
        
- (void)test1928
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eparsl;"];
    NSArray *tokens = @[@[@"Character",@"‚ß£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eparsl; with a semi-colon");
}
        
- (void)test1929
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eplus without a semi-colon");
}
        
- (void)test1930
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eplus;"];
    NSArray *tokens = @[@[@"Character",@"‚©±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eplus; with a semi-colon");
}
        
- (void)test1931
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epsi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&epsi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: epsi without a semi-colon");
}
        
- (void)test1932
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epsi;"];
    NSArray *tokens = @[@[@"Character",@"Œµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: epsi; with a semi-colon");
}
        
- (void)test1933
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epsilon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&epsilon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: epsilon without a semi-colon");
}
        
- (void)test1934
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epsilon;"];
    NSArray *tokens = @[@[@"Character",@"Œµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: epsilon; with a semi-colon");
}
        
- (void)test1935
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epsiv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&epsiv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: epsiv without a semi-colon");
}
        
- (void)test1936
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&epsiv;"];
    NSArray *tokens = @[@[@"Character",@"œµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: epsiv; with a semi-colon");
}
        
- (void)test1937
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eqcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eqcirc without a semi-colon");
}
        
- (void)test1938
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqcirc;"];
    NSArray *tokens = @[@[@"Character",@"‚âñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eqcirc; with a semi-colon");
}
        
- (void)test1939
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqcolon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eqcolon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eqcolon without a semi-colon");
}
        
- (void)test1940
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqcolon;"];
    NSArray *tokens = @[@[@"Character",@"‚âï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eqcolon; with a semi-colon");
}
        
- (void)test1941
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eqsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eqsim without a semi-colon");
}
        
- (void)test1942
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqsim;"];
    NSArray *tokens = @[@[@"Character",@"‚âÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eqsim; with a semi-colon");
}
        
- (void)test1943
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqslantgtr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eqslantgtr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eqslantgtr without a semi-colon");
}
        
- (void)test1944
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqslantgtr;"];
    NSArray *tokens = @[@[@"Character",@"‚™ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eqslantgtr; with a semi-colon");
}
        
- (void)test1945
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqslantless"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eqslantless"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eqslantless without a semi-colon");
}
        
- (void)test1946
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqslantless;"];
    NSArray *tokens = @[@[@"Character",@"‚™ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eqslantless; with a semi-colon");
}
        
- (void)test1947
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equals"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&equals"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: equals without a semi-colon");
}
        
- (void)test1948
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equals;"];
    NSArray *tokens = @[@[@"Character",@"="]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: equals; with a semi-colon");
}
        
- (void)test1949
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equest"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&equest"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: equest without a semi-colon");
}
        
- (void)test1950
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equest;"];
    NSArray *tokens = @[@[@"Character",@"‚âü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: equest; with a semi-colon");
}
        
- (void)test1951
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equiv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&equiv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: equiv without a semi-colon");
}
        
- (void)test1952
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equiv;"];
    NSArray *tokens = @[@[@"Character",@"‚â°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: equiv; with a semi-colon");
}
        
- (void)test1953
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equivDD"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&equivDD"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: equivDD without a semi-colon");
}
        
- (void)test1954
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&equivDD;"];
    NSArray *tokens = @[@[@"Character",@"‚©∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: equivDD; with a semi-colon");
}
        
- (void)test1955
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqvparsl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eqvparsl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eqvparsl without a semi-colon");
}
        
- (void)test1956
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eqvparsl;"];
    NSArray *tokens = @[@[@"Character",@"‚ß•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eqvparsl; with a semi-colon");
}
        
- (void)test1957
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&erDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&erDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: erDot without a semi-colon");
}
        
- (void)test1958
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&erDot;"];
    NSArray *tokens = @[@[@"Character",@"‚âì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: erDot; with a semi-colon");
}
        
- (void)test1959
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&erarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&erarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: erarr without a semi-colon");
}
        
- (void)test1960
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&erarr;"];
    NSArray *tokens = @[@[@"Character",@"‚•±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: erarr; with a semi-colon");
}
        
- (void)test1961
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&escr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&escr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: escr without a semi-colon");
}
        
- (void)test1962
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&escr;"];
    NSArray *tokens = @[@[@"Character",@"‚ÑØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: escr; with a semi-colon");
}
        
- (void)test1963
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&esdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&esdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: esdot without a semi-colon");
}
        
- (void)test1964
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&esdot;"];
    NSArray *tokens = @[@[@"Character",@"‚âê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: esdot; with a semi-colon");
}
        
- (void)test1965
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&esim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&esim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: esim without a semi-colon");
}
        
- (void)test1966
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&esim;"];
    NSArray *tokens = @[@[@"Character",@"‚âÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: esim; with a semi-colon");
}
        
- (void)test1967
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&eta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: eta without a semi-colon");
}
        
- (void)test1968
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eta;"];
    NSArray *tokens = @[@[@"Character",@"Œ∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eta; with a semi-colon");
}
        
- (void)test1969
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eth"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eth without a semi-colon");
}
        
- (void)test1970
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&eth;"];
    NSArray *tokens = @[@[@"Character",@"√∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: eth; with a semi-colon");
}
        
- (void)test1971
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&euml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: euml without a semi-colon");
}
        
- (void)test1972
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&euml;"];
    NSArray *tokens = @[@[@"Character",@"√´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: euml; with a semi-colon");
}
        
- (void)test1973
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&euro"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&euro"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: euro without a semi-colon");
}
        
- (void)test1974
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&euro;"];
    NSArray *tokens = @[@[@"Character",@"‚Ç¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: euro; with a semi-colon");
}
        
- (void)test1975
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&excl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&excl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: excl without a semi-colon");
}
        
- (void)test1976
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&excl;"];
    NSArray *tokens = @[@[@"Character",@"!"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: excl; with a semi-colon");
}
        
- (void)test1977
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&exist"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&exist"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: exist without a semi-colon");
}
        
- (void)test1978
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&exist;"];
    NSArray *tokens = @[@[@"Character",@"‚àÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: exist; with a semi-colon");
}
        
- (void)test1979
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&expectation"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&expectation"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: expectation without a semi-colon");
}
        
- (void)test1980
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&expectation;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: expectation; with a semi-colon");
}
        
- (void)test1981
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&exponentiale"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&exponentiale"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: exponentiale without a semi-colon");
}
        
- (void)test1982
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&exponentiale;"];
    NSArray *tokens = @[@[@"Character",@"‚Öá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: exponentiale; with a semi-colon");
}
        
- (void)test1983
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fallingdotseq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fallingdotseq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fallingdotseq without a semi-colon");
}
        
- (void)test1984
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fallingdotseq;"];
    NSArray *tokens = @[@[@"Character",@"‚âí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fallingdotseq; with a semi-colon");
}
        
- (void)test1985
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fcy without a semi-colon");
}
        
- (void)test1986
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fcy;"];
    NSArray *tokens = @[@[@"Character",@"—Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fcy; with a semi-colon");
}
        
- (void)test1987
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&female"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&female"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: female without a semi-colon");
}
        
- (void)test1988
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&female;"];
    NSArray *tokens = @[@[@"Character",@"‚ôÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: female; with a semi-colon");
}
        
- (void)test1989
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ffilig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ffilig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ffilig without a semi-colon");
}
        
- (void)test1990
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ffilig;"];
    NSArray *tokens = @[@[@"Character",@"Ô¨É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ffilig; with a semi-colon");
}
        
- (void)test1991
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fflig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fflig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fflig without a semi-colon");
}
        
- (void)test1992
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fflig;"];
    NSArray *tokens = @[@[@"Character",@"Ô¨Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fflig; with a semi-colon");
}
        
- (void)test1993
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ffllig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ffllig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ffllig without a semi-colon");
}
        
- (void)test1994
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ffllig;"];
    NSArray *tokens = @[@[@"Character",@"Ô¨Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ffllig; with a semi-colon");
}
        
- (void)test1995
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ffr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ffr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ffr without a semi-colon");
}
        
- (void)test1996
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ffr;"];
    NSArray *tokens = @[@[@"Character",@"ùî£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ffr; with a semi-colon");
}
        
- (void)test1997
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&filig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&filig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: filig without a semi-colon");
}
        
- (void)test1998
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&filig;"];
    NSArray *tokens = @[@[@"Character",@"Ô¨Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: filig; with a semi-colon");
}
        
- (void)test1999
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fjlig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fjlig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fjlig without a semi-colon");
}
        
- (void)test2000
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fjlig;"];
    NSArray *tokens = @[@[@"Character",@"fj"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fjlig; with a semi-colon");
}
        
- (void)test2001
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&flat"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&flat"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: flat without a semi-colon");
}
        
- (void)test2002
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&flat;"];
    NSArray *tokens = @[@[@"Character",@"‚ô≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: flat; with a semi-colon");
}
        
- (void)test2003
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fllig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fllig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fllig without a semi-colon");
}
        
- (void)test2004
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fllig;"];
    NSArray *tokens = @[@[@"Character",@"Ô¨Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fllig; with a semi-colon");
}
        
- (void)test2005
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fltns"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fltns"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fltns without a semi-colon");
}
        
- (void)test2006
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fltns;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fltns; with a semi-colon");
}
        
- (void)test2007
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fnof"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fnof"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fnof without a semi-colon");
}
        
- (void)test2008
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fnof;"];
    NSArray *tokens = @[@[@"Character",@"∆í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fnof; with a semi-colon");
}
        
- (void)test2009
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fopf without a semi-colon");
}
        
- (void)test2010
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fopf; with a semi-colon");
}
        
- (void)test2011
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&forall"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&forall"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: forall without a semi-colon");
}
        
- (void)test2012
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&forall;"];
    NSArray *tokens = @[@[@"Character",@"‚àÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: forall; with a semi-colon");
}
        
- (void)test2013
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fork"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fork"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fork without a semi-colon");
}
        
- (void)test2014
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fork;"];
    NSArray *tokens = @[@[@"Character",@"‚ãî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fork; with a semi-colon");
}
        
- (void)test2015
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&forkv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&forkv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: forkv without a semi-colon");
}
        
- (void)test2016
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&forkv;"];
    NSArray *tokens = @[@[@"Character",@"‚´ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: forkv; with a semi-colon");
}
        
- (void)test2017
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fpartint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fpartint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fpartint without a semi-colon");
}
        
- (void)test2018
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fpartint;"];
    NSArray *tokens = @[@[@"Character",@"‚®ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fpartint; with a semi-colon");
}
        
- (void)test2019
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac12"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac12 without a semi-colon");
}
        
- (void)test2020
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac12;"];
    NSArray *tokens = @[@[@"Character",@"¬Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac12; with a semi-colon");
}
        
- (void)test2021
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac13"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac13"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac13 without a semi-colon");
}
        
- (void)test2022
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac13;"];
    NSArray *tokens = @[@[@"Character",@"‚Öì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac13; with a semi-colon");
}
        
- (void)test2023
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac14"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac14 without a semi-colon");
}
        
- (void)test2024
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac14;"];
    NSArray *tokens = @[@[@"Character",@"¬º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac14; with a semi-colon");
}
        
- (void)test2025
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac15"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac15"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac15 without a semi-colon");
}
        
- (void)test2026
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac15;"];
    NSArray *tokens = @[@[@"Character",@"‚Öï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac15; with a semi-colon");
}
        
- (void)test2027
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac16"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac16"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac16 without a semi-colon");
}
        
- (void)test2028
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac16;"];
    NSArray *tokens = @[@[@"Character",@"‚Öô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac16; with a semi-colon");
}
        
- (void)test2029
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac18"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac18"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac18 without a semi-colon");
}
        
- (void)test2030
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac18;"];
    NSArray *tokens = @[@[@"Character",@"‚Öõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac18; with a semi-colon");
}
        
- (void)test2031
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac23"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac23"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac23 without a semi-colon");
}
        
- (void)test2032
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac23;"];
    NSArray *tokens = @[@[@"Character",@"‚Öî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac23; with a semi-colon");
}
        
- (void)test2033
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac25"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac25"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac25 without a semi-colon");
}
        
- (void)test2034
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac25;"];
    NSArray *tokens = @[@[@"Character",@"‚Öñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac25; with a semi-colon");
}
        
- (void)test2035
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac34"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac34 without a semi-colon");
}
        
- (void)test2036
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac34;"];
    NSArray *tokens = @[@[@"Character",@"¬æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac34; with a semi-colon");
}
        
- (void)test2037
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac35"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac35"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac35 without a semi-colon");
}
        
- (void)test2038
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac35;"];
    NSArray *tokens = @[@[@"Character",@"‚Öó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac35; with a semi-colon");
}
        
- (void)test2039
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac38"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac38"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac38 without a semi-colon");
}
        
- (void)test2040
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac38;"];
    NSArray *tokens = @[@[@"Character",@"‚Öú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac38; with a semi-colon");
}
        
- (void)test2041
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac45"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac45"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac45 without a semi-colon");
}
        
- (void)test2042
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac45;"];
    NSArray *tokens = @[@[@"Character",@"‚Öò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac45; with a semi-colon");
}
        
- (void)test2043
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac56"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac56"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac56 without a semi-colon");
}
        
- (void)test2044
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac56;"];
    NSArray *tokens = @[@[@"Character",@"‚Öö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac56; with a semi-colon");
}
        
- (void)test2045
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac58"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac58"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac58 without a semi-colon");
}
        
- (void)test2046
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac58;"];
    NSArray *tokens = @[@[@"Character",@"‚Öù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac58; with a semi-colon");
}
        
- (void)test2047
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac78"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frac78"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frac78 without a semi-colon");
}
        
- (void)test2048
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frac78;"];
    NSArray *tokens = @[@[@"Character",@"‚Öû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frac78; with a semi-colon");
}
        
- (void)test2049
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frasl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frasl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frasl without a semi-colon");
}
        
- (void)test2050
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frasl;"];
    NSArray *tokens = @[@[@"Character",@"‚ÅÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frasl; with a semi-colon");
}
        
- (void)test2051
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&frown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: frown without a semi-colon");
}
        
- (void)test2052
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&frown;"];
    NSArray *tokens = @[@[@"Character",@"‚å¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: frown; with a semi-colon");
}
        
- (void)test2053
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&fscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: fscr without a semi-colon");
}
        
- (void)test2054
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&fscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: fscr; with a semi-colon");
}
        
- (void)test2055
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gE without a semi-colon");
}
        
- (void)test2056
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gE;"];
    NSArray *tokens = @[@[@"Character",@"‚âß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gE; with a semi-colon");
}
        
- (void)test2057
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gEl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gEl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gEl without a semi-colon");
}
        
- (void)test2058
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gEl;"];
    NSArray *tokens = @[@[@"Character",@"‚™å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gEl; with a semi-colon");
}
        
- (void)test2059
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gacute without a semi-colon");
}
        
- (void)test2060
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gacute;"];
    NSArray *tokens = @[@[@"Character",@"«µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gacute; with a semi-colon");
}
        
- (void)test2061
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gamma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gamma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gamma without a semi-colon");
}
        
- (void)test2062
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gamma;"];
    NSArray *tokens = @[@[@"Character",@"Œ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gamma; with a semi-colon");
}
        
- (void)test2063
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gammad"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gammad"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gammad without a semi-colon");
}
        
- (void)test2064
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gammad;"];
    NSArray *tokens = @[@[@"Character",@"œù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gammad; with a semi-colon");
}
        
- (void)test2065
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gap without a semi-colon");
}
        
- (void)test2066
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gap;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gap; with a semi-colon");
}
        
- (void)test2067
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gbreve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gbreve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gbreve without a semi-colon");
}
        
- (void)test2068
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gbreve;"];
    NSArray *tokens = @[@[@"Character",@"ƒü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gbreve; with a semi-colon");
}
        
- (void)test2069
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gcirc without a semi-colon");
}
        
- (void)test2070
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gcirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gcirc; with a semi-colon");
}
        
- (void)test2071
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gcy without a semi-colon");
}
        
- (void)test2072
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gcy;"];
    NSArray *tokens = @[@[@"Character",@"–≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gcy; with a semi-colon");
}
        
- (void)test2073
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gdot without a semi-colon");
}
        
- (void)test2074
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gdot;"];
    NSArray *tokens = @[@[@"Character",@"ƒ°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gdot; with a semi-colon");
}
        
- (void)test2075
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ge without a semi-colon");
}
        
- (void)test2076
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ge;"];
    NSArray *tokens = @[@[@"Character",@"‚â•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ge; with a semi-colon");
}
        
- (void)test2077
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gel"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gel"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gel without a semi-colon");
}
        
- (void)test2078
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gel;"];
    NSArray *tokens = @[@[@"Character",@"‚ãõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gel; with a semi-colon");
}
        
- (void)test2079
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&geq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&geq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: geq without a semi-colon");
}
        
- (void)test2080
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&geq;"];
    NSArray *tokens = @[@[@"Character",@"‚â•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: geq; with a semi-colon");
}
        
- (void)test2081
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&geqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&geqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: geqq without a semi-colon");
}
        
- (void)test2082
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&geqq;"];
    NSArray *tokens = @[@[@"Character",@"‚âß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: geqq; with a semi-colon");
}
        
- (void)test2083
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&geqslant"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&geqslant"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: geqslant without a semi-colon");
}
        
- (void)test2084
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&geqslant;"];
    NSArray *tokens = @[@[@"Character",@"‚©æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: geqslant; with a semi-colon");
}
        
- (void)test2085
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ges"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ges"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ges without a semi-colon");
}
        
- (void)test2086
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ges;"];
    NSArray *tokens = @[@[@"Character",@"‚©æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ges; with a semi-colon");
}
        
- (void)test2087
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gescc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gescc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gescc without a semi-colon");
}
        
- (void)test2088
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gescc;"];
    NSArray *tokens = @[@[@"Character",@"‚™©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gescc; with a semi-colon");
}
        
- (void)test2089
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gesdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gesdot without a semi-colon");
}
        
- (void)test2090
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesdot;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gesdot; with a semi-colon");
}
        
- (void)test2091
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesdoto"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gesdoto"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gesdoto without a semi-colon");
}
        
- (void)test2092
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesdoto;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gesdoto; with a semi-colon");
}
        
- (void)test2093
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesdotol"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gesdotol"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gesdotol without a semi-colon");
}
        
- (void)test2094
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesdotol;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gesdotol; with a semi-colon");
}
        
- (void)test2095
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gesl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gesl without a semi-colon");
}
        
- (void)test2096
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesl;"];
    NSArray *tokens = @[@[@"Character",@"‚ãõÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gesl; with a semi-colon");
}
        
- (void)test2097
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesles"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gesles"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gesles without a semi-colon");
}
        
- (void)test2098
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gesles;"];
    NSArray *tokens = @[@[@"Character",@"‚™î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gesles; with a semi-colon");
}
        
- (void)test2099
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gfr without a semi-colon");
}
        
- (void)test2100
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gfr; with a semi-colon");
}
        
- (void)test2101
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gg without a semi-colon");
}
        
- (void)test2102
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gg;"];
    NSArray *tokens = @[@[@"Character",@"‚â´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gg; with a semi-colon");
}
        
- (void)test2103
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ggg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ggg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ggg without a semi-colon");
}
        
- (void)test2104
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ggg;"];
    NSArray *tokens = @[@[@"Character",@"‚ãô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ggg; with a semi-colon");
}
        
- (void)test2105
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gimel"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gimel"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gimel without a semi-colon");
}
        
- (void)test2106
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gimel;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gimel; with a semi-colon");
}
        
- (void)test2107
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gjcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gjcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gjcy without a semi-colon");
}
        
- (void)test2108
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gjcy;"];
    NSArray *tokens = @[@[@"Character",@"—ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gjcy; with a semi-colon");
}
        
- (void)test2109
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gl without a semi-colon");
}
        
- (void)test2110
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gl;"];
    NSArray *tokens = @[@[@"Character",@"‚â∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gl; with a semi-colon");
}
        
- (void)test2111
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&glE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&glE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: glE without a semi-colon");
}
        
- (void)test2112
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&glE;"];
    NSArray *tokens = @[@[@"Character",@"‚™í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: glE; with a semi-colon");
}
        
- (void)test2113
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gla"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gla"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gla without a semi-colon");
}
        
- (void)test2114
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gla;"];
    NSArray *tokens = @[@[@"Character",@"‚™•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gla; with a semi-colon");
}
        
- (void)test2115
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&glj"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&glj"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: glj without a semi-colon");
}
        
- (void)test2116
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&glj;"];
    NSArray *tokens = @[@[@"Character",@"‚™§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: glj; with a semi-colon");
}
        
- (void)test2117
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gnE without a semi-colon");
}
        
- (void)test2118
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnE;"];
    NSArray *tokens = @[@[@"Character",@"‚â©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gnE; with a semi-colon");
}
        
- (void)test2119
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gnap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gnap without a semi-colon");
}
        
- (void)test2120
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnap;"];
    NSArray *tokens = @[@[@"Character",@"‚™ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gnap; with a semi-colon");
}
        
- (void)test2121
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gnapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gnapprox without a semi-colon");
}
        
- (void)test2122
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gnapprox; with a semi-colon");
}
        
- (void)test2123
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gne without a semi-colon");
}
        
- (void)test2124
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gne;"];
    NSArray *tokens = @[@[@"Character",@"‚™à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gne; with a semi-colon");
}
        
- (void)test2125
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gneq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gneq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gneq without a semi-colon");
}
        
- (void)test2126
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gneq;"];
    NSArray *tokens = @[@[@"Character",@"‚™à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gneq; with a semi-colon");
}
        
- (void)test2127
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gneqq without a semi-colon");
}
        
- (void)test2128
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚â©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gneqq; with a semi-colon");
}
        
- (void)test2129
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gnsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gnsim without a semi-colon");
}
        
- (void)test2130
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gnsim;"];
    NSArray *tokens = @[@[@"Character",@"‚ãß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gnsim; with a semi-colon");
}
        
- (void)test2131
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gopf without a semi-colon");
}
        
- (void)test2132
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gopf; with a semi-colon");
}
        
- (void)test2133
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&grave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&grave"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: grave without a semi-colon");
}
        
- (void)test2134
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&grave;"];
    NSArray *tokens = @[@[@"Character",@"`"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: grave; with a semi-colon");
}
        
- (void)test2135
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gscr without a semi-colon");
}
        
- (void)test2136
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gscr; with a semi-colon");
}
        
- (void)test2137
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gsim without a semi-colon");
}
        
- (void)test2138
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gsim;"];
    NSArray *tokens = @[@[@"Character",@"‚â≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gsim; with a semi-colon");
}
        
- (void)test2139
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gsime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gsime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gsime without a semi-colon");
}
        
- (void)test2140
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gsime;"];
    NSArray *tokens = @[@[@"Character",@"‚™é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gsime; with a semi-colon");
}
        
- (void)test2141
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gsiml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gsiml"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gsiml without a semi-colon");
}
        
- (void)test2142
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gsiml;"];
    NSArray *tokens = @[@[@"Character",@"‚™ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gsiml; with a semi-colon");
}
        
- (void)test2143
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@">"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gt without a semi-colon");
}
        
- (void)test2144
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gt;"];
    NSArray *tokens = @[@[@"Character",@">"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gt; with a semi-colon");
}
        
- (void)test2145
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtcc;"];
    NSArray *tokens = @[@[@"Character",@"‚™ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtcc; with a semi-colon");
}
        
- (void)test2146
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtcir;"];
    NSArray *tokens = @[@[@"Character",@"‚©∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtcir; with a semi-colon");
}
        
- (void)test2147
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtdot; with a semi-colon");
}
        
- (void)test2148
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtlPar;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtlPar; with a semi-colon");
}
        
- (void)test2149
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtquest;"];
    NSArray *tokens = @[@[@"Character",@"‚©º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtquest; with a semi-colon");
}
        
- (void)test2150
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtrapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtrapprox; with a semi-colon");
}
        
- (void)test2151
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚•∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtrarr; with a semi-colon");
}
        
- (void)test2152
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtrdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtrdot; with a semi-colon");
}
        
- (void)test2153
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtreqless;"];
    NSArray *tokens = @[@[@"Character",@"‚ãõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtreqless; with a semi-colon");
}
        
- (void)test2154
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtreqqless;"];
    NSArray *tokens = @[@[@"Character",@"‚™å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtreqqless; with a semi-colon");
}
        
- (void)test2155
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtrless;"];
    NSArray *tokens = @[@[@"Character",@"‚â∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtrless; with a semi-colon");
}
        
- (void)test2156
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gtrsim;"];
    NSArray *tokens = @[@[@"Character",@"‚â≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gtrsim; with a semi-colon");
}
        
- (void)test2157
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gvertneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gvertneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gvertneqq without a semi-colon");
}
        
- (void)test2158
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gvertneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚â©Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gvertneqq; with a semi-colon");
}
        
- (void)test2159
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gvnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&gvnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: gvnE without a semi-colon");
}
        
- (void)test2160
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&gvnE;"];
    NSArray *tokens = @[@[@"Character",@"‚â©Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: gvnE; with a semi-colon");
}
        
- (void)test2161
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hArr without a semi-colon");
}
        
- (void)test2162
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hArr; with a semi-colon");
}
        
- (void)test2163
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hairsp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hairsp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hairsp without a semi-colon");
}
        
- (void)test2164
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hairsp;"];
    NSArray *tokens = @[@[@"Character",@"‚Ää"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hairsp; with a semi-colon");
}
        
- (void)test2165
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&half"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&half"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: half without a semi-colon");
}
        
- (void)test2166
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&half;"];
    NSArray *tokens = @[@[@"Character",@"¬Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: half; with a semi-colon");
}
        
- (void)test2167
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hamilt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hamilt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hamilt without a semi-colon");
}
        
- (void)test2168
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hamilt;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hamilt; with a semi-colon");
}
        
- (void)test2169
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hardcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hardcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hardcy without a semi-colon");
}
        
- (void)test2170
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hardcy;"];
    NSArray *tokens = @[@[@"Character",@"—ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hardcy; with a semi-colon");
}
        
- (void)test2171
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&harr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&harr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: harr without a semi-colon");
}
        
- (void)test2172
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&harr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: harr; with a semi-colon");
}
        
- (void)test2173
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&harrcir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&harrcir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: harrcir without a semi-colon");
}
        
- (void)test2174
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&harrcir;"];
    NSArray *tokens = @[@[@"Character",@"‚•à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: harrcir; with a semi-colon");
}
        
- (void)test2175
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&harrw"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&harrw"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: harrw without a semi-colon");
}
        
- (void)test2176
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&harrw;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: harrw; with a semi-colon");
}
        
- (void)test2177
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hbar without a semi-colon");
}
        
- (void)test2178
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hbar;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hbar; with a semi-colon");
}
        
- (void)test2179
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hcirc without a semi-colon");
}
        
- (void)test2180
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hcirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒ•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hcirc; with a semi-colon");
}
        
- (void)test2181
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hearts"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hearts"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hearts without a semi-colon");
}
        
- (void)test2182
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hearts;"];
    NSArray *tokens = @[@[@"Character",@"‚ô•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hearts; with a semi-colon");
}
        
- (void)test2183
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&heartsuit"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&heartsuit"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: heartsuit without a semi-colon");
}
        
- (void)test2184
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&heartsuit;"];
    NSArray *tokens = @[@[@"Character",@"‚ô•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: heartsuit; with a semi-colon");
}
        
- (void)test2185
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hellip"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hellip"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hellip without a semi-colon");
}
        
- (void)test2186
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hellip;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hellip; with a semi-colon");
}
        
- (void)test2187
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hercon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hercon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hercon without a semi-colon");
}
        
- (void)test2188
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hercon;"];
    NSArray *tokens = @[@[@"Character",@"‚äπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hercon; with a semi-colon");
}
        
- (void)test2189
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hfr without a semi-colon");
}
        
- (void)test2190
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hfr; with a semi-colon");
}
        
- (void)test2191
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hksearow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hksearow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hksearow without a semi-colon");
}
        
- (void)test2192
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hksearow;"];
    NSArray *tokens = @[@[@"Character",@"‚§•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hksearow; with a semi-colon");
}
        
- (void)test2193
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hkswarow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hkswarow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hkswarow without a semi-colon");
}
        
- (void)test2194
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hkswarow;"];
    NSArray *tokens = @[@[@"Character",@"‚§¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hkswarow; with a semi-colon");
}
        
- (void)test2195
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hoarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hoarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hoarr without a semi-colon");
}
        
- (void)test2196
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hoarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hoarr; with a semi-colon");
}
        
- (void)test2197
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&homtht"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&homtht"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: homtht without a semi-colon");
}
        
- (void)test2198
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&homtht;"];
    NSArray *tokens = @[@[@"Character",@"‚àª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: homtht; with a semi-colon");
}
        
- (void)test2199
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hookleftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hookleftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hookleftarrow without a semi-colon");
}
        
- (void)test2200
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hookleftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hookleftarrow; with a semi-colon");
}
        
- (void)test2201
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hookrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hookrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hookrightarrow without a semi-colon");
}
        
- (void)test2202
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hookrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hookrightarrow; with a semi-colon");
}
        
- (void)test2203
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hopf without a semi-colon");
}
        
- (void)test2204
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hopf; with a semi-colon");
}
        
- (void)test2205
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&horbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&horbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: horbar without a semi-colon");
}
        
- (void)test2206
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&horbar;"];
    NSArray *tokens = @[@[@"Character",@"‚Äï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: horbar; with a semi-colon");
}
        
- (void)test2207
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hscr without a semi-colon");
}
        
- (void)test2208
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hscr; with a semi-colon");
}
        
- (void)test2209
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hslash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hslash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hslash without a semi-colon");
}
        
- (void)test2210
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hslash;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hslash; with a semi-colon");
}
        
- (void)test2211
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hstrok without a semi-colon");
}
        
- (void)test2212
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hstrok;"];
    NSArray *tokens = @[@[@"Character",@"ƒß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hstrok; with a semi-colon");
}
        
- (void)test2213
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hybull"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hybull"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hybull without a semi-colon");
}
        
- (void)test2214
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hybull;"];
    NSArray *tokens = @[@[@"Character",@"‚ÅÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hybull; with a semi-colon");
}
        
- (void)test2215
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hyphen"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&hyphen"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: hyphen without a semi-colon");
}
        
- (void)test2216
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&hyphen;"];
    NSArray *tokens = @[@[@"Character",@"‚Äê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: hyphen; with a semi-colon");
}
        
- (void)test2217
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iacute without a semi-colon");
}
        
- (void)test2218
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iacute;"];
    NSArray *tokens = @[@[@"Character",@"√≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iacute; with a semi-colon");
}
        
- (void)test2219
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ic"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ic"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ic without a semi-colon");
}
        
- (void)test2220
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ic;"];
    NSArray *tokens = @[@[@"Character",@"‚Å£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ic; with a semi-colon");
}
        
- (void)test2221
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&icirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: icirc without a semi-colon");
}
        
- (void)test2222
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&icirc;"];
    NSArray *tokens = @[@[@"Character",@"√Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: icirc; with a semi-colon");
}
        
- (void)test2223
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&icy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&icy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: icy without a semi-colon");
}
        
- (void)test2224
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&icy;"];
    NSArray *tokens = @[@[@"Character",@"–∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: icy; with a semi-colon");
}
        
- (void)test2225
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iecy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iecy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iecy without a semi-colon");
}
        
- (void)test2226
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iecy;"];
    NSArray *tokens = @[@[@"Character",@"–µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iecy; with a semi-colon");
}
        
- (void)test2227
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iexcl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iexcl without a semi-colon");
}
        
- (void)test2228
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iexcl;"];
    NSArray *tokens = @[@[@"Character",@"¬°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iexcl; with a semi-colon");
}
        
- (void)test2229
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iff"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iff"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iff without a semi-colon");
}
        
- (void)test2230
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iff;"];
    NSArray *tokens = @[@[@"Character",@"‚áî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iff; with a semi-colon");
}
        
- (void)test2231
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ifr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ifr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ifr without a semi-colon");
}
        
- (void)test2232
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ifr;"];
    NSArray *tokens = @[@[@"Character",@"ùî¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ifr; with a semi-colon");
}
        
- (void)test2233
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&igrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: igrave without a semi-colon");
}
        
- (void)test2234
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&igrave;"];
    NSArray *tokens = @[@[@"Character",@"√¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: igrave; with a semi-colon");
}
        
- (void)test2235
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ii"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ii"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ii without a semi-colon");
}
        
- (void)test2236
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ii;"];
    NSArray *tokens = @[@[@"Character",@"‚Öà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ii; with a semi-colon");
}
        
- (void)test2237
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iiiint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iiiint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iiiint without a semi-colon");
}
        
- (void)test2238
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iiiint;"];
    NSArray *tokens = @[@[@"Character",@"‚®å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iiiint; with a semi-colon");
}
        
- (void)test2239
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iiint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iiint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iiint without a semi-colon");
}
        
- (void)test2240
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iiint;"];
    NSArray *tokens = @[@[@"Character",@"‚à≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iiint; with a semi-colon");
}
        
- (void)test2241
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iinfin"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iinfin"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iinfin without a semi-colon");
}
        
- (void)test2242
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iinfin;"];
    NSArray *tokens = @[@[@"Character",@"‚ßú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iinfin; with a semi-colon");
}
        
- (void)test2243
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iiota"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iiota"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iiota without a semi-colon");
}
        
- (void)test2244
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iiota;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iiota; with a semi-colon");
}
        
- (void)test2245
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ijlig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ijlig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ijlig without a semi-colon");
}
        
- (void)test2246
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ijlig;"];
    NSArray *tokens = @[@[@"Character",@"ƒ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ijlig; with a semi-colon");
}
        
- (void)test2247
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&imacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: imacr without a semi-colon");
}
        
- (void)test2248
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imacr;"];
    NSArray *tokens = @[@[@"Character",@"ƒ´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: imacr; with a semi-colon");
}
        
- (void)test2249
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&image"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&image"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: image without a semi-colon");
}
        
- (void)test2250
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&image;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: image; with a semi-colon");
}
        
- (void)test2251
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imagline"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&imagline"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: imagline without a semi-colon");
}
        
- (void)test2252
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imagline;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: imagline; with a semi-colon");
}
        
- (void)test2253
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imagpart"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&imagpart"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: imagpart without a semi-colon");
}
        
- (void)test2254
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imagpart;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: imagpart; with a semi-colon");
}
        
- (void)test2255
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imath"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&imath"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: imath without a semi-colon");
}
        
- (void)test2256
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imath;"];
    NSArray *tokens = @[@[@"Character",@"ƒ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: imath; with a semi-colon");
}
        
- (void)test2257
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imof"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&imof"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: imof without a semi-colon");
}
        
- (void)test2258
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imof;"];
    NSArray *tokens = @[@[@"Character",@"‚ä∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: imof; with a semi-colon");
}
        
- (void)test2259
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imped"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&imped"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: imped without a semi-colon");
}
        
- (void)test2260
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&imped;"];
    NSArray *tokens = @[@[@"Character",@"∆µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: imped; with a semi-colon");
}
        
- (void)test2261
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&in"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&in"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: in without a semi-colon");
}
        
- (void)test2262
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&in;"];
    NSArray *tokens = @[@[@"Character",@"‚àà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: in; with a semi-colon");
}
        
- (void)test2263
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&incare"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&incare"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: incare without a semi-colon");
}
        
- (void)test2264
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&incare;"];
    NSArray *tokens = @[@[@"Character",@"‚ÑÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: incare; with a semi-colon");
}
        
- (void)test2265
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&infin"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&infin"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: infin without a semi-colon");
}
        
- (void)test2266
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&infin;"];
    NSArray *tokens = @[@[@"Character",@"‚àû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: infin; with a semi-colon");
}
        
- (void)test2267
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&infintie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&infintie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: infintie without a semi-colon");
}
        
- (void)test2268
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&infintie;"];
    NSArray *tokens = @[@[@"Character",@"‚ßù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: infintie; with a semi-colon");
}
        
- (void)test2269
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&inodot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&inodot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: inodot without a semi-colon");
}
        
- (void)test2270
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&inodot;"];
    NSArray *tokens = @[@[@"Character",@"ƒ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: inodot; with a semi-colon");
}
        
- (void)test2271
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&int"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&int"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: int without a semi-colon");
}
        
- (void)test2272
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&int;"];
    NSArray *tokens = @[@[@"Character",@"‚à´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: int; with a semi-colon");
}
        
- (void)test2273
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intcal"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&intcal"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: intcal without a semi-colon");
}
        
- (void)test2274
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intcal;"];
    NSArray *tokens = @[@[@"Character",@"‚ä∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: intcal; with a semi-colon");
}
        
- (void)test2275
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&integers"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&integers"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: integers without a semi-colon");
}
        
- (void)test2276
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&integers;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: integers; with a semi-colon");
}
        
- (void)test2277
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intercal"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&intercal"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: intercal without a semi-colon");
}
        
- (void)test2278
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intercal;"];
    NSArray *tokens = @[@[@"Character",@"‚ä∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: intercal; with a semi-colon");
}
        
- (void)test2279
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intlarhk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&intlarhk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: intlarhk without a semi-colon");
}
        
- (void)test2280
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intlarhk;"];
    NSArray *tokens = @[@[@"Character",@"‚®ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: intlarhk; with a semi-colon");
}
        
- (void)test2281
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intprod"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&intprod"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: intprod without a semi-colon");
}
        
- (void)test2282
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&intprod;"];
    NSArray *tokens = @[@[@"Character",@"‚®º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: intprod; with a semi-colon");
}
        
- (void)test2283
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iocy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iocy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iocy without a semi-colon");
}
        
- (void)test2284
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iocy;"];
    NSArray *tokens = @[@[@"Character",@"—ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iocy; with a semi-colon");
}
        
- (void)test2285
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iogon without a semi-colon");
}
        
- (void)test2286
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iogon;"];
    NSArray *tokens = @[@[@"Character",@"ƒØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iogon; with a semi-colon");
}
        
- (void)test2287
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iopf without a semi-colon");
}
        
- (void)test2288
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iopf; with a semi-colon");
}
        
- (void)test2289
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iota"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iota"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iota without a semi-colon");
}
        
- (void)test2290
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iota;"];
    NSArray *tokens = @[@[@"Character",@"Œπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iota; with a semi-colon");
}
        
- (void)test2291
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iprod"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iprod"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iprod without a semi-colon");
}
        
- (void)test2292
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iprod;"];
    NSArray *tokens = @[@[@"Character",@"‚®º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iprod; with a semi-colon");
}
        
- (void)test2293
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iquest"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iquest without a semi-colon");
}
        
- (void)test2294
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iquest;"];
    NSArray *tokens = @[@[@"Character",@"¬ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iquest; with a semi-colon");
}
        
- (void)test2295
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iscr without a semi-colon");
}
        
- (void)test2296
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iscr; with a semi-colon");
}
        
- (void)test2297
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isin"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&isin"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: isin without a semi-colon");
}
        
- (void)test2298
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isin;"];
    NSArray *tokens = @[@[@"Character",@"‚àà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: isin; with a semi-colon");
}
        
- (void)test2299
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isinE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&isinE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: isinE without a semi-colon");
}
        
- (void)test2300
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isinE;"];
    NSArray *tokens = @[@[@"Character",@"‚ãπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: isinE; with a semi-colon");
}
        
- (void)test2301
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isindot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&isindot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: isindot without a semi-colon");
}
        
- (void)test2302
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isindot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: isindot; with a semi-colon");
}
        
- (void)test2303
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isins"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&isins"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: isins without a semi-colon");
}
        
- (void)test2304
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isins;"];
    NSArray *tokens = @[@[@"Character",@"‚ã¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: isins; with a semi-colon");
}
        
- (void)test2305
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isinsv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&isinsv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: isinsv without a semi-colon");
}
        
- (void)test2306
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isinsv;"];
    NSArray *tokens = @[@[@"Character",@"‚ã≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: isinsv; with a semi-colon");
}
        
- (void)test2307
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isinv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&isinv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: isinv without a semi-colon");
}
        
- (void)test2308
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&isinv;"];
    NSArray *tokens = @[@[@"Character",@"‚àà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: isinv; with a semi-colon");
}
        
- (void)test2309
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&it"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&it"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: it without a semi-colon");
}
        
- (void)test2310
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&it;"];
    NSArray *tokens = @[@[@"Character",@"‚Å¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: it; with a semi-colon");
}
        
- (void)test2311
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&itilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&itilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: itilde without a semi-colon");
}
        
- (void)test2312
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&itilde;"];
    NSArray *tokens = @[@[@"Character",@"ƒ©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: itilde; with a semi-colon");
}
        
- (void)test2313
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iukcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&iukcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: iukcy without a semi-colon");
}
        
- (void)test2314
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iukcy;"];
    NSArray *tokens = @[@[@"Character",@"—ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iukcy; with a semi-colon");
}
        
- (void)test2315
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iuml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iuml without a semi-colon");
}
        
- (void)test2316
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&iuml;"];
    NSArray *tokens = @[@[@"Character",@"√Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: iuml; with a semi-colon");
}
        
- (void)test2317
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jcirc without a semi-colon");
}
        
- (void)test2318
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jcirc;"];
    NSArray *tokens = @[@[@"Character",@"ƒµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jcirc; with a semi-colon");
}
        
- (void)test2319
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jcy without a semi-colon");
}
        
- (void)test2320
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jcy;"];
    NSArray *tokens = @[@[@"Character",@"–π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jcy; with a semi-colon");
}
        
- (void)test2321
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jfr without a semi-colon");
}
        
- (void)test2322
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jfr; with a semi-colon");
}
        
- (void)test2323
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jmath"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jmath"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jmath without a semi-colon");
}
        
- (void)test2324
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jmath;"];
    NSArray *tokens = @[@[@"Character",@"»∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jmath; with a semi-colon");
}
        
- (void)test2325
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jopf without a semi-colon");
}
        
- (void)test2326
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jopf; with a semi-colon");
}
        
- (void)test2327
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jscr without a semi-colon");
}
        
- (void)test2328
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jscr;"];
    NSArray *tokens = @[@[@"Character",@"ùíø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jscr; with a semi-colon");
}
        
- (void)test2329
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jsercy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jsercy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jsercy without a semi-colon");
}
        
- (void)test2330
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jsercy;"];
    NSArray *tokens = @[@[@"Character",@"—ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jsercy; with a semi-colon");
}
        
- (void)test2331
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jukcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&jukcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: jukcy without a semi-colon");
}
        
- (void)test2332
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&jukcy;"];
    NSArray *tokens = @[@[@"Character",@"—î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: jukcy; with a semi-colon");
}
        
- (void)test2333
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kappa"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kappa"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kappa without a semi-colon");
}
        
- (void)test2334
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kappa;"];
    NSArray *tokens = @[@[@"Character",@"Œ∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kappa; with a semi-colon");
}
        
- (void)test2335
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kappav"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kappav"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kappav without a semi-colon");
}
        
- (void)test2336
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kappav;"];
    NSArray *tokens = @[@[@"Character",@"œ∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kappav; with a semi-colon");
}
        
- (void)test2337
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kcedil without a semi-colon");
}
        
- (void)test2338
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kcedil;"];
    NSArray *tokens = @[@[@"Character",@"ƒ∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kcedil; with a semi-colon");
}
        
- (void)test2339
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kcy without a semi-colon");
}
        
- (void)test2340
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kcy;"];
    NSArray *tokens = @[@[@"Character",@"–∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kcy; with a semi-colon");
}
        
- (void)test2341
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kfr without a semi-colon");
}
        
- (void)test2342
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kfr; with a semi-colon");
}
        
- (void)test2343
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kgreen"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kgreen"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kgreen without a semi-colon");
}
        
- (void)test2344
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kgreen;"];
    NSArray *tokens = @[@[@"Character",@"ƒ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kgreen; with a semi-colon");
}
        
- (void)test2345
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&khcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&khcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: khcy without a semi-colon");
}
        
- (void)test2346
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&khcy;"];
    NSArray *tokens = @[@[@"Character",@"—Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: khcy; with a semi-colon");
}
        
- (void)test2347
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kjcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kjcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kjcy without a semi-colon");
}
        
- (void)test2348
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kjcy;"];
    NSArray *tokens = @[@[@"Character",@"—ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kjcy; with a semi-colon");
}
        
- (void)test2349
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kopf without a semi-colon");
}
        
- (void)test2350
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kopf; with a semi-colon");
}
        
- (void)test2351
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&kscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: kscr without a semi-colon");
}
        
- (void)test2352
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&kscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: kscr; with a semi-colon");
}
        
- (void)test2353
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lAarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lAarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lAarr without a semi-colon");
}
        
- (void)test2354
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lAarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lAarr; with a semi-colon");
}
        
- (void)test2355
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lArr without a semi-colon");
}
        
- (void)test2356
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lArr; with a semi-colon");
}
        
- (void)test2357
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lAtail"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lAtail"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lAtail without a semi-colon");
}
        
- (void)test2358
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lAtail;"];
    NSArray *tokens = @[@[@"Character",@"‚§õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lAtail; with a semi-colon");
}
        
- (void)test2359
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lBarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lBarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lBarr without a semi-colon");
}
        
- (void)test2360
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lBarr;"];
    NSArray *tokens = @[@[@"Character",@"‚§é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lBarr; with a semi-colon");
}
        
- (void)test2361
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lE without a semi-colon");
}
        
- (void)test2362
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lE;"];
    NSArray *tokens = @[@[@"Character",@"‚â¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lE; with a semi-colon");
}
        
- (void)test2363
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lEg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lEg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lEg without a semi-colon");
}
        
- (void)test2364
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lEg;"];
    NSArray *tokens = @[@[@"Character",@"‚™ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lEg; with a semi-colon");
}
        
- (void)test2365
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lHar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lHar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lHar without a semi-colon");
}
        
- (void)test2366
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lHar;"];
    NSArray *tokens = @[@[@"Character",@"‚•¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lHar; with a semi-colon");
}
        
- (void)test2367
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lacute without a semi-colon");
}
        
- (void)test2368
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lacute;"];
    NSArray *tokens = @[@[@"Character",@"ƒ∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lacute; with a semi-colon");
}
        
- (void)test2369
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&laemptyv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&laemptyv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: laemptyv without a semi-colon");
}
        
- (void)test2370
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&laemptyv;"];
    NSArray *tokens = @[@[@"Character",@"‚¶¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: laemptyv; with a semi-colon");
}
        
- (void)test2371
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lagran"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lagran"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lagran without a semi-colon");
}
        
- (void)test2372
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lagran;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lagran; with a semi-colon");
}
        
- (void)test2373
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lambda"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lambda"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lambda without a semi-colon");
}
        
- (void)test2374
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lambda;"];
    NSArray *tokens = @[@[@"Character",@"Œª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lambda; with a semi-colon");
}
        
- (void)test2375
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lang without a semi-colon");
}
        
- (void)test2376
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lang;"];
    NSArray *tokens = @[@[@"Character",@"‚ü®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lang; with a semi-colon");
}
        
- (void)test2377
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&langd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&langd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: langd without a semi-colon");
}
        
- (void)test2378
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&langd;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: langd; with a semi-colon");
}
        
- (void)test2379
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&langle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&langle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: langle without a semi-colon");
}
        
- (void)test2380
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&langle;"];
    NSArray *tokens = @[@[@"Character",@"‚ü®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: langle; with a semi-colon");
}
        
- (void)test2381
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lap without a semi-colon");
}
        
- (void)test2382
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lap;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lap; with a semi-colon");
}
        
- (void)test2383
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&laquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: laquo without a semi-colon");
}
        
- (void)test2384
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&laquo;"];
    NSArray *tokens = @[@[@"Character",@"¬´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: laquo; with a semi-colon");
}
        
- (void)test2385
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larr without a semi-colon");
}
        
- (void)test2386
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larr; with a semi-colon");
}
        
- (void)test2387
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrb without a semi-colon");
}
        
- (void)test2388
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrb;"];
    NSArray *tokens = @[@[@"Character",@"‚á§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrb; with a semi-colon");
}
        
- (void)test2389
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrbfs"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrbfs"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrbfs without a semi-colon");
}
        
- (void)test2390
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrbfs;"];
    NSArray *tokens = @[@[@"Character",@"‚§ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrbfs; with a semi-colon");
}
        
- (void)test2391
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrfs"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrfs"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrfs without a semi-colon");
}
        
- (void)test2392
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrfs;"];
    NSArray *tokens = @[@[@"Character",@"‚§ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrfs; with a semi-colon");
}
        
- (void)test2393
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrhk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrhk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrhk without a semi-colon");
}
        
- (void)test2394
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrhk;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrhk; with a semi-colon");
}
        
- (void)test2395
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrlp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrlp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrlp without a semi-colon");
}
        
- (void)test2396
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrlp;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrlp; with a semi-colon");
}
        
- (void)test2397
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrpl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrpl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrpl without a semi-colon");
}
        
- (void)test2398
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrpl;"];
    NSArray *tokens = @[@[@"Character",@"‚§π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrpl; with a semi-colon");
}
        
- (void)test2399
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrsim without a semi-colon");
}
        
- (void)test2400
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrsim;"];
    NSArray *tokens = @[@[@"Character",@"‚•≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrsim; with a semi-colon");
}
        
- (void)test2401
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrtl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&larrtl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: larrtl without a semi-colon");
}
        
- (void)test2402
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&larrtl;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: larrtl; with a semi-colon");
}
        
- (void)test2403
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lat"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lat"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lat without a semi-colon");
}
        
- (void)test2404
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lat;"];
    NSArray *tokens = @[@[@"Character",@"‚™´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lat; with a semi-colon");
}
        
- (void)test2405
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&latail"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&latail"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: latail without a semi-colon");
}
        
- (void)test2406
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&latail;"];
    NSArray *tokens = @[@[@"Character",@"‚§ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: latail; with a semi-colon");
}
        
- (void)test2407
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&late"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&late"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: late without a semi-colon");
}
        
- (void)test2408
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&late;"];
    NSArray *tokens = @[@[@"Character",@"‚™≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: late; with a semi-colon");
}
        
- (void)test2409
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lates"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lates"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lates without a semi-colon");
}
        
- (void)test2410
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lates;"];
    NSArray *tokens = @[@[@"Character",@"‚™≠Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lates; with a semi-colon");
}
        
- (void)test2411
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lbarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lbarr without a semi-colon");
}
        
- (void)test2412
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbarr;"];
    NSArray *tokens = @[@[@"Character",@"‚§å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lbarr; with a semi-colon");
}
        
- (void)test2413
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbbrk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lbbrk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lbbrk without a semi-colon");
}
        
- (void)test2414
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbbrk;"];
    NSArray *tokens = @[@[@"Character",@"‚ù≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lbbrk; with a semi-colon");
}
        
- (void)test2415
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lbrace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lbrace without a semi-colon");
}
        
- (void)test2416
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrace;"];
    NSArray *tokens = @[@[@"Character",@"@{"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lbrace; with a semi-colon");
}
        
- (void)test2417
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrack"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lbrack"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lbrack without a semi-colon");
}
        
- (void)test2418
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrack;"];
    NSArray *tokens = @[@[@"Character",@"@["]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lbrack; with a semi-colon");
}
        
- (void)test2419
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrke"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lbrke"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lbrke without a semi-colon");
}
        
- (void)test2420
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrke;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lbrke; with a semi-colon");
}
        
- (void)test2421
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrksld"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lbrksld"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lbrksld without a semi-colon");
}
        
- (void)test2422
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrksld;"];
    NSArray *tokens = @[@[@"Character",@"‚¶è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lbrksld; with a semi-colon");
}
        
- (void)test2423
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrkslu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lbrkslu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lbrkslu without a semi-colon");
}
        
- (void)test2424
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lbrkslu;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lbrkslu; with a semi-colon");
}
        
- (void)test2425
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lcaron without a semi-colon");
}
        
- (void)test2426
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcaron;"];
    NSArray *tokens = @[@[@"Character",@"ƒæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lcaron; with a semi-colon");
}
        
- (void)test2427
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lcedil without a semi-colon");
}
        
- (void)test2428
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcedil;"];
    NSArray *tokens = @[@[@"Character",@"ƒº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lcedil; with a semi-colon");
}
        
- (void)test2429
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lceil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lceil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lceil without a semi-colon");
}
        
- (void)test2430
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lceil;"];
    NSArray *tokens = @[@[@"Character",@"‚åà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lceil; with a semi-colon");
}
        
- (void)test2431
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lcub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lcub without a semi-colon");
}
        
- (void)test2432
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcub;"];
    NSArray *tokens = @[@[@"Character",@"@{"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lcub; with a semi-colon");
}
        
- (void)test2433
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lcy without a semi-colon");
}
        
- (void)test2434
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lcy;"];
    NSArray *tokens = @[@[@"Character",@"–ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lcy; with a semi-colon");
}
        
- (void)test2435
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldca"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ldca"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ldca without a semi-colon");
}
        
- (void)test2436
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldca;"];
    NSArray *tokens = @[@[@"Character",@"‚§∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ldca; with a semi-colon");
}
        
- (void)test2437
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ldquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ldquo without a semi-colon");
}
        
- (void)test2438
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Äú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ldquo; with a semi-colon");
}
        
- (void)test2439
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldquor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ldquor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ldquor without a semi-colon");
}
        
- (void)test2440
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldquor;"];
    NSArray *tokens = @[@[@"Character",@"‚Äû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ldquor; with a semi-colon");
}
        
- (void)test2441
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldrdhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ldrdhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ldrdhar without a semi-colon");
}
        
- (void)test2442
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldrdhar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ldrdhar; with a semi-colon");
}
        
- (void)test2443
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldrushar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ldrushar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ldrushar without a semi-colon");
}
        
- (void)test2444
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldrushar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ldrushar; with a semi-colon");
}
        
- (void)test2445
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldsh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ldsh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ldsh without a semi-colon");
}
        
- (void)test2446
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ldsh;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ldsh; with a semi-colon");
}
        
- (void)test2447
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&le"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&le"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: le without a semi-colon");
}
        
- (void)test2448
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&le;"];
    NSArray *tokens = @[@[@"Character",@"‚â§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: le; with a semi-colon");
}
        
- (void)test2449
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftarrow without a semi-colon");
}
        
- (void)test2450
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftarrow; with a semi-colon");
}
        
- (void)test2451
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftarrowtail"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftarrowtail"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftarrowtail without a semi-colon");
}
        
- (void)test2452
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftarrowtail;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftarrowtail; with a semi-colon");
}
        
- (void)test2453
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftharpoondown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftharpoondown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftharpoondown without a semi-colon");
}
        
- (void)test2454
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftharpoondown;"];
    NSArray *tokens = @[@[@"Character",@"‚ÜΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftharpoondown; with a semi-colon");
}
        
- (void)test2455
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftharpoonup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftharpoonup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftharpoonup without a semi-colon");
}
        
- (void)test2456
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftharpoonup;"];
    NSArray *tokens = @[@[@"Character",@"‚Üº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftharpoonup; with a semi-colon");
}
        
- (void)test2457
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftleftarrows"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftleftarrows"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftleftarrows without a semi-colon");
}
        
- (void)test2458
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftleftarrows;"];
    NSArray *tokens = @[@[@"Character",@"‚áá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftleftarrows; with a semi-colon");
}
        
- (void)test2459
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftrightarrow without a semi-colon");
}
        
- (void)test2460
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftrightarrow; with a semi-colon");
}
        
- (void)test2461
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightarrows"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftrightarrows"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftrightarrows without a semi-colon");
}
        
- (void)test2462
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightarrows;"];
    NSArray *tokens = @[@[@"Character",@"‚áÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftrightarrows; with a semi-colon");
}
        
- (void)test2463
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightharpoons"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftrightharpoons"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftrightharpoons without a semi-colon");
}
        
- (void)test2464
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightharpoons;"];
    NSArray *tokens = @[@[@"Character",@"‚áã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftrightharpoons; with a semi-colon");
}
        
- (void)test2465
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightsquigarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftrightsquigarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftrightsquigarrow without a semi-colon");
}
        
- (void)test2466
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftrightsquigarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftrightsquigarrow; with a semi-colon");
}
        
- (void)test2467
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftthreetimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leftthreetimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leftthreetimes without a semi-colon");
}
        
- (void)test2468
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leftthreetimes;"];
    NSArray *tokens = @[@[@"Character",@"‚ãã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leftthreetimes; with a semi-colon");
}
        
- (void)test2469
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leg without a semi-colon");
}
        
- (void)test2470
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leg;"];
    NSArray *tokens = @[@[@"Character",@"‚ãö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leg; with a semi-colon");
}
        
- (void)test2471
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leq without a semi-colon");
}
        
- (void)test2472
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leq;"];
    NSArray *tokens = @[@[@"Character",@"‚â§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leq; with a semi-colon");
}
        
- (void)test2473
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leqq without a semi-colon");
}
        
- (void)test2474
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leqq;"];
    NSArray *tokens = @[@[@"Character",@"‚â¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leqq; with a semi-colon");
}
        
- (void)test2475
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leqslant"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&leqslant"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: leqslant without a semi-colon");
}
        
- (void)test2476
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&leqslant;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: leqslant; with a semi-colon");
}
        
- (void)test2477
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&les"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&les"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: les without a semi-colon");
}
        
- (void)test2478
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&les;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: les; with a semi-colon");
}
        
- (void)test2479
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lescc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lescc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lescc without a semi-colon");
}
        
- (void)test2480
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lescc;"];
    NSArray *tokens = @[@[@"Character",@"‚™®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lescc; with a semi-colon");
}
        
- (void)test2481
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesdot without a semi-colon");
}
        
- (void)test2482
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesdot;"];
    NSArray *tokens = @[@[@"Character",@"‚©ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesdot; with a semi-colon");
}
        
- (void)test2483
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesdoto"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesdoto"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesdoto without a semi-colon");
}
        
- (void)test2484
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesdoto;"];
    NSArray *tokens = @[@[@"Character",@"‚™Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesdoto; with a semi-colon");
}
        
- (void)test2485
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesdotor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesdotor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesdotor without a semi-colon");
}
        
- (void)test2486
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesdotor;"];
    NSArray *tokens = @[@[@"Character",@"‚™É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesdotor; with a semi-colon");
}
        
- (void)test2487
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesg without a semi-colon");
}
        
- (void)test2488
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesg;"];
    NSArray *tokens = @[@[@"Character",@"‚ãöÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesg; with a semi-colon");
}
        
- (void)test2489
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesges"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesges"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesges without a semi-colon");
}
        
- (void)test2490
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesges;"];
    NSArray *tokens = @[@[@"Character",@"‚™ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesges; with a semi-colon");
}
        
- (void)test2491
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lessapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lessapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lessapprox without a semi-colon");
}
        
- (void)test2492
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lessapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lessapprox; with a semi-colon");
}
        
- (void)test2493
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lessdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lessdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lessdot without a semi-colon");
}
        
- (void)test2494
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lessdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lessdot; with a semi-colon");
}
        
- (void)test2495
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesseqgtr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesseqgtr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesseqgtr without a semi-colon");
}
        
- (void)test2496
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesseqgtr;"];
    NSArray *tokens = @[@[@"Character",@"‚ãö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesseqgtr; with a semi-colon");
}
        
- (void)test2497
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesseqqgtr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesseqqgtr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesseqqgtr without a semi-colon");
}
        
- (void)test2498
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesseqqgtr;"];
    NSArray *tokens = @[@[@"Character",@"‚™ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesseqqgtr; with a semi-colon");
}
        
- (void)test2499
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lessgtr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lessgtr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lessgtr without a semi-colon");
}
        
- (void)test2500
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lessgtr;"];
    NSArray *tokens = @[@[@"Character",@"‚â∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lessgtr; with a semi-colon");
}
        
- (void)test2501
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesssim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lesssim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lesssim without a semi-colon");
}
        
- (void)test2502
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lesssim;"];
    NSArray *tokens = @[@[@"Character",@"‚â≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lesssim; with a semi-colon");
}
        
- (void)test2503
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lfisht"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lfisht"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lfisht without a semi-colon");
}
        
- (void)test2504
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lfisht;"];
    NSArray *tokens = @[@[@"Character",@"‚•º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lfisht; with a semi-colon");
}
        
- (void)test2505
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lfloor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lfloor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lfloor without a semi-colon");
}
        
- (void)test2506
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lfloor;"];
    NSArray *tokens = @[@[@"Character",@"‚åä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lfloor; with a semi-colon");
}
        
- (void)test2507
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lfr without a semi-colon");
}
        
- (void)test2508
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lfr; with a semi-colon");
}
        
- (void)test2509
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lg without a semi-colon");
}
        
- (void)test2510
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lg;"];
    NSArray *tokens = @[@[@"Character",@"‚â∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lg; with a semi-colon");
}
        
- (void)test2511
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lgE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lgE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lgE without a semi-colon");
}
        
- (void)test2512
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lgE;"];
    NSArray *tokens = @[@[@"Character",@"‚™ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lgE; with a semi-colon");
}
        
- (void)test2513
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lhard"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lhard"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lhard without a semi-colon");
}
        
- (void)test2514
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lhard;"];
    NSArray *tokens = @[@[@"Character",@"‚ÜΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lhard; with a semi-colon");
}
        
- (void)test2515
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lharu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lharu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lharu without a semi-colon");
}
        
- (void)test2516
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lharu;"];
    NSArray *tokens = @[@[@"Character",@"‚Üº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lharu; with a semi-colon");
}
        
- (void)test2517
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lharul"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lharul"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lharul without a semi-colon");
}
        
- (void)test2518
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lharul;"];
    NSArray *tokens = @[@[@"Character",@"‚•™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lharul; with a semi-colon");
}
        
- (void)test2519
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lhblk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lhblk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lhblk without a semi-colon");
}
        
- (void)test2520
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lhblk;"];
    NSArray *tokens = @[@[@"Character",@"‚ñÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lhblk; with a semi-colon");
}
        
- (void)test2521
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ljcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ljcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ljcy without a semi-colon");
}
        
- (void)test2522
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ljcy;"];
    NSArray *tokens = @[@[@"Character",@"—ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ljcy; with a semi-colon");
}
        
- (void)test2523
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ll"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ll"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ll without a semi-colon");
}
        
- (void)test2524
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ll;"];
    NSArray *tokens = @[@[@"Character",@"‚â™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ll; with a semi-colon");
}
        
- (void)test2525
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&llarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&llarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: llarr without a semi-colon");
}
        
- (void)test2526
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&llarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: llarr; with a semi-colon");
}
        
- (void)test2527
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&llcorner"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&llcorner"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: llcorner without a semi-colon");
}
        
- (void)test2528
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&llcorner;"];
    NSArray *tokens = @[@[@"Character",@"‚åû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: llcorner; with a semi-colon");
}
        
- (void)test2529
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&llhard"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&llhard"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: llhard without a semi-colon");
}
        
- (void)test2530
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&llhard;"];
    NSArray *tokens = @[@[@"Character",@"‚•´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: llhard; with a semi-colon");
}
        
- (void)test2531
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lltri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lltri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lltri without a semi-colon");
}
        
- (void)test2532
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lltri;"];
    NSArray *tokens = @[@[@"Character",@"‚ó∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lltri; with a semi-colon");
}
        
- (void)test2533
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lmidot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lmidot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lmidot without a semi-colon");
}
        
- (void)test2534
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lmidot;"];
    NSArray *tokens = @[@[@"Character",@"≈Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lmidot; with a semi-colon");
}
        
- (void)test2535
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lmoust"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lmoust"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lmoust without a semi-colon");
}
        
- (void)test2536
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lmoust;"];
    NSArray *tokens = @[@[@"Character",@"‚é∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lmoust; with a semi-colon");
}
        
- (void)test2537
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lmoustache"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lmoustache"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lmoustache without a semi-colon");
}
        
- (void)test2538
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lmoustache;"];
    NSArray *tokens = @[@[@"Character",@"‚é∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lmoustache; with a semi-colon");
}
        
- (void)test2539
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lnE without a semi-colon");
}
        
- (void)test2540
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnE;"];
    NSArray *tokens = @[@[@"Character",@"‚â®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lnE; with a semi-colon");
}
        
- (void)test2541
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lnap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lnap without a semi-colon");
}
        
- (void)test2542
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnap;"];
    NSArray *tokens = @[@[@"Character",@"‚™â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lnap; with a semi-colon");
}
        
- (void)test2543
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lnapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lnapprox without a semi-colon");
}
        
- (void)test2544
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lnapprox; with a semi-colon");
}
        
- (void)test2545
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lne without a semi-colon");
}
        
- (void)test2546
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lne;"];
    NSArray *tokens = @[@[@"Character",@"‚™á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lne; with a semi-colon");
}
        
- (void)test2547
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lneq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lneq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lneq without a semi-colon");
}
        
- (void)test2548
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lneq;"];
    NSArray *tokens = @[@[@"Character",@"‚™á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lneq; with a semi-colon");
}
        
- (void)test2549
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lneqq without a semi-colon");
}
        
- (void)test2550
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚â®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lneqq; with a semi-colon");
}
        
- (void)test2551
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lnsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lnsim without a semi-colon");
}
        
- (void)test2552
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lnsim;"];
    NSArray *tokens = @[@[@"Character",@"‚ã¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lnsim; with a semi-colon");
}
        
- (void)test2553
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&loang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: loang without a semi-colon");
}
        
- (void)test2554
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loang;"];
    NSArray *tokens = @[@[@"Character",@"‚ü¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: loang; with a semi-colon");
}
        
- (void)test2555
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&loarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: loarr without a semi-colon");
}
        
- (void)test2556
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: loarr; with a semi-colon");
}
        
- (void)test2557
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lobrk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lobrk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lobrk without a semi-colon");
}
        
- (void)test2558
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lobrk;"];
    NSArray *tokens = @[@[@"Character",@"‚ü¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lobrk; with a semi-colon");
}
        
- (void)test2559
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longleftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&longleftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: longleftarrow without a semi-colon");
}
        
- (void)test2560
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longleftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚üµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: longleftarrow; with a semi-colon");
}
        
- (void)test2561
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longleftrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&longleftrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: longleftrightarrow without a semi-colon");
}
        
- (void)test2562
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longleftrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: longleftrightarrow; with a semi-colon");
}
        
- (void)test2563
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longmapsto"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&longmapsto"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: longmapsto without a semi-colon");
}
        
- (void)test2564
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longmapsto;"];
    NSArray *tokens = @[@[@"Character",@"‚üº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: longmapsto; with a semi-colon");
}
        
- (void)test2565
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&longrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: longrightarrow without a semi-colon");
}
        
- (void)test2566
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&longrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: longrightarrow; with a semi-colon");
}
        
- (void)test2567
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&looparrowleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&looparrowleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: looparrowleft without a semi-colon");
}
        
- (void)test2568
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&looparrowleft;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: looparrowleft; with a semi-colon");
}
        
- (void)test2569
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&looparrowright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&looparrowright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: looparrowright without a semi-colon");
}
        
- (void)test2570
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&looparrowright;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: looparrowright; with a semi-colon");
}
        
- (void)test2571
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lopar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lopar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lopar without a semi-colon");
}
        
- (void)test2572
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lopar;"];
    NSArray *tokens = @[@[@"Character",@"‚¶Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lopar; with a semi-colon");
}
        
- (void)test2573
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lopf without a semi-colon");
}
        
- (void)test2574
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lopf; with a semi-colon");
}
        
- (void)test2575
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&loplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: loplus without a semi-colon");
}
        
- (void)test2576
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: loplus; with a semi-colon");
}
        
- (void)test2577
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lotimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lotimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lotimes without a semi-colon");
}
        
- (void)test2578
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lotimes;"];
    NSArray *tokens = @[@[@"Character",@"‚®¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lotimes; with a semi-colon");
}
        
- (void)test2579
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lowast"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lowast"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lowast without a semi-colon");
}
        
- (void)test2580
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lowast;"];
    NSArray *tokens = @[@[@"Character",@"‚àó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lowast; with a semi-colon");
}
        
- (void)test2581
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lowbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lowbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lowbar without a semi-colon");
}
        
- (void)test2582
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lowbar;"];
    NSArray *tokens = @[@[@"Character",@"_"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lowbar; with a semi-colon");
}
        
- (void)test2583
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loz"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&loz"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: loz without a semi-colon");
}
        
- (void)test2584
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&loz;"];
    NSArray *tokens = @[@[@"Character",@"‚óä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: loz; with a semi-colon");
}
        
- (void)test2585
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lozenge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lozenge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lozenge without a semi-colon");
}
        
- (void)test2586
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lozenge;"];
    NSArray *tokens = @[@[@"Character",@"‚óä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lozenge; with a semi-colon");
}
        
- (void)test2587
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lozf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lozf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lozf without a semi-colon");
}
        
- (void)test2588
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lozf;"];
    NSArray *tokens = @[@[@"Character",@"‚ß´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lozf; with a semi-colon");
}
        
- (void)test2589
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lpar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lpar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lpar without a semi-colon");
}
        
- (void)test2590
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lpar;"];
    NSArray *tokens = @[@[@"Character",@"("]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lpar; with a semi-colon");
}
        
- (void)test2591
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lparlt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lparlt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lparlt without a semi-colon");
}
        
- (void)test2592
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lparlt;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lparlt; with a semi-colon");
}
        
- (void)test2593
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lrarr without a semi-colon");
}
        
- (void)test2594
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lrarr; with a semi-colon");
}
        
- (void)test2595
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrcorner"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lrcorner"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lrcorner without a semi-colon");
}
        
- (void)test2596
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrcorner;"];
    NSArray *tokens = @[@[@"Character",@"‚åü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lrcorner; with a semi-colon");
}
        
- (void)test2597
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lrhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lrhar without a semi-colon");
}
        
- (void)test2598
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrhar;"];
    NSArray *tokens = @[@[@"Character",@"‚áã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lrhar; with a semi-colon");
}
        
- (void)test2599
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrhard"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lrhard"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lrhard without a semi-colon");
}
        
- (void)test2600
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrhard;"];
    NSArray *tokens = @[@[@"Character",@"‚•≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lrhard; with a semi-colon");
}
        
- (void)test2601
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrm"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lrm"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lrm without a semi-colon");
}
        
- (void)test2602
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrm;"];
    NSArray *tokens = @[@[@"Character",@"‚Äé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lrm; with a semi-colon");
}
        
- (void)test2603
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrtri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lrtri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lrtri without a semi-colon");
}
        
- (void)test2604
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lrtri;"];
    NSArray *tokens = @[@[@"Character",@"‚äø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lrtri; with a semi-colon");
}
        
- (void)test2605
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsaquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsaquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsaquo without a semi-colon");
}
        
- (void)test2606
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsaquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Äπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsaquo; with a semi-colon");
}
        
- (void)test2607
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lscr without a semi-colon");
}
        
- (void)test2608
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lscr; with a semi-colon");
}
        
- (void)test2609
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsh without a semi-colon");
}
        
- (void)test2610
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsh;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsh; with a semi-colon");
}
        
- (void)test2611
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsim without a semi-colon");
}
        
- (void)test2612
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsim;"];
    NSArray *tokens = @[@[@"Character",@"‚â≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsim; with a semi-colon");
}
        
- (void)test2613
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsime without a semi-colon");
}
        
- (void)test2614
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsime;"];
    NSArray *tokens = @[@[@"Character",@"‚™ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsime; with a semi-colon");
}
        
- (void)test2615
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsimg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsimg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsimg without a semi-colon");
}
        
- (void)test2616
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsimg;"];
    NSArray *tokens = @[@[@"Character",@"‚™è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsimg; with a semi-colon");
}
        
- (void)test2617
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsqb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsqb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsqb without a semi-colon");
}
        
- (void)test2618
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsqb;"];
    NSArray *tokens = @[@[@"Character",@"@["]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsqb; with a semi-colon");
}
        
- (void)test2619
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsquo without a semi-colon");
}
        
- (void)test2620
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Äò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsquo; with a semi-colon");
}
        
- (void)test2621
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsquor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lsquor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lsquor without a semi-colon");
}
        
- (void)test2622
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lsquor;"];
    NSArray *tokens = @[@[@"Character",@"‚Äö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lsquor; with a semi-colon");
}
        
- (void)test2623
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lstrok without a semi-colon");
}
        
- (void)test2624
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lstrok;"];
    NSArray *tokens = @[@[@"Character",@"≈Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lstrok; with a semi-colon");
}
        
- (void)test2625
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"<"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lt without a semi-colon");
}
        
- (void)test2626
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lt;"];
    NSArray *tokens = @[@[@"Character",@"<"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lt; with a semi-colon");
}
        
- (void)test2627
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltcc;"];
    NSArray *tokens = @[@[@"Character",@"‚™¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltcc; with a semi-colon");
}
        
- (void)test2628
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltcir;"];
    NSArray *tokens = @[@[@"Character",@"‚©π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltcir; with a semi-colon");
}
        
- (void)test2629
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltdot; with a semi-colon");
}
        
- (void)test2630
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lthree;"];
    NSArray *tokens = @[@[@"Character",@"‚ãã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lthree; with a semi-colon");
}
        
- (void)test2631
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltimes;"];
    NSArray *tokens = @[@[@"Character",@"‚ãâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltimes; with a semi-colon");
}
        
- (void)test2632
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltlarr;"];
    NSArray *tokens = @[@[@"Character",@"‚•∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltlarr; with a semi-colon");
}
        
- (void)test2633
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltquest;"];
    NSArray *tokens = @[@[@"Character",@"‚©ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltquest; with a semi-colon");
}
        
- (void)test2634
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltrPar;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltrPar; with a semi-colon");
}
        
- (void)test2635
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltri;"];
    NSArray *tokens = @[@[@"Character",@"‚óÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltri; with a semi-colon");
}
        
- (void)test2636
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltrie;"];
    NSArray *tokens = @[@[@"Character",@"‚ä¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltrie; with a semi-colon");
}
        
- (void)test2637
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ltrif;"];
    NSArray *tokens = @[@[@"Character",@"‚óÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ltrif; with a semi-colon");
}
        
- (void)test2638
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lurdshar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lurdshar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lurdshar without a semi-colon");
}
        
- (void)test2639
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lurdshar;"];
    NSArray *tokens = @[@[@"Character",@"‚•ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lurdshar; with a semi-colon");
}
        
- (void)test2640
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&luruhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&luruhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: luruhar without a semi-colon");
}
        
- (void)test2641
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&luruhar;"];
    NSArray *tokens = @[@[@"Character",@"‚•¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: luruhar; with a semi-colon");
}
        
- (void)test2642
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lvertneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lvertneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lvertneqq without a semi-colon");
}
        
- (void)test2643
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lvertneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚â®Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lvertneqq; with a semi-colon");
}
        
- (void)test2644
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lvnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&lvnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: lvnE without a semi-colon");
}
        
- (void)test2645
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&lvnE;"];
    NSArray *tokens = @[@[@"Character",@"‚â®Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: lvnE; with a semi-colon");
}
        
- (void)test2646
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mDDot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mDDot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mDDot without a semi-colon");
}
        
- (void)test2647
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mDDot;"];
    NSArray *tokens = @[@[@"Character",@"‚à∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mDDot; with a semi-colon");
}
        
- (void)test2648
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&macr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: macr without a semi-colon");
}
        
- (void)test2649
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&macr;"];
    NSArray *tokens = @[@[@"Character",@"¬Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: macr; with a semi-colon");
}
        
- (void)test2650
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&male"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&male"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: male without a semi-colon");
}
        
- (void)test2651
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&male;"];
    NSArray *tokens = @[@[@"Character",@"‚ôÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: male; with a semi-colon");
}
        
- (void)test2652
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&malt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&malt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: malt without a semi-colon");
}
        
- (void)test2653
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&malt;"];
    NSArray *tokens = @[@[@"Character",@"‚ú†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: malt; with a semi-colon");
}
        
- (void)test2654
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&maltese"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&maltese"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: maltese without a semi-colon");
}
        
- (void)test2655
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&maltese;"];
    NSArray *tokens = @[@[@"Character",@"‚ú†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: maltese; with a semi-colon");
}
        
- (void)test2656
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&map"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&map"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: map without a semi-colon");
}
        
- (void)test2657
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&map;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: map; with a semi-colon");
}
        
- (void)test2658
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapsto"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mapsto"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mapsto without a semi-colon");
}
        
- (void)test2659
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapsto;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mapsto; with a semi-colon");
}
        
- (void)test2660
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapstodown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mapstodown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mapstodown without a semi-colon");
}
        
- (void)test2661
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapstodown;"];
    NSArray *tokens = @[@[@"Character",@"‚Üß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mapstodown; with a semi-colon");
}
        
- (void)test2662
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapstoleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mapstoleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mapstoleft without a semi-colon");
}
        
- (void)test2663
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapstoleft;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mapstoleft; with a semi-colon");
}
        
- (void)test2664
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapstoup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mapstoup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mapstoup without a semi-colon");
}
        
- (void)test2665
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mapstoup;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mapstoup; with a semi-colon");
}
        
- (void)test2666
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&marker"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&marker"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: marker without a semi-colon");
}
        
- (void)test2667
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&marker;"];
    NSArray *tokens = @[@[@"Character",@"‚ñÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: marker; with a semi-colon");
}
        
- (void)test2668
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mcomma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mcomma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mcomma without a semi-colon");
}
        
- (void)test2669
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mcomma;"];
    NSArray *tokens = @[@[@"Character",@"‚®©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mcomma; with a semi-colon");
}
        
- (void)test2670
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mcy without a semi-colon");
}
        
- (void)test2671
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mcy;"];
    NSArray *tokens = @[@[@"Character",@"–º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mcy; with a semi-colon");
}
        
- (void)test2672
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mdash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mdash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mdash without a semi-colon");
}
        
- (void)test2673
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mdash;"];
    NSArray *tokens = @[@[@"Character",@"‚Äî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mdash; with a semi-colon");
}
        
- (void)test2674
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&measuredangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&measuredangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: measuredangle without a semi-colon");
}
        
- (void)test2675
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&measuredangle;"];
    NSArray *tokens = @[@[@"Character",@"‚à°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: measuredangle; with a semi-colon");
}
        
- (void)test2676
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mfr without a semi-colon");
}
        
- (void)test2677
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mfr; with a semi-colon");
}
        
- (void)test2678
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mho"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mho"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mho without a semi-colon");
}
        
- (void)test2679
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mho;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mho; with a semi-colon");
}
        
- (void)test2680
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&micro"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: micro without a semi-colon");
}
        
- (void)test2681
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&micro;"];
    NSArray *tokens = @[@[@"Character",@"¬µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: micro; with a semi-colon");
}
        
- (void)test2682
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mid without a semi-colon");
}
        
- (void)test2683
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mid;"];
    NSArray *tokens = @[@[@"Character",@"‚à£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mid; with a semi-colon");
}
        
- (void)test2684
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&midast"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&midast"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: midast without a semi-colon");
}
        
- (void)test2685
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&midast;"];
    NSArray *tokens = @[@[@"Character",@"*"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: midast; with a semi-colon");
}
        
- (void)test2686
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&midcir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&midcir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: midcir without a semi-colon");
}
        
- (void)test2687
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&midcir;"];
    NSArray *tokens = @[@[@"Character",@"‚´∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: midcir; with a semi-colon");
}
        
- (void)test2688
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&middot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: middot without a semi-colon");
}
        
- (void)test2689
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&middot;"];
    NSArray *tokens = @[@[@"Character",@"¬∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: middot; with a semi-colon");
}
        
- (void)test2690
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&minus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: minus without a semi-colon");
}
        
- (void)test2691
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minus;"];
    NSArray *tokens = @[@[@"Character",@"‚àí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: minus; with a semi-colon");
}
        
- (void)test2692
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minusb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&minusb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: minusb without a semi-colon");
}
        
- (void)test2693
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minusb;"];
    NSArray *tokens = @[@[@"Character",@"‚äü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: minusb; with a semi-colon");
}
        
- (void)test2694
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minusd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&minusd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: minusd without a semi-colon");
}
        
- (void)test2695
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minusd;"];
    NSArray *tokens = @[@[@"Character",@"‚à∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: minusd; with a semi-colon");
}
        
- (void)test2696
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minusdu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&minusdu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: minusdu without a semi-colon");
}
        
- (void)test2697
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&minusdu;"];
    NSArray *tokens = @[@[@"Character",@"‚®™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: minusdu; with a semi-colon");
}
        
- (void)test2698
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mlcp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mlcp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mlcp without a semi-colon");
}
        
- (void)test2699
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mlcp;"];
    NSArray *tokens = @[@[@"Character",@"‚´õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mlcp; with a semi-colon");
}
        
- (void)test2700
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mldr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mldr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mldr without a semi-colon");
}
        
- (void)test2701
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mldr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mldr; with a semi-colon");
}
        
- (void)test2702
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mnplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mnplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mnplus without a semi-colon");
}
        
- (void)test2703
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mnplus;"];
    NSArray *tokens = @[@[@"Character",@"‚àì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mnplus; with a semi-colon");
}
        
- (void)test2704
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&models"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&models"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: models without a semi-colon");
}
        
- (void)test2705
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&models;"];
    NSArray *tokens = @[@[@"Character",@"‚äß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: models; with a semi-colon");
}
        
- (void)test2706
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mopf without a semi-colon");
}
        
- (void)test2707
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mopf; with a semi-colon");
}
        
- (void)test2708
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mp without a semi-colon");
}
        
- (void)test2709
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mp;"];
    NSArray *tokens = @[@[@"Character",@"‚àì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mp; with a semi-colon");
}
        
- (void)test2710
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mscr without a semi-colon");
}
        
- (void)test2711
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mscr; with a semi-colon");
}
        
- (void)test2712
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mstpos"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mstpos"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mstpos without a semi-colon");
}
        
- (void)test2713
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mstpos;"];
    NSArray *tokens = @[@[@"Character",@"‚àæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mstpos; with a semi-colon");
}
        
- (void)test2714
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mu without a semi-colon");
}
        
- (void)test2715
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mu;"];
    NSArray *tokens = @[@[@"Character",@"Œº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mu; with a semi-colon");
}
        
- (void)test2716
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&multimap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&multimap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: multimap without a semi-colon");
}
        
- (void)test2717
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&multimap;"];
    NSArray *tokens = @[@[@"Character",@"‚ä∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: multimap; with a semi-colon");
}
        
- (void)test2718
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mumap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&mumap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: mumap without a semi-colon");
}
        
- (void)test2719
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&mumap;"];
    NSArray *tokens = @[@[@"Character",@"‚ä∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: mumap; with a semi-colon");
}
        
- (void)test2720
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nGg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nGg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nGg without a semi-colon");
}
        
- (void)test2721
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nGg;"];
    NSArray *tokens = @[@[@"Character",@"‚ãôÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nGg; with a semi-colon");
}
        
- (void)test2722
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nGt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nGt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nGt without a semi-colon");
}
        
- (void)test2723
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nGt;"];
    NSArray *tokens = @[@[@"Character",@"‚â´‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nGt; with a semi-colon");
}
        
- (void)test2724
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nGtv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nGtv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nGtv without a semi-colon");
}
        
- (void)test2725
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nGtv;"];
    NSArray *tokens = @[@[@"Character",@"‚â´Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nGtv; with a semi-colon");
}
        
- (void)test2726
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLeftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nLeftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nLeftarrow without a semi-colon");
}
        
- (void)test2727
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLeftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nLeftarrow; with a semi-colon");
}
        
- (void)test2728
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLeftrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nLeftrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nLeftrightarrow without a semi-colon");
}
        
- (void)test2729
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLeftrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nLeftrightarrow; with a semi-colon");
}
        
- (void)test2730
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nLl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nLl without a semi-colon");
}
        
- (void)test2731
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLl;"];
    NSArray *tokens = @[@[@"Character",@"‚ãòÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nLl; with a semi-colon");
}
        
- (void)test2732
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nLt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nLt without a semi-colon");
}
        
- (void)test2733
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLt;"];
    NSArray *tokens = @[@[@"Character",@"‚â™‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nLt; with a semi-colon");
}
        
- (void)test2734
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLtv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nLtv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nLtv without a semi-colon");
}
        
- (void)test2735
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nLtv;"];
    NSArray *tokens = @[@[@"Character",@"‚â™Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nLtv; with a semi-colon");
}
        
- (void)test2736
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nRightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nRightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nRightarrow without a semi-colon");
}
        
- (void)test2737
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nRightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚áè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nRightarrow; with a semi-colon");
}
        
- (void)test2738
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nVDash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nVDash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nVDash without a semi-colon");
}
        
- (void)test2739
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nVDash;"];
    NSArray *tokens = @[@[@"Character",@"‚äØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nVDash; with a semi-colon");
}
        
- (void)test2740
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nVdash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nVdash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nVdash without a semi-colon");
}
        
- (void)test2741
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nVdash;"];
    NSArray *tokens = @[@[@"Character",@"‚äÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nVdash; with a semi-colon");
}
        
- (void)test2742
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nabla"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nabla"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nabla without a semi-colon");
}
        
- (void)test2743
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nabla;"];
    NSArray *tokens = @[@[@"Character",@"‚àá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nabla; with a semi-colon");
}
        
- (void)test2744
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nacute without a semi-colon");
}
        
- (void)test2745
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nacute;"];
    NSArray *tokens = @[@[@"Character",@"≈Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nacute; with a semi-colon");
}
        
- (void)test2746
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nang without a semi-colon");
}
        
- (void)test2747
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nang;"];
    NSArray *tokens = @[@[@"Character",@"‚à†‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nang; with a semi-colon");
}
        
- (void)test2748
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nap without a semi-colon");
}
        
- (void)test2749
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nap;"];
    NSArray *tokens = @[@[@"Character",@"‚ââ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nap; with a semi-colon");
}
        
- (void)test2750
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&napE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: napE without a semi-colon");
}
        
- (void)test2751
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napE;"];
    NSArray *tokens = @[@[@"Character",@"‚©∞Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: napE; with a semi-colon");
}
        
- (void)test2752
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&napid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: napid without a semi-colon");
}
        
- (void)test2753
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napid;"];
    NSArray *tokens = @[@[@"Character",@"‚âãÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: napid; with a semi-colon");
}
        
- (void)test2754
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napos"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&napos"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: napos without a semi-colon");
}
        
- (void)test2755
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napos;"];
    NSArray *tokens = @[@[@"Character",@"≈â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: napos; with a semi-colon");
}
        
- (void)test2756
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&napprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: napprox without a semi-colon");
}
        
- (void)test2757
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&napprox;"];
    NSArray *tokens = @[@[@"Character",@"‚ââ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: napprox; with a semi-colon");
}
        
- (void)test2758
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&natur"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&natur"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: natur without a semi-colon");
}
        
- (void)test2759
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&natur;"];
    NSArray *tokens = @[@[@"Character",@"‚ôÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: natur; with a semi-colon");
}
        
- (void)test2760
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&natural"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&natural"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: natural without a semi-colon");
}
        
- (void)test2761
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&natural;"];
    NSArray *tokens = @[@[@"Character",@"‚ôÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: natural; with a semi-colon");
}
        
- (void)test2762
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&naturals"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&naturals"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: naturals without a semi-colon");
}
        
- (void)test2763
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&naturals;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: naturals; with a semi-colon");
}
        
- (void)test2764
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nbsp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nbsp without a semi-colon");
}
        
- (void)test2765
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nbsp;"];
    NSArray *tokens = @[@[@"Character",@"¬†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nbsp; with a semi-colon");
}
        
- (void)test2766
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nbump"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nbump"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nbump without a semi-colon");
}
        
- (void)test2767
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nbump;"];
    NSArray *tokens = @[@[@"Character",@"‚âéÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nbump; with a semi-colon");
}
        
- (void)test2768
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nbumpe"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nbumpe"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nbumpe without a semi-colon");
}
        
- (void)test2769
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nbumpe;"];
    NSArray *tokens = @[@[@"Character",@"‚âèÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nbumpe; with a semi-colon");
}
        
- (void)test2770
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ncap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ncap without a semi-colon");
}
        
- (void)test2771
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncap;"];
    NSArray *tokens = @[@[@"Character",@"‚©É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ncap; with a semi-colon");
}
        
- (void)test2772
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ncaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ncaron without a semi-colon");
}
        
- (void)test2773
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncaron;"];
    NSArray *tokens = @[@[@"Character",@"≈à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ncaron; with a semi-colon");
}
        
- (void)test2774
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ncedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ncedil without a semi-colon");
}
        
- (void)test2775
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncedil;"];
    NSArray *tokens = @[@[@"Character",@"≈Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ncedil; with a semi-colon");
}
        
- (void)test2776
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncong"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ncong"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ncong without a semi-colon");
}
        
- (void)test2777
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncong;"];
    NSArray *tokens = @[@[@"Character",@"‚âá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ncong; with a semi-colon");
}
        
- (void)test2778
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncongdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ncongdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ncongdot without a semi-colon");
}
        
- (void)test2779
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncongdot;"];
    NSArray *tokens = @[@[@"Character",@"‚©≠Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ncongdot; with a semi-colon");
}
        
- (void)test2780
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ncup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ncup without a semi-colon");
}
        
- (void)test2781
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncup;"];
    NSArray *tokens = @[@[@"Character",@"‚©Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ncup; with a semi-colon");
}
        
- (void)test2782
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ncy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ncy without a semi-colon");
}
        
- (void)test2783
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ncy;"];
    NSArray *tokens = @[@[@"Character",@"–Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ncy; with a semi-colon");
}
        
- (void)test2784
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ndash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ndash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ndash without a semi-colon");
}
        
- (void)test2785
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ndash;"];
    NSArray *tokens = @[@[@"Character",@"‚Äì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ndash; with a semi-colon");
}
        
- (void)test2786
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ne without a semi-colon");
}
        
- (void)test2787
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ne;"];
    NSArray *tokens = @[@[@"Character",@"‚â†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ne; with a semi-colon");
}
        
- (void)test2788
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&neArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&neArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: neArr without a semi-colon");
}
        
- (void)test2789
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&neArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: neArr; with a semi-colon");
}
        
- (void)test2790
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nearhk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nearhk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nearhk without a semi-colon");
}
        
- (void)test2791
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nearhk;"];
    NSArray *tokens = @[@[@"Character",@"‚§§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nearhk; with a semi-colon");
}
        
- (void)test2792
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nearr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nearr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nearr without a semi-colon");
}
        
- (void)test2793
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nearr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nearr; with a semi-colon");
}
        
- (void)test2794
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nearrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nearrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nearrow without a semi-colon");
}
        
- (void)test2795
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nearrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nearrow; with a semi-colon");
}
        
- (void)test2796
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nedot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nedot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nedot without a semi-colon");
}
        
- (void)test2797
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nedot;"];
    NSArray *tokens = @[@[@"Character",@"‚âêÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nedot; with a semi-colon");
}
        
- (void)test2798
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nequiv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nequiv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nequiv without a semi-colon");
}
        
- (void)test2799
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nequiv;"];
    NSArray *tokens = @[@[@"Character",@"‚â¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nequiv; with a semi-colon");
}
        
- (void)test2800
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nesear"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nesear"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nesear without a semi-colon");
}
        
- (void)test2801
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nesear;"];
    NSArray *tokens = @[@[@"Character",@"‚§®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nesear; with a semi-colon");
}
        
- (void)test2802
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nesim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nesim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nesim without a semi-colon");
}
        
- (void)test2803
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nesim;"];
    NSArray *tokens = @[@[@"Character",@"‚âÇÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nesim; with a semi-colon");
}
        
- (void)test2804
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nexist"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nexist"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nexist without a semi-colon");
}
        
- (void)test2805
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nexist;"];
    NSArray *tokens = @[@[@"Character",@"‚àÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nexist; with a semi-colon");
}
        
- (void)test2806
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nexists"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nexists"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nexists without a semi-colon");
}
        
- (void)test2807
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nexists;"];
    NSArray *tokens = @[@[@"Character",@"‚àÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nexists; with a semi-colon");
}
        
- (void)test2808
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nfr without a semi-colon");
}
        
- (void)test2809
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nfr; with a semi-colon");
}
        
- (void)test2810
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ngE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ngE without a semi-colon");
}
        
- (void)test2811
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngE;"];
    NSArray *tokens = @[@[@"Character",@"‚âßÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ngE; with a semi-colon");
}
        
- (void)test2812
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nge without a semi-colon");
}
        
- (void)test2813
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nge;"];
    NSArray *tokens = @[@[@"Character",@"‚â±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nge; with a semi-colon");
}
        
- (void)test2814
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ngeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ngeq without a semi-colon");
}
        
- (void)test2815
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngeq;"];
    NSArray *tokens = @[@[@"Character",@"‚â±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ngeq; with a semi-colon");
}
        
- (void)test2816
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngeqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ngeqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ngeqq without a semi-colon");
}
        
- (void)test2817
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngeqq;"];
    NSArray *tokens = @[@[@"Character",@"‚âßÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ngeqq; with a semi-colon");
}
        
- (void)test2818
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngeqslant"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ngeqslant"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ngeqslant without a semi-colon");
}
        
- (void)test2819
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngeqslant;"];
    NSArray *tokens = @[@[@"Character",@"‚©æÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ngeqslant; with a semi-colon");
}
        
- (void)test2820
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nges"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nges"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nges without a semi-colon");
}
        
- (void)test2821
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nges;"];
    NSArray *tokens = @[@[@"Character",@"‚©æÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nges; with a semi-colon");
}
        
- (void)test2822
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ngsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ngsim without a semi-colon");
}
        
- (void)test2823
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngsim;"];
    NSArray *tokens = @[@[@"Character",@"‚âµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ngsim; with a semi-colon");
}
        
- (void)test2824
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ngt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ngt without a semi-colon");
}
        
- (void)test2825
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngt;"];
    NSArray *tokens = @[@[@"Character",@"‚âØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ngt; with a semi-colon");
}
        
- (void)test2826
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngtr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ngtr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ngtr without a semi-colon");
}
        
- (void)test2827
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ngtr;"];
    NSArray *tokens = @[@[@"Character",@"‚âØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ngtr; with a semi-colon");
}
        
- (void)test2828
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nhArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nhArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nhArr without a semi-colon");
}
        
- (void)test2829
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nhArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nhArr; with a semi-colon");
}
        
- (void)test2830
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nharr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nharr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nharr without a semi-colon");
}
        
- (void)test2831
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nharr;"];
    NSArray *tokens = @[@[@"Character",@"‚ÜÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nharr; with a semi-colon");
}
        
- (void)test2832
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nhpar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nhpar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nhpar without a semi-colon");
}
        
- (void)test2833
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nhpar;"];
    NSArray *tokens = @[@[@"Character",@"‚´≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nhpar; with a semi-colon");
}
        
- (void)test2834
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ni"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ni"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ni without a semi-colon");
}
        
- (void)test2835
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ni;"];
    NSArray *tokens = @[@[@"Character",@"‚àã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ni; with a semi-colon");
}
        
- (void)test2836
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nis"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nis"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nis without a semi-colon");
}
        
- (void)test2837
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nis;"];
    NSArray *tokens = @[@[@"Character",@"‚ãº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nis; with a semi-colon");
}
        
- (void)test2838
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nisd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nisd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nisd without a semi-colon");
}
        
- (void)test2839
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nisd;"];
    NSArray *tokens = @[@[@"Character",@"‚ã∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nisd; with a semi-colon");
}
        
- (void)test2840
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&niv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&niv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: niv without a semi-colon");
}
        
- (void)test2841
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&niv;"];
    NSArray *tokens = @[@[@"Character",@"‚àã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: niv; with a semi-colon");
}
        
- (void)test2842
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&njcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&njcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: njcy without a semi-colon");
}
        
- (void)test2843
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&njcy;"];
    NSArray *tokens = @[@[@"Character",@"—ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: njcy; with a semi-colon");
}
        
- (void)test2844
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nlArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nlArr without a semi-colon");
}
        
- (void)test2845
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nlArr; with a semi-colon");
}
        
- (void)test2846
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nlE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nlE without a semi-colon");
}
        
- (void)test2847
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlE;"];
    NSArray *tokens = @[@[@"Character",@"‚â¶Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nlE; with a semi-colon");
}
        
- (void)test2848
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nlarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nlarr without a semi-colon");
}
        
- (void)test2849
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nlarr; with a semi-colon");
}
        
- (void)test2850
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nldr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nldr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nldr without a semi-colon");
}
        
- (void)test2851
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nldr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nldr; with a semi-colon");
}
        
- (void)test2852
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nle without a semi-colon");
}
        
- (void)test2853
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nle;"];
    NSArray *tokens = @[@[@"Character",@"‚â∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nle; with a semi-colon");
}
        
- (void)test2854
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nleftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nleftarrow without a semi-colon");
}
        
- (void)test2855
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nleftarrow; with a semi-colon");
}
        
- (void)test2856
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleftrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nleftrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nleftrightarrow without a semi-colon");
}
        
- (void)test2857
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleftrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚ÜÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nleftrightarrow; with a semi-colon");
}
        
- (void)test2858
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nleq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nleq without a semi-colon");
}
        
- (void)test2859
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleq;"];
    NSArray *tokens = @[@[@"Character",@"‚â∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nleq; with a semi-colon");
}
        
- (void)test2860
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nleqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nleqq without a semi-colon");
}
        
- (void)test2861
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleqq;"];
    NSArray *tokens = @[@[@"Character",@"‚â¶Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nleqq; with a semi-colon");
}
        
- (void)test2862
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleqslant"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nleqslant"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nleqslant without a semi-colon");
}
        
- (void)test2863
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nleqslant;"];
    NSArray *tokens = @[@[@"Character",@"‚©ΩÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nleqslant; with a semi-colon");
}
        
- (void)test2864
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nles"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nles"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nles without a semi-colon");
}
        
- (void)test2865
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nles;"];
    NSArray *tokens = @[@[@"Character",@"‚©ΩÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nles; with a semi-colon");
}
        
- (void)test2866
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nless"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nless"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nless without a semi-colon");
}
        
- (void)test2867
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nless;"];
    NSArray *tokens = @[@[@"Character",@"‚âÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nless; with a semi-colon");
}
        
- (void)test2868
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nlsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nlsim without a semi-colon");
}
        
- (void)test2869
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlsim;"];
    NSArray *tokens = @[@[@"Character",@"‚â¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nlsim; with a semi-colon");
}
        
- (void)test2870
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nlt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nlt without a semi-colon");
}
        
- (void)test2871
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nlt;"];
    NSArray *tokens = @[@[@"Character",@"‚âÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nlt; with a semi-colon");
}
        
- (void)test2872
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nltri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nltri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nltri without a semi-colon");
}
        
- (void)test2873
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nltri;"];
    NSArray *tokens = @[@[@"Character",@"‚ã™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nltri; with a semi-colon");
}
        
- (void)test2874
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nltrie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nltrie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nltrie without a semi-colon");
}
        
- (void)test2875
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nltrie;"];
    NSArray *tokens = @[@[@"Character",@"‚ã¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nltrie; with a semi-colon");
}
        
- (void)test2876
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nmid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nmid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nmid without a semi-colon");
}
        
- (void)test2877
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nmid;"];
    NSArray *tokens = @[@[@"Character",@"‚à§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nmid; with a semi-colon");
}
        
- (void)test2878
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nopf without a semi-colon");
}
        
- (void)test2879
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nopf; with a semi-colon");
}
        
- (void)test2880
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&not"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: not without a semi-colon");
}
        
- (void)test2881
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&not;"];
    NSArray *tokens = @[@[@"Character",@"¬¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: not; with a semi-colon");
}
        
- (void)test2882
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notin;"];
    NSArray *tokens = @[@[@"Character",@"‚àâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notin; with a semi-colon");
}
        
- (void)test2883
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notinE;"];
    NSArray *tokens = @[@[@"Character",@"‚ãπÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notinE; with a semi-colon");
}
        
- (void)test2884
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notindot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãµÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notindot; with a semi-colon");
}
        
- (void)test2885
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notinva;"];
    NSArray *tokens = @[@[@"Character",@"‚àâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notinva; with a semi-colon");
}
        
- (void)test2886
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notinvb;"];
    NSArray *tokens = @[@[@"Character",@"‚ã∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notinvb; with a semi-colon");
}
        
- (void)test2887
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notinvc;"];
    NSArray *tokens = @[@[@"Character",@"‚ã∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notinvc; with a semi-colon");
}
        
- (void)test2888
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notni;"];
    NSArray *tokens = @[@[@"Character",@"‚àå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notni; with a semi-colon");
}
        
- (void)test2889
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notniva;"];
    NSArray *tokens = @[@[@"Character",@"‚àå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notniva; with a semi-colon");
}
        
- (void)test2890
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notnivb;"];
    NSArray *tokens = @[@[@"Character",@"‚ãæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notnivb; with a semi-colon");
}
        
- (void)test2891
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&notnivc;"];
    NSArray *tokens = @[@[@"Character",@"‚ãΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: notnivc; with a semi-colon");
}
        
- (void)test2892
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&npar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: npar without a semi-colon");
}
        
- (void)test2893
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npar;"];
    NSArray *tokens = @[@[@"Character",@"‚à¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: npar; with a semi-colon");
}
        
- (void)test2894
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nparallel"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nparallel"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nparallel without a semi-colon");
}
        
- (void)test2895
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nparallel;"];
    NSArray *tokens = @[@[@"Character",@"‚à¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nparallel; with a semi-colon");
}
        
- (void)test2896
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nparsl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nparsl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nparsl without a semi-colon");
}
        
- (void)test2897
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nparsl;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ω‚É•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nparsl; with a semi-colon");
}
        
- (void)test2898
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npart"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&npart"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: npart without a semi-colon");
}
        
- (void)test2899
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npart;"];
    NSArray *tokens = @[@[@"Character",@"‚àÇÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: npart; with a semi-colon");
}
        
- (void)test2900
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npolint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&npolint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: npolint without a semi-colon");
}
        
- (void)test2901
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npolint;"];
    NSArray *tokens = @[@[@"Character",@"‚®î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: npolint; with a semi-colon");
}
        
- (void)test2902
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&npr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: npr without a semi-colon");
}
        
- (void)test2903
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npr;"];
    NSArray *tokens = @[@[@"Character",@"‚äÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: npr; with a semi-colon");
}
        
- (void)test2904
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nprcue"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nprcue"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nprcue without a semi-colon");
}
        
- (void)test2905
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nprcue;"];
    NSArray *tokens = @[@[@"Character",@"‚ã†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nprcue; with a semi-colon");
}
        
- (void)test2906
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npre"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&npre"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: npre without a semi-colon");
}
        
- (void)test2907
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npre;"];
    NSArray *tokens = @[@[@"Character",@"‚™ØÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: npre; with a semi-colon");
}
        
- (void)test2908
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nprec"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nprec"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nprec without a semi-colon");
}
        
- (void)test2909
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nprec;"];
    NSArray *tokens = @[@[@"Character",@"‚äÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nprec; with a semi-colon");
}
        
- (void)test2910
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npreceq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&npreceq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: npreceq without a semi-colon");
}
        
- (void)test2911
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&npreceq;"];
    NSArray *tokens = @[@[@"Character",@"‚™ØÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: npreceq; with a semi-colon");
}
        
- (void)test2912
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nrArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nrArr without a semi-colon");
}
        
- (void)test2913
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nrArr; with a semi-colon");
}
        
- (void)test2914
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nrarr without a semi-colon");
}
        
- (void)test2915
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nrarr; with a semi-colon");
}
        
- (void)test2916
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrarrc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nrarrc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nrarrc without a semi-colon");
}
        
- (void)test2917
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrarrc;"];
    NSArray *tokens = @[@[@"Character",@"‚§≥Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nrarrc; with a semi-colon");
}
        
- (void)test2918
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrarrw"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nrarrw"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nrarrw without a semi-colon");
}
        
- (void)test2919
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrarrw;"];
    NSArray *tokens = @[@[@"Character",@"‚ÜùÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nrarrw; with a semi-colon");
}
        
- (void)test2920
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nrightarrow without a semi-colon");
}
        
- (void)test2921
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nrightarrow; with a semi-colon");
}
        
- (void)test2922
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrtri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nrtri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nrtri without a semi-colon");
}
        
- (void)test2923
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrtri;"];
    NSArray *tokens = @[@[@"Character",@"‚ã´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nrtri; with a semi-colon");
}
        
- (void)test2924
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrtrie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nrtrie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nrtrie without a semi-colon");
}
        
- (void)test2925
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nrtrie;"];
    NSArray *tokens = @[@[@"Character",@"‚ã≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nrtrie; with a semi-colon");
}
        
- (void)test2926
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsc without a semi-colon");
}
        
- (void)test2927
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsc;"];
    NSArray *tokens = @[@[@"Character",@"‚äÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsc; with a semi-colon");
}
        
- (void)test2928
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsccue"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsccue"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsccue without a semi-colon");
}
        
- (void)test2929
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsccue;"];
    NSArray *tokens = @[@[@"Character",@"‚ã°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsccue; with a semi-colon");
}
        
- (void)test2930
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsce"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsce"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsce without a semi-colon");
}
        
- (void)test2931
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsce;"];
    NSArray *tokens = @[@[@"Character",@"‚™∞Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsce; with a semi-colon");
}
        
- (void)test2932
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nscr without a semi-colon");
}
        
- (void)test2933
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nscr; with a semi-colon");
}
        
- (void)test2934
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nshortmid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nshortmid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nshortmid without a semi-colon");
}
        
- (void)test2935
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nshortmid;"];
    NSArray *tokens = @[@[@"Character",@"‚à§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nshortmid; with a semi-colon");
}
        
- (void)test2936
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nshortparallel"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nshortparallel"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nshortparallel without a semi-colon");
}
        
- (void)test2937
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nshortparallel;"];
    NSArray *tokens = @[@[@"Character",@"‚à¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nshortparallel; with a semi-colon");
}
        
- (void)test2938
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsim without a semi-colon");
}
        
- (void)test2939
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsim;"];
    NSArray *tokens = @[@[@"Character",@"‚âÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsim; with a semi-colon");
}
        
- (void)test2940
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsime without a semi-colon");
}
        
- (void)test2941
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsime;"];
    NSArray *tokens = @[@[@"Character",@"‚âÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsime; with a semi-colon");
}
        
- (void)test2942
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsimeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsimeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsimeq without a semi-colon");
}
        
- (void)test2943
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsimeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsimeq; with a semi-colon");
}
        
- (void)test2944
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsmid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsmid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsmid without a semi-colon");
}
        
- (void)test2945
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsmid;"];
    NSArray *tokens = @[@[@"Character",@"‚à§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsmid; with a semi-colon");
}
        
- (void)test2946
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nspar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nspar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nspar without a semi-colon");
}
        
- (void)test2947
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nspar;"];
    NSArray *tokens = @[@[@"Character",@"‚à¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nspar; with a semi-colon");
}
        
- (void)test2948
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsqsube"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsqsube"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsqsube without a semi-colon");
}
        
- (void)test2949
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsqsube;"];
    NSArray *tokens = @[@[@"Character",@"‚ã¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsqsube; with a semi-colon");
}
        
- (void)test2950
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsqsupe"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsqsupe"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsqsupe without a semi-colon");
}
        
- (void)test2951
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsqsupe;"];
    NSArray *tokens = @[@[@"Character",@"‚ã£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsqsupe; with a semi-colon");
}
        
- (void)test2952
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsub without a semi-colon");
}
        
- (void)test2953
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsub;"];
    NSArray *tokens = @[@[@"Character",@"‚äÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsub; with a semi-colon");
}
        
- (void)test2954
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsubE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsubE without a semi-colon");
}
        
- (void)test2955
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubE;"];
    NSArray *tokens = @[@[@"Character",@"‚´ÖÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsubE; with a semi-colon");
}
        
- (void)test2956
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsube"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsube"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsube without a semi-colon");
}
        
- (void)test2957
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsube;"];
    NSArray *tokens = @[@[@"Character",@"‚äà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsube; with a semi-colon");
}
        
- (void)test2958
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsubset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsubset without a semi-colon");
}
        
- (void)test2959
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubset;"];
    NSArray *tokens = @[@[@"Character",@"‚äÇ‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsubset; with a semi-colon");
}
        
- (void)test2960
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubseteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsubseteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsubseteq without a semi-colon");
}
        
- (void)test2961
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubseteq;"];
    NSArray *tokens = @[@[@"Character",@"‚äà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsubseteq; with a semi-colon");
}
        
- (void)test2962
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubseteqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsubseteqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsubseteqq without a semi-colon");
}
        
- (void)test2963
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsubseteqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´ÖÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsubseteqq; with a semi-colon");
}
        
- (void)test2964
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsucc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsucc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsucc without a semi-colon");
}
        
- (void)test2965
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsucc;"];
    NSArray *tokens = @[@[@"Character",@"‚äÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsucc; with a semi-colon");
}
        
- (void)test2966
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsucceq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsucceq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsucceq without a semi-colon");
}
        
- (void)test2967
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsucceq;"];
    NSArray *tokens = @[@[@"Character",@"‚™∞Ã∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsucceq; with a semi-colon");
}
        
- (void)test2968
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsup without a semi-colon");
}
        
- (void)test2969
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsup;"];
    NSArray *tokens = @[@[@"Character",@"‚äÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsup; with a semi-colon");
}
        
- (void)test2970
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsupE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsupE without a semi-colon");
}
        
- (void)test2971
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupE;"];
    NSArray *tokens = @[@[@"Character",@"‚´ÜÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsupE; with a semi-colon");
}
        
- (void)test2972
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupe"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsupe"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsupe without a semi-colon");
}
        
- (void)test2973
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupe;"];
    NSArray *tokens = @[@[@"Character",@"‚äâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsupe; with a semi-colon");
}
        
- (void)test2974
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsupset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsupset without a semi-colon");
}
        
- (void)test2975
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupset;"];
    NSArray *tokens = @[@[@"Character",@"‚äÉ‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsupset; with a semi-colon");
}
        
- (void)test2976
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupseteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsupseteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsupseteq without a semi-colon");
}
        
- (void)test2977
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupseteq;"];
    NSArray *tokens = @[@[@"Character",@"‚äâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsupseteq; with a semi-colon");
}
        
- (void)test2978
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupseteqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nsupseteqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nsupseteqq without a semi-colon");
}
        
- (void)test2979
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nsupseteqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´ÜÃ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nsupseteqq; with a semi-colon");
}
        
- (void)test2980
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntgl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ntgl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ntgl without a semi-colon");
}
        
- (void)test2981
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntgl;"];
    NSArray *tokens = @[@[@"Character",@"‚âπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntgl; with a semi-colon");
}
        
- (void)test2982
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntilde without a semi-colon");
}
        
- (void)test2983
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntilde;"];
    NSArray *tokens = @[@[@"Character",@"√±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntilde; with a semi-colon");
}
        
- (void)test2984
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntlg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ntlg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ntlg without a semi-colon");
}
        
- (void)test2985
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntlg;"];
    NSArray *tokens = @[@[@"Character",@"‚â∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntlg; with a semi-colon");
}
        
- (void)test2986
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntriangleleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ntriangleleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ntriangleleft without a semi-colon");
}
        
- (void)test2987
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntriangleleft;"];
    NSArray *tokens = @[@[@"Character",@"‚ã™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntriangleleft; with a semi-colon");
}
        
- (void)test2988
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntrianglelefteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ntrianglelefteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ntrianglelefteq without a semi-colon");
}
        
- (void)test2989
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntrianglelefteq;"];
    NSArray *tokens = @[@[@"Character",@"‚ã¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntrianglelefteq; with a semi-colon");
}
        
- (void)test2990
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntriangleright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ntriangleright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ntriangleright without a semi-colon");
}
        
- (void)test2991
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntriangleright;"];
    NSArray *tokens = @[@[@"Character",@"‚ã´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntriangleright; with a semi-colon");
}
        
- (void)test2992
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntrianglerighteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ntrianglerighteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ntrianglerighteq without a semi-colon");
}
        
- (void)test2993
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ntrianglerighteq;"];
    NSArray *tokens = @[@[@"Character",@"‚ã≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ntrianglerighteq; with a semi-colon");
}
        
- (void)test2994
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nu without a semi-colon");
}
        
- (void)test2995
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nu;"];
    NSArray *tokens = @[@[@"Character",@"ŒΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nu; with a semi-colon");
}
        
- (void)test2996
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&num"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&num"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: num without a semi-colon");
}
        
- (void)test2997
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&num;"];
    NSArray *tokens = @[@[@"Character",@"#"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: num; with a semi-colon");
}
        
- (void)test2998
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&numero"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&numero"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: numero without a semi-colon");
}
        
- (void)test2999
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&numero;"];
    NSArray *tokens = @[@[@"Character",@"‚Ññ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: numero; with a semi-colon");
}
        
- (void)test3000
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&numsp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&numsp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: numsp without a semi-colon");
}
        
- (void)test3001
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&numsp;"];
    NSArray *tokens = @[@[@"Character",@"‚Äá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: numsp; with a semi-colon");
}
        
- (void)test3002
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvDash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvDash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvDash without a semi-colon");
}
        
- (void)test3003
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvDash;"];
    NSArray *tokens = @[@[@"Character",@"‚ä≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvDash; with a semi-colon");
}
        
- (void)test3004
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvHarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvHarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvHarr without a semi-colon");
}
        
- (void)test3005
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvHarr;"];
    NSArray *tokens = @[@[@"Character",@"‚§Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvHarr; with a semi-colon");
}
        
- (void)test3006
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvap without a semi-colon");
}
        
- (void)test3007
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvap;"];
    NSArray *tokens = @[@[@"Character",@"‚âç‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvap; with a semi-colon");
}
        
- (void)test3008
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvdash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvdash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvdash without a semi-colon");
}
        
- (void)test3009
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvdash;"];
    NSArray *tokens = @[@[@"Character",@"‚ä¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvdash; with a semi-colon");
}
        
- (void)test3010
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvge without a semi-colon");
}
        
- (void)test3011
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvge;"];
    NSArray *tokens = @[@[@"Character",@"‚â•‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvge; with a semi-colon");
}
        
- (void)test3012
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvgt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvgt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvgt without a semi-colon");
}
        
- (void)test3013
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvgt;"];
    NSArray *tokens = @[@[@"Character",@">‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvgt; with a semi-colon");
}
        
- (void)test3014
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvinfin"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvinfin"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvinfin without a semi-colon");
}
        
- (void)test3015
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvinfin;"];
    NSArray *tokens = @[@[@"Character",@"‚ßû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvinfin; with a semi-colon");
}
        
- (void)test3016
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvlArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvlArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvlArr without a semi-colon");
}
        
- (void)test3017
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvlArr;"];
    NSArray *tokens = @[@[@"Character",@"‚§Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvlArr; with a semi-colon");
}
        
- (void)test3018
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvle without a semi-colon");
}
        
- (void)test3019
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvle;"];
    NSArray *tokens = @[@[@"Character",@"‚â§‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvle; with a semi-colon");
}
        
- (void)test3020
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvlt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvlt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvlt without a semi-colon");
}
        
- (void)test3021
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvlt;"];
    NSArray *tokens = @[@[@"Character",@"<‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvlt; with a semi-colon");
}
        
- (void)test3022
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvltrie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvltrie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvltrie without a semi-colon");
}
        
- (void)test3023
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvltrie;"];
    NSArray *tokens = @[@[@"Character",@"‚ä¥‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvltrie; with a semi-colon");
}
        
- (void)test3024
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvrArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvrArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvrArr without a semi-colon");
}
        
- (void)test3025
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvrArr;"];
    NSArray *tokens = @[@[@"Character",@"‚§É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvrArr; with a semi-colon");
}
        
- (void)test3026
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvrtrie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvrtrie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvrtrie without a semi-colon");
}
        
- (void)test3027
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvrtrie;"];
    NSArray *tokens = @[@[@"Character",@"‚äµ‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvrtrie; with a semi-colon");
}
        
- (void)test3028
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nvsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nvsim without a semi-colon");
}
        
- (void)test3029
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nvsim;"];
    NSArray *tokens = @[@[@"Character",@"‚àº‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nvsim; with a semi-colon");
}
        
- (void)test3030
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nwArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nwArr without a semi-colon");
}
        
- (void)test3031
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nwArr; with a semi-colon");
}
        
- (void)test3032
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwarhk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nwarhk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nwarhk without a semi-colon");
}
        
- (void)test3033
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwarhk;"];
    NSArray *tokens = @[@[@"Character",@"‚§£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nwarhk; with a semi-colon");
}
        
- (void)test3034
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nwarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nwarr without a semi-colon");
}
        
- (void)test3035
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nwarr; with a semi-colon");
}
        
- (void)test3036
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nwarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nwarrow without a semi-colon");
}
        
- (void)test3037
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nwarrow; with a semi-colon");
}
        
- (void)test3038
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwnear"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&nwnear"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: nwnear without a semi-colon");
}
        
- (void)test3039
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&nwnear;"];
    NSArray *tokens = @[@[@"Character",@"‚§ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: nwnear; with a semi-colon");
}
        
- (void)test3040
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oS"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oS"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oS without a semi-colon");
}
        
- (void)test3041
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oS;"];
    NSArray *tokens = @[@[@"Character",@"‚ìà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oS; with a semi-colon");
}
        
- (void)test3042
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oacute without a semi-colon");
}
        
- (void)test3043
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oacute;"];
    NSArray *tokens = @[@[@"Character",@"√≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oacute; with a semi-colon");
}
        
- (void)test3044
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oast"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oast"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oast without a semi-colon");
}
        
- (void)test3045
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oast;"];
    NSArray *tokens = @[@[@"Character",@"‚äõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oast; with a semi-colon");
}
        
- (void)test3046
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ocir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ocir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ocir without a semi-colon");
}
        
- (void)test3047
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ocir;"];
    NSArray *tokens = @[@[@"Character",@"‚äö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ocir; with a semi-colon");
}
        
- (void)test3048
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ocirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ocirc without a semi-colon");
}
        
- (void)test3049
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ocirc;"];
    NSArray *tokens = @[@[@"Character",@"√¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ocirc; with a semi-colon");
}
        
- (void)test3050
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ocy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ocy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ocy without a semi-colon");
}
        
- (void)test3051
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ocy;"];
    NSArray *tokens = @[@[@"Character",@"–æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ocy; with a semi-colon");
}
        
- (void)test3052
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&odash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: odash without a semi-colon");
}
        
- (void)test3053
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odash;"];
    NSArray *tokens = @[@[@"Character",@"‚äù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: odash; with a semi-colon");
}
        
- (void)test3054
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odblac"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&odblac"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: odblac without a semi-colon");
}
        
- (void)test3055
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odblac;"];
    NSArray *tokens = @[@[@"Character",@"≈ë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: odblac; with a semi-colon");
}
        
- (void)test3056
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odiv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&odiv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: odiv without a semi-colon");
}
        
- (void)test3057
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odiv;"];
    NSArray *tokens = @[@[@"Character",@"‚®∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: odiv; with a semi-colon");
}
        
- (void)test3058
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&odot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: odot without a semi-colon");
}
        
- (void)test3059
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odot;"];
    NSArray *tokens = @[@[@"Character",@"‚äô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: odot; with a semi-colon");
}
        
- (void)test3060
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odsold"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&odsold"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: odsold without a semi-colon");
}
        
- (void)test3061
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&odsold;"];
    NSArray *tokens = @[@[@"Character",@"‚¶º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: odsold; with a semi-colon");
}
        
- (void)test3062
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oelig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oelig"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oelig without a semi-colon");
}
        
- (void)test3063
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oelig;"];
    NSArray *tokens = @[@[@"Character",@"≈ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oelig; with a semi-colon");
}
        
- (void)test3064
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ofcir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ofcir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ofcir without a semi-colon");
}
        
- (void)test3065
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ofcir;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ofcir; with a semi-colon");
}
        
- (void)test3066
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ofr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ofr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ofr without a semi-colon");
}
        
- (void)test3067
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ofr;"];
    NSArray *tokens = @[@[@"Character",@"ùî¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ofr; with a semi-colon");
}
        
- (void)test3068
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ogon without a semi-colon");
}
        
- (void)test3069
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ogon;"];
    NSArray *tokens = @[@[@"Character",@"Àõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ogon; with a semi-colon");
}
        
- (void)test3070
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ograve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ograve without a semi-colon");
}
        
- (void)test3071
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ograve;"];
    NSArray *tokens = @[@[@"Character",@"√≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ograve; with a semi-colon");
}
        
- (void)test3072
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ogt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ogt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ogt without a semi-colon");
}
        
- (void)test3073
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ogt;"];
    NSArray *tokens = @[@[@"Character",@"‚ßÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ogt; with a semi-colon");
}
        
- (void)test3074
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ohbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ohbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ohbar without a semi-colon");
}
        
- (void)test3075
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ohbar;"];
    NSArray *tokens = @[@[@"Character",@"‚¶µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ohbar; with a semi-colon");
}
        
- (void)test3076
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ohm"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ohm"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ohm without a semi-colon");
}
        
- (void)test3077
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ohm;"];
    NSArray *tokens = @[@[@"Character",@"Œ©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ohm; with a semi-colon");
}
        
- (void)test3078
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oint without a semi-colon");
}
        
- (void)test3079
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oint;"];
    NSArray *tokens = @[@[@"Character",@"‚àÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oint; with a semi-colon");
}
        
- (void)test3080
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&olarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: olarr without a semi-colon");
}
        
- (void)test3081
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: olarr; with a semi-colon");
}
        
- (void)test3082
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olcir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&olcir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: olcir without a semi-colon");
}
        
- (void)test3083
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olcir;"];
    NSArray *tokens = @[@[@"Character",@"‚¶æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: olcir; with a semi-colon");
}
        
- (void)test3084
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olcross"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&olcross"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: olcross without a semi-colon");
}
        
- (void)test3085
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olcross;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: olcross; with a semi-colon");
}
        
- (void)test3086
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oline"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oline"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oline without a semi-colon");
}
        
- (void)test3087
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oline;"];
    NSArray *tokens = @[@[@"Character",@"‚Äæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oline; with a semi-colon");
}
        
- (void)test3088
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&olt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: olt without a semi-colon");
}
        
- (void)test3089
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&olt;"];
    NSArray *tokens = @[@[@"Character",@"‚ßÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: olt; with a semi-colon");
}
        
- (void)test3090
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&omacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: omacr without a semi-colon");
}
        
- (void)test3091
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omacr;"];
    NSArray *tokens = @[@[@"Character",@"≈ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: omacr; with a semi-colon");
}
        
- (void)test3092
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omega"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&omega"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: omega without a semi-colon");
}
        
- (void)test3093
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omega;"];
    NSArray *tokens = @[@[@"Character",@"œâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: omega; with a semi-colon");
}
        
- (void)test3094
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omicron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&omicron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: omicron without a semi-colon");
}
        
- (void)test3095
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omicron;"];
    NSArray *tokens = @[@[@"Character",@"Œø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: omicron; with a semi-colon");
}
        
- (void)test3096
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&omid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: omid without a semi-colon");
}
        
- (void)test3097
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&omid;"];
    NSArray *tokens = @[@[@"Character",@"‚¶∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: omid; with a semi-colon");
}
        
- (void)test3098
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ominus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ominus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ominus without a semi-colon");
}
        
- (void)test3099
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ominus;"];
    NSArray *tokens = @[@[@"Character",@"‚äñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ominus; with a semi-colon");
}
        
- (void)test3100
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oopf without a semi-colon");
}
        
- (void)test3101
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oopf; with a semi-colon");
}
        
- (void)test3102
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&opar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&opar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: opar without a semi-colon");
}
        
- (void)test3103
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&opar;"];
    NSArray *tokens = @[@[@"Character",@"‚¶∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: opar; with a semi-colon");
}
        
- (void)test3104
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&operp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&operp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: operp without a semi-colon");
}
        
- (void)test3105
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&operp;"];
    NSArray *tokens = @[@[@"Character",@"‚¶π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: operp; with a semi-colon");
}
        
- (void)test3106
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oplus without a semi-colon");
}
        
- (void)test3107
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oplus;"];
    NSArray *tokens = @[@[@"Character",@"‚äï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oplus; with a semi-colon");
}
        
- (void)test3108
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&or"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&or"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: or without a semi-colon");
}
        
- (void)test3109
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&or;"];
    NSArray *tokens = @[@[@"Character",@"‚à®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: or; with a semi-colon");
}
        
- (void)test3110
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&orarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: orarr without a semi-colon");
}
        
- (void)test3111
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: orarr; with a semi-colon");
}
        
- (void)test3112
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ord"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ord"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ord without a semi-colon");
}
        
- (void)test3113
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ord;"];
    NSArray *tokens = @[@[@"Character",@"‚©ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ord; with a semi-colon");
}
        
- (void)test3114
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&order"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&order"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: order without a semi-colon");
}
        
- (void)test3115
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&order;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: order; with a semi-colon");
}
        
- (void)test3116
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orderof"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&orderof"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: orderof without a semi-colon");
}
        
- (void)test3117
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orderof;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: orderof; with a semi-colon");
}
        
- (void)test3118
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ordf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ordf without a semi-colon");
}
        
- (void)test3119
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ordf;"];
    NSArray *tokens = @[@[@"Character",@"¬™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ordf; with a semi-colon");
}
        
- (void)test3120
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ordm"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ordm without a semi-colon");
}
        
- (void)test3121
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ordm;"];
    NSArray *tokens = @[@[@"Character",@"¬∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ordm; with a semi-colon");
}
        
- (void)test3122
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&origof"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&origof"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: origof without a semi-colon");
}
        
- (void)test3123
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&origof;"];
    NSArray *tokens = @[@[@"Character",@"‚ä∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: origof; with a semi-colon");
}
        
- (void)test3124
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oror"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oror"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oror without a semi-colon");
}
        
- (void)test3125
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oror;"];
    NSArray *tokens = @[@[@"Character",@"‚©ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oror; with a semi-colon");
}
        
- (void)test3126
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orslope"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&orslope"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: orslope without a semi-colon");
}
        
- (void)test3127
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orslope;"];
    NSArray *tokens = @[@[@"Character",@"‚©ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: orslope; with a semi-colon");
}
        
- (void)test3128
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&orv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: orv without a semi-colon");
}
        
- (void)test3129
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&orv;"];
    NSArray *tokens = @[@[@"Character",@"‚©õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: orv; with a semi-colon");
}
        
- (void)test3130
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&oscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: oscr without a semi-colon");
}
        
- (void)test3131
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oscr;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oscr; with a semi-colon");
}
        
- (void)test3132
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oslash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oslash without a semi-colon");
}
        
- (void)test3133
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&oslash;"];
    NSArray *tokens = @[@[@"Character",@"√∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: oslash; with a semi-colon");
}
        
- (void)test3134
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&osol"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&osol"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: osol without a semi-colon");
}
        
- (void)test3135
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&osol;"];
    NSArray *tokens = @[@[@"Character",@"‚äò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: osol; with a semi-colon");
}
        
- (void)test3136
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&otilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: otilde without a semi-colon");
}
        
- (void)test3137
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&otilde;"];
    NSArray *tokens = @[@[@"Character",@"√µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: otilde; with a semi-colon");
}
        
- (void)test3138
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&otimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&otimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: otimes without a semi-colon");
}
        
- (void)test3139
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&otimes;"];
    NSArray *tokens = @[@[@"Character",@"‚äó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: otimes; with a semi-colon");
}
        
- (void)test3140
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&otimesas"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&otimesas"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: otimesas without a semi-colon");
}
        
- (void)test3141
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&otimesas;"];
    NSArray *tokens = @[@[@"Character",@"‚®∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: otimesas; with a semi-colon");
}
        
- (void)test3142
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ouml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ouml without a semi-colon");
}
        
- (void)test3143
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ouml;"];
    NSArray *tokens = @[@[@"Character",@"√∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ouml; with a semi-colon");
}
        
- (void)test3144
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ovbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ovbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ovbar without a semi-colon");
}
        
- (void)test3145
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ovbar;"];
    NSArray *tokens = @[@[@"Character",@"‚åΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ovbar; with a semi-colon");
}
        
- (void)test3146
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&par"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&par"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: par without a semi-colon");
}
        
- (void)test3147
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&par;"];
    NSArray *tokens = @[@[@"Character",@"‚à•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: par; with a semi-colon");
}
        
- (void)test3148
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&para"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: para without a semi-colon");
}
        
- (void)test3149
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&para;"];
    NSArray *tokens = @[@[@"Character",@"¬∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: para; with a semi-colon");
}
        
- (void)test3150
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&parallel;"];
    NSArray *tokens = @[@[@"Character",@"‚à•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: parallel; with a semi-colon");
}
        
- (void)test3151
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&parsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&parsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: parsim without a semi-colon");
}
        
- (void)test3152
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&parsim;"];
    NSArray *tokens = @[@[@"Character",@"‚´≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: parsim; with a semi-colon");
}
        
- (void)test3153
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&parsl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&parsl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: parsl without a semi-colon");
}
        
- (void)test3154
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&parsl;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: parsl; with a semi-colon");
}
        
- (void)test3155
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&part"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&part"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: part without a semi-colon");
}
        
- (void)test3156
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&part;"];
    NSArray *tokens = @[@[@"Character",@"‚àÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: part; with a semi-colon");
}
        
- (void)test3157
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pcy without a semi-colon");
}
        
- (void)test3158
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pcy;"];
    NSArray *tokens = @[@[@"Character",@"–ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pcy; with a semi-colon");
}
        
- (void)test3159
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&percnt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&percnt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: percnt without a semi-colon");
}
        
- (void)test3160
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&percnt;"];
    NSArray *tokens = @[@[@"Character",@"%"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: percnt; with a semi-colon");
}
        
- (void)test3161
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&period"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&period"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: period without a semi-colon");
}
        
- (void)test3162
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&period;"];
    NSArray *tokens = @[@[@"Character",@"."]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: period; with a semi-colon");
}
        
- (void)test3163
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&permil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&permil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: permil without a semi-colon");
}
        
- (void)test3164
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&permil;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: permil; with a semi-colon");
}
        
- (void)test3165
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&perp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&perp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: perp without a semi-colon");
}
        
- (void)test3166
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&perp;"];
    NSArray *tokens = @[@[@"Character",@"‚ä•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: perp; with a semi-colon");
}
        
- (void)test3167
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pertenk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pertenk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pertenk without a semi-colon");
}
        
- (void)test3168
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pertenk;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pertenk; with a semi-colon");
}
        
- (void)test3169
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pfr without a semi-colon");
}
        
- (void)test3170
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pfr; with a semi-colon");
}
        
- (void)test3171
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&phi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: phi without a semi-colon");
}
        
- (void)test3172
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phi;"];
    NSArray *tokens = @[@[@"Character",@"œÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: phi; with a semi-colon");
}
        
- (void)test3173
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phiv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&phiv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: phiv without a semi-colon");
}
        
- (void)test3174
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phiv;"];
    NSArray *tokens = @[@[@"Character",@"œï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: phiv; with a semi-colon");
}
        
- (void)test3175
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phmmat"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&phmmat"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: phmmat without a semi-colon");
}
        
- (void)test3176
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phmmat;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: phmmat; with a semi-colon");
}
        
- (void)test3177
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phone"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&phone"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: phone without a semi-colon");
}
        
- (void)test3178
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&phone;"];
    NSArray *tokens = @[@[@"Character",@"‚òé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: phone; with a semi-colon");
}
        
- (void)test3179
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pi without a semi-colon");
}
        
- (void)test3180
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pi;"];
    NSArray *tokens = @[@[@"Character",@"œÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pi; with a semi-colon");
}
        
- (void)test3181
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pitchfork"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pitchfork"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pitchfork without a semi-colon");
}
        
- (void)test3182
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pitchfork;"];
    NSArray *tokens = @[@[@"Character",@"‚ãî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pitchfork; with a semi-colon");
}
        
- (void)test3183
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&piv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&piv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: piv without a semi-colon");
}
        
- (void)test3184
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&piv;"];
    NSArray *tokens = @[@[@"Character",@"œñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: piv; with a semi-colon");
}
        
- (void)test3185
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&planck"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&planck"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: planck without a semi-colon");
}
        
- (void)test3186
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&planck;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: planck; with a semi-colon");
}
        
- (void)test3187
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&planckh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&planckh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: planckh without a semi-colon");
}
        
- (void)test3188
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&planckh;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: planckh; with a semi-colon");
}
        
- (void)test3189
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plankv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plankv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plankv without a semi-colon");
}
        
- (void)test3190
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plankv;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plankv; with a semi-colon");
}
        
- (void)test3191
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plus without a semi-colon");
}
        
- (void)test3192
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plus;"];
    NSArray *tokens = @[@[@"Character",@"+"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plus; with a semi-colon");
}
        
- (void)test3193
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusacir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plusacir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plusacir without a semi-colon");
}
        
- (void)test3194
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusacir;"];
    NSArray *tokens = @[@[@"Character",@"‚®£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plusacir; with a semi-colon");
}
        
- (void)test3195
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plusb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plusb without a semi-colon");
}
        
- (void)test3196
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusb;"];
    NSArray *tokens = @[@[@"Character",@"‚äû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plusb; with a semi-colon");
}
        
- (void)test3197
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pluscir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pluscir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pluscir without a semi-colon");
}
        
- (void)test3198
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pluscir;"];
    NSArray *tokens = @[@[@"Character",@"‚®¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pluscir; with a semi-colon");
}
        
- (void)test3199
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusdo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plusdo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plusdo without a semi-colon");
}
        
- (void)test3200
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusdo;"];
    NSArray *tokens = @[@[@"Character",@"‚àî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plusdo; with a semi-colon");
}
        
- (void)test3201
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusdu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plusdu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plusdu without a semi-colon");
}
        
- (void)test3202
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusdu;"];
    NSArray *tokens = @[@[@"Character",@"‚®•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plusdu; with a semi-colon");
}
        
- (void)test3203
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pluse"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pluse"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pluse without a semi-colon");
}
        
- (void)test3204
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pluse;"];
    NSArray *tokens = @[@[@"Character",@"‚©≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pluse; with a semi-colon");
}
        
- (void)test3205
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusmn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plusmn without a semi-colon");
}
        
- (void)test3206
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plusmn;"];
    NSArray *tokens = @[@[@"Character",@"¬±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plusmn; with a semi-colon");
}
        
- (void)test3207
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plussim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plussim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plussim without a semi-colon");
}
        
- (void)test3208
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plussim;"];
    NSArray *tokens = @[@[@"Character",@"‚®¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plussim; with a semi-colon");
}
        
- (void)test3209
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plustwo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&plustwo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: plustwo without a semi-colon");
}
        
- (void)test3210
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&plustwo;"];
    NSArray *tokens = @[@[@"Character",@"‚®ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: plustwo; with a semi-colon");
}
        
- (void)test3211
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pm"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pm"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pm without a semi-colon");
}
        
- (void)test3212
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pm;"];
    NSArray *tokens = @[@[@"Character",@"¬±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pm; with a semi-colon");
}
        
- (void)test3213
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pointint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pointint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pointint without a semi-colon");
}
        
- (void)test3214
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pointint;"];
    NSArray *tokens = @[@[@"Character",@"‚®ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pointint; with a semi-colon");
}
        
- (void)test3215
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&popf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&popf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: popf without a semi-colon");
}
        
- (void)test3216
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&popf;"];
    NSArray *tokens = @[@[@"Character",@"ùï°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: popf; with a semi-colon");
}
        
- (void)test3217
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pound"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pound without a semi-colon");
}
        
- (void)test3218
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pound;"];
    NSArray *tokens = @[@[@"Character",@"¬£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pound; with a semi-colon");
}
        
- (void)test3219
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pr without a semi-colon");
}
        
- (void)test3220
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pr;"];
    NSArray *tokens = @[@[@"Character",@"‚â∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pr; with a semi-colon");
}
        
- (void)test3221
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prE without a semi-colon");
}
        
- (void)test3222
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prE;"];
    NSArray *tokens = @[@[@"Character",@"‚™≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prE; with a semi-colon");
}
        
- (void)test3223
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prap without a semi-colon");
}
        
- (void)test3224
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prap;"];
    NSArray *tokens = @[@[@"Character",@"‚™∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prap; with a semi-colon");
}
        
- (void)test3225
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prcue"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prcue"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prcue without a semi-colon");
}
        
- (void)test3226
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prcue;"];
    NSArray *tokens = @[@[@"Character",@"‚âº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prcue; with a semi-colon");
}
        
- (void)test3227
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pre"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pre"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pre without a semi-colon");
}
        
- (void)test3228
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pre;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pre; with a semi-colon");
}
        
- (void)test3229
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prec"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prec"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prec without a semi-colon");
}
        
- (void)test3230
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prec;"];
    NSArray *tokens = @[@[@"Character",@"‚â∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prec; with a semi-colon");
}
        
- (void)test3231
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&precapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: precapprox without a semi-colon");
}
        
- (void)test3232
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: precapprox; with a semi-colon");
}
        
- (void)test3233
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&preccurlyeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&preccurlyeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: preccurlyeq without a semi-colon");
}
        
- (void)test3234
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&preccurlyeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: preccurlyeq; with a semi-colon");
}
        
- (void)test3235
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&preceq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&preceq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: preceq without a semi-colon");
}
        
- (void)test3236
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&preceq;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: preceq; with a semi-colon");
}
        
- (void)test3237
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precnapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&precnapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: precnapprox without a semi-colon");
}
        
- (void)test3238
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precnapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: precnapprox; with a semi-colon");
}
        
- (void)test3239
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&precneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: precneqq without a semi-colon");
}
        
- (void)test3240
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚™µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: precneqq; with a semi-colon");
}
        
- (void)test3241
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precnsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&precnsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: precnsim without a semi-colon");
}
        
- (void)test3242
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precnsim;"];
    NSArray *tokens = @[@[@"Character",@"‚ã®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: precnsim; with a semi-colon");
}
        
- (void)test3243
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&precsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: precsim without a semi-colon");
}
        
- (void)test3244
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&precsim;"];
    NSArray *tokens = @[@[@"Character",@"‚âæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: precsim; with a semi-colon");
}
        
- (void)test3245
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prime without a semi-colon");
}
        
- (void)test3246
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prime;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prime; with a semi-colon");
}
        
- (void)test3247
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&primes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&primes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: primes without a semi-colon");
}
        
- (void)test3248
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&primes;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: primes; with a semi-colon");
}
        
- (void)test3249
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prnE without a semi-colon");
}
        
- (void)test3250
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prnE;"];
    NSArray *tokens = @[@[@"Character",@"‚™µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prnE; with a semi-colon");
}
        
- (void)test3251
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prnap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prnap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prnap without a semi-colon");
}
        
- (void)test3252
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prnap;"];
    NSArray *tokens = @[@[@"Character",@"‚™π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prnap; with a semi-colon");
}
        
- (void)test3253
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prnsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prnsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prnsim without a semi-colon");
}
        
- (void)test3254
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prnsim;"];
    NSArray *tokens = @[@[@"Character",@"‚ã®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prnsim; with a semi-colon");
}
        
- (void)test3255
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prod"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prod"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prod without a semi-colon");
}
        
- (void)test3256
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prod;"];
    NSArray *tokens = @[@[@"Character",@"‚àè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prod; with a semi-colon");
}
        
- (void)test3257
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&profalar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&profalar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: profalar without a semi-colon");
}
        
- (void)test3258
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&profalar;"];
    NSArray *tokens = @[@[@"Character",@"‚åÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: profalar; with a semi-colon");
}
        
- (void)test3259
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&profline"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&profline"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: profline without a semi-colon");
}
        
- (void)test3260
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&profline;"];
    NSArray *tokens = @[@[@"Character",@"‚åí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: profline; with a semi-colon");
}
        
- (void)test3261
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&profsurf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&profsurf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: profsurf without a semi-colon");
}
        
- (void)test3262
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&profsurf;"];
    NSArray *tokens = @[@[@"Character",@"‚åì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: profsurf; with a semi-colon");
}
        
- (void)test3263
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prop"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prop"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prop without a semi-colon");
}
        
- (void)test3264
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prop;"];
    NSArray *tokens = @[@[@"Character",@"‚àù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prop; with a semi-colon");
}
        
- (void)test3265
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&propto"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&propto"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: propto without a semi-colon");
}
        
- (void)test3266
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&propto;"];
    NSArray *tokens = @[@[@"Character",@"‚àù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: propto; with a semi-colon");
}
        
- (void)test3267
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prsim without a semi-colon");
}
        
- (void)test3268
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prsim;"];
    NSArray *tokens = @[@[@"Character",@"‚âæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prsim; with a semi-colon");
}
        
- (void)test3269
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prurel"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&prurel"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: prurel without a semi-colon");
}
        
- (void)test3270
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&prurel;"];
    NSArray *tokens = @[@[@"Character",@"‚ä∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: prurel; with a semi-colon");
}
        
- (void)test3271
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&pscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: pscr without a semi-colon");
}
        
- (void)test3272
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&pscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: pscr; with a semi-colon");
}
        
- (void)test3273
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&psi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&psi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: psi without a semi-colon");
}
        
- (void)test3274
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&psi;"];
    NSArray *tokens = @[@[@"Character",@"œà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: psi; with a semi-colon");
}
        
- (void)test3275
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&puncsp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&puncsp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: puncsp without a semi-colon");
}
        
- (void)test3276
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&puncsp;"];
    NSArray *tokens = @[@[@"Character",@"‚Äà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: puncsp; with a semi-colon");
}
        
- (void)test3277
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&qfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: qfr without a semi-colon");
}
        
- (void)test3278
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: qfr; with a semi-colon");
}
        
- (void)test3279
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&qint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: qint without a semi-colon");
}
        
- (void)test3280
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qint;"];
    NSArray *tokens = @[@[@"Character",@"‚®å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: qint; with a semi-colon");
}
        
- (void)test3281
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&qopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: qopf without a semi-colon");
}
        
- (void)test3282
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: qopf; with a semi-colon");
}
        
- (void)test3283
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qprime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&qprime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: qprime without a semi-colon");
}
        
- (void)test3284
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qprime;"];
    NSArray *tokens = @[@[@"Character",@"‚Åó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: qprime; with a semi-colon");
}
        
- (void)test3285
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&qscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: qscr without a semi-colon");
}
        
- (void)test3286
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&qscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: qscr; with a semi-colon");
}
        
- (void)test3287
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quaternions"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&quaternions"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: quaternions without a semi-colon");
}
        
- (void)test3288
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quaternions;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: quaternions; with a semi-colon");
}
        
- (void)test3289
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quatint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&quatint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: quatint without a semi-colon");
}
        
- (void)test3290
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quatint;"];
    NSArray *tokens = @[@[@"Character",@"‚®ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: quatint; with a semi-colon");
}
        
- (void)test3291
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quest"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&quest"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: quest without a semi-colon");
}
        
- (void)test3292
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quest;"];
    NSArray *tokens = @[@[@"Character",@"?"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: quest; with a semi-colon");
}
        
- (void)test3293
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&questeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&questeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: questeq without a semi-colon");
}
        
- (void)test3294
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&questeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: questeq; with a semi-colon");
}
        
- (void)test3295
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"\""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: quot without a semi-colon");
}
        
- (void)test3296
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&quot;"];
    NSArray *tokens = @[@[@"Character",@"\""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: quot; with a semi-colon");
}
        
- (void)test3297
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rAarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rAarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rAarr without a semi-colon");
}
        
- (void)test3298
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rAarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rAarr; with a semi-colon");
}
        
- (void)test3299
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rArr without a semi-colon");
}
        
- (void)test3300
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rArr; with a semi-colon");
}
        
- (void)test3301
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rAtail"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rAtail"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rAtail without a semi-colon");
}
        
- (void)test3302
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rAtail;"];
    NSArray *tokens = @[@[@"Character",@"‚§ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rAtail; with a semi-colon");
}
        
- (void)test3303
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rBarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rBarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rBarr without a semi-colon");
}
        
- (void)test3304
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rBarr;"];
    NSArray *tokens = @[@[@"Character",@"‚§è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rBarr; with a semi-colon");
}
        
- (void)test3305
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rHar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rHar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rHar without a semi-colon");
}
        
- (void)test3306
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rHar;"];
    NSArray *tokens = @[@[@"Character",@"‚•§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rHar; with a semi-colon");
}
        
- (void)test3307
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&race"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&race"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: race without a semi-colon");
}
        
- (void)test3308
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&race;"];
    NSArray *tokens = @[@[@"Character",@"‚àΩÃ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: race; with a semi-colon");
}
        
- (void)test3309
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&racute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&racute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: racute without a semi-colon");
}
        
- (void)test3310
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&racute;"];
    NSArray *tokens = @[@[@"Character",@"≈ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: racute; with a semi-colon");
}
        
- (void)test3311
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&radic"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&radic"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: radic without a semi-colon");
}
        
- (void)test3312
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&radic;"];
    NSArray *tokens = @[@[@"Character",@"‚àö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: radic; with a semi-colon");
}
        
- (void)test3313
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&raemptyv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&raemptyv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: raemptyv without a semi-colon");
}
        
- (void)test3314
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&raemptyv;"];
    NSArray *tokens = @[@[@"Character",@"‚¶≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: raemptyv; with a semi-colon");
}
        
- (void)test3315
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rang without a semi-colon");
}
        
- (void)test3316
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rang;"];
    NSArray *tokens = @[@[@"Character",@"‚ü©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rang; with a semi-colon");
}
        
- (void)test3317
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rangd"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rangd"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rangd without a semi-colon");
}
        
- (void)test3318
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rangd;"];
    NSArray *tokens = @[@[@"Character",@"‚¶í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rangd; with a semi-colon");
}
        
- (void)test3319
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&range"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&range"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: range without a semi-colon");
}
        
- (void)test3320
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&range;"];
    NSArray *tokens = @[@[@"Character",@"‚¶•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: range; with a semi-colon");
}
        
- (void)test3321
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rangle without a semi-colon");
}
        
- (void)test3322
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rangle;"];
    NSArray *tokens = @[@[@"Character",@"‚ü©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rangle; with a semi-colon");
}
        
- (void)test3323
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&raquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: raquo without a semi-colon");
}
        
- (void)test3324
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&raquo;"];
    NSArray *tokens = @[@[@"Character",@"¬ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: raquo; with a semi-colon");
}
        
- (void)test3325
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarr without a semi-colon");
}
        
- (void)test3326
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarr; with a semi-colon");
}
        
- (void)test3327
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrap without a semi-colon");
}
        
- (void)test3328
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrap;"];
    NSArray *tokens = @[@[@"Character",@"‚•µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrap; with a semi-colon");
}
        
- (void)test3329
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrb without a semi-colon");
}
        
- (void)test3330
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrb;"];
    NSArray *tokens = @[@[@"Character",@"‚á•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrb; with a semi-colon");
}
        
- (void)test3331
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrbfs"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrbfs"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrbfs without a semi-colon");
}
        
- (void)test3332
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrbfs;"];
    NSArray *tokens = @[@[@"Character",@"‚§†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrbfs; with a semi-colon");
}
        
- (void)test3333
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrc without a semi-colon");
}
        
- (void)test3334
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrc;"];
    NSArray *tokens = @[@[@"Character",@"‚§≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrc; with a semi-colon");
}
        
- (void)test3335
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrfs"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrfs"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrfs without a semi-colon");
}
        
- (void)test3336
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrfs;"];
    NSArray *tokens = @[@[@"Character",@"‚§û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrfs; with a semi-colon");
}
        
- (void)test3337
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrhk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrhk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrhk without a semi-colon");
}
        
- (void)test3338
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrhk;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrhk; with a semi-colon");
}
        
- (void)test3339
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrlp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrlp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrlp without a semi-colon");
}
        
- (void)test3340
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrlp;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrlp; with a semi-colon");
}
        
- (void)test3341
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrpl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrpl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrpl without a semi-colon");
}
        
- (void)test3342
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrpl;"];
    NSArray *tokens = @[@[@"Character",@"‚•Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrpl; with a semi-colon");
}
        
- (void)test3343
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrsim without a semi-colon");
}
        
- (void)test3344
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrsim;"];
    NSArray *tokens = @[@[@"Character",@"‚•¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrsim; with a semi-colon");
}
        
- (void)test3345
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrtl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrtl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrtl without a semi-colon");
}
        
- (void)test3346
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrtl;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrtl; with a semi-colon");
}
        
- (void)test3347
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrw"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rarrw"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rarrw without a semi-colon");
}
        
- (void)test3348
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rarrw;"];
    NSArray *tokens = @[@[@"Character",@"‚Üù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rarrw; with a semi-colon");
}
        
- (void)test3349
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ratail"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ratail"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ratail without a semi-colon");
}
        
- (void)test3350
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ratail;"];
    NSArray *tokens = @[@[@"Character",@"‚§ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ratail; with a semi-colon");
}
        
- (void)test3351
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ratio"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ratio"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ratio without a semi-colon");
}
        
- (void)test3352
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ratio;"];
    NSArray *tokens = @[@[@"Character",@"‚à∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ratio; with a semi-colon");
}
        
- (void)test3353
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rationals"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rationals"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rationals without a semi-colon");
}
        
- (void)test3354
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rationals;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rationals; with a semi-colon");
}
        
- (void)test3355
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rbarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rbarr without a semi-colon");
}
        
- (void)test3356
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbarr;"];
    NSArray *tokens = @[@[@"Character",@"‚§ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rbarr; with a semi-colon");
}
        
- (void)test3357
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbbrk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rbbrk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rbbrk without a semi-colon");
}
        
- (void)test3358
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbbrk;"];
    NSArray *tokens = @[@[@"Character",@"‚ù≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rbbrk; with a semi-colon");
}
        
- (void)test3359
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrace"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rbrace"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rbrace without a semi-colon");
}
        
- (void)test3360
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrace;"];
    NSArray *tokens = @[@[@"Character",@"}"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rbrace; with a semi-colon");
}
        
- (void)test3361
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrack"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rbrack"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rbrack without a semi-colon");
}
        
- (void)test3362
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrack;"];
    NSArray *tokens = @[@[@"Character",@"]"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rbrack; with a semi-colon");
}
        
- (void)test3363
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrke"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rbrke"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rbrke without a semi-colon");
}
        
- (void)test3364
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrke;"];
    NSArray *tokens = @[@[@"Character",@"‚¶å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rbrke; with a semi-colon");
}
        
- (void)test3365
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrksld"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rbrksld"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rbrksld without a semi-colon");
}
        
- (void)test3366
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrksld;"];
    NSArray *tokens = @[@[@"Character",@"‚¶é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rbrksld; with a semi-colon");
}
        
- (void)test3367
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrkslu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rbrkslu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rbrkslu without a semi-colon");
}
        
- (void)test3368
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rbrkslu;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rbrkslu; with a semi-colon");
}
        
- (void)test3369
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rcaron without a semi-colon");
}
        
- (void)test3370
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcaron;"];
    NSArray *tokens = @[@[@"Character",@"≈ô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rcaron; with a semi-colon");
}
        
- (void)test3371
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rcedil without a semi-colon");
}
        
- (void)test3372
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcedil;"];
    NSArray *tokens = @[@[@"Character",@"≈ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rcedil; with a semi-colon");
}
        
- (void)test3373
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rceil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rceil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rceil without a semi-colon");
}
        
- (void)test3374
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rceil;"];
    NSArray *tokens = @[@[@"Character",@"‚åâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rceil; with a semi-colon");
}
        
- (void)test3375
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rcub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rcub without a semi-colon");
}
        
- (void)test3376
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcub;"];
    NSArray *tokens = @[@[@"Character",@"}"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rcub; with a semi-colon");
}
        
- (void)test3377
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rcy without a semi-colon");
}
        
- (void)test3378
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rcy;"];
    NSArray *tokens = @[@[@"Character",@"—Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rcy; with a semi-colon");
}
        
- (void)test3379
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdca"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rdca"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rdca without a semi-colon");
}
        
- (void)test3380
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdca;"];
    NSArray *tokens = @[@[@"Character",@"‚§∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rdca; with a semi-colon");
}
        
- (void)test3381
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdldhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rdldhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rdldhar without a semi-colon");
}
        
- (void)test3382
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdldhar;"];
    NSArray *tokens = @[@[@"Character",@"‚•©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rdldhar; with a semi-colon");
}
        
- (void)test3383
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rdquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rdquo without a semi-colon");
}
        
- (void)test3384
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Äù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rdquo; with a semi-colon");
}
        
- (void)test3385
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdquor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rdquor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rdquor without a semi-colon");
}
        
- (void)test3386
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdquor;"];
    NSArray *tokens = @[@[@"Character",@"‚Äù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rdquor; with a semi-colon");
}
        
- (void)test3387
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdsh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rdsh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rdsh without a semi-colon");
}
        
- (void)test3388
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rdsh;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rdsh; with a semi-colon");
}
        
- (void)test3389
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&real"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&real"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: real without a semi-colon");
}
        
- (void)test3390
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&real;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: real; with a semi-colon");
}
        
- (void)test3391
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&realine"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&realine"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: realine without a semi-colon");
}
        
- (void)test3392
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&realine;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: realine; with a semi-colon");
}
        
- (void)test3393
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&realpart"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&realpart"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: realpart without a semi-colon");
}
        
- (void)test3394
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&realpart;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: realpart; with a semi-colon");
}
        
- (void)test3395
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&reals"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&reals"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: reals without a semi-colon");
}
        
- (void)test3396
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&reals;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: reals; with a semi-colon");
}
        
- (void)test3397
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rect"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rect"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rect without a semi-colon");
}
        
- (void)test3398
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rect;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rect; with a semi-colon");
}
        
- (void)test3399
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&reg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: reg without a semi-colon");
}
        
- (void)test3400
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&reg;"];
    NSArray *tokens = @[@[@"Character",@"¬Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: reg; with a semi-colon");
}
        
- (void)test3401
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rfisht"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rfisht"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rfisht without a semi-colon");
}
        
- (void)test3402
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rfisht;"];
    NSArray *tokens = @[@[@"Character",@"‚•Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rfisht; with a semi-colon");
}
        
- (void)test3403
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rfloor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rfloor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rfloor without a semi-colon");
}
        
- (void)test3404
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rfloor;"];
    NSArray *tokens = @[@[@"Character",@"‚åã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rfloor; with a semi-colon");
}
        
- (void)test3405
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rfr without a semi-colon");
}
        
- (void)test3406
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rfr; with a semi-colon");
}
        
- (void)test3407
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rhard"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rhard"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rhard without a semi-colon");
}
        
- (void)test3408
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rhard;"];
    NSArray *tokens = @[@[@"Character",@"‚áÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rhard; with a semi-colon");
}
        
- (void)test3409
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rharu"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rharu"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rharu without a semi-colon");
}
        
- (void)test3410
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rharu;"];
    NSArray *tokens = @[@[@"Character",@"‚áÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rharu; with a semi-colon");
}
        
- (void)test3411
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rharul"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rharul"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rharul without a semi-colon");
}
        
- (void)test3412
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rharul;"];
    NSArray *tokens = @[@[@"Character",@"‚•¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rharul; with a semi-colon");
}
        
- (void)test3413
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rho"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rho"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rho without a semi-colon");
}
        
- (void)test3414
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rho;"];
    NSArray *tokens = @[@[@"Character",@"œÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rho; with a semi-colon");
}
        
- (void)test3415
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rhov"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rhov"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rhov without a semi-colon");
}
        
- (void)test3416
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rhov;"];
    NSArray *tokens = @[@[@"Character",@"œ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rhov; with a semi-colon");
}
        
- (void)test3417
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightarrow without a semi-colon");
}
        
- (void)test3418
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightarrow; with a semi-colon");
}
        
- (void)test3419
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightarrowtail"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightarrowtail"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightarrowtail without a semi-colon");
}
        
- (void)test3420
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightarrowtail;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightarrowtail; with a semi-colon");
}
        
- (void)test3421
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightharpoondown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightharpoondown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightharpoondown without a semi-colon");
}
        
- (void)test3422
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightharpoondown;"];
    NSArray *tokens = @[@[@"Character",@"‚áÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightharpoondown; with a semi-colon");
}
        
- (void)test3423
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightharpoonup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightharpoonup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightharpoonup without a semi-colon");
}
        
- (void)test3424
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightharpoonup;"];
    NSArray *tokens = @[@[@"Character",@"‚áÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightharpoonup; with a semi-colon");
}
        
- (void)test3425
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightleftarrows"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightleftarrows"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightleftarrows without a semi-colon");
}
        
- (void)test3426
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightleftarrows;"];
    NSArray *tokens = @[@[@"Character",@"‚áÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightleftarrows; with a semi-colon");
}
        
- (void)test3427
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightleftharpoons"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightleftharpoons"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightleftharpoons without a semi-colon");
}
        
- (void)test3428
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightleftharpoons;"];
    NSArray *tokens = @[@[@"Character",@"‚áå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightleftharpoons; with a semi-colon");
}
        
- (void)test3429
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightrightarrows"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightrightarrows"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightrightarrows without a semi-colon");
}
        
- (void)test3430
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightrightarrows;"];
    NSArray *tokens = @[@[@"Character",@"‚áâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightrightarrows; with a semi-colon");
}
        
- (void)test3431
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightsquigarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightsquigarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightsquigarrow without a semi-colon");
}
        
- (void)test3432
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightsquigarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightsquigarrow; with a semi-colon");
}
        
- (void)test3433
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightthreetimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rightthreetimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rightthreetimes without a semi-colon");
}
        
- (void)test3434
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rightthreetimes;"];
    NSArray *tokens = @[@[@"Character",@"‚ãå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rightthreetimes; with a semi-colon");
}
        
- (void)test3435
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ring"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ring"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ring without a semi-colon");
}
        
- (void)test3436
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ring;"];
    NSArray *tokens = @[@[@"Character",@"Àö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ring; with a semi-colon");
}
        
- (void)test3437
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&risingdotseq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&risingdotseq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: risingdotseq without a semi-colon");
}
        
- (void)test3438
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&risingdotseq;"];
    NSArray *tokens = @[@[@"Character",@"‚âì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: risingdotseq; with a semi-colon");
}
        
- (void)test3439
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rlarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rlarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rlarr without a semi-colon");
}
        
- (void)test3440
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rlarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rlarr; with a semi-colon");
}
        
- (void)test3441
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rlhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rlhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rlhar without a semi-colon");
}
        
- (void)test3442
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rlhar;"];
    NSArray *tokens = @[@[@"Character",@"‚áå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rlhar; with a semi-colon");
}
        
- (void)test3443
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rlm"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rlm"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rlm without a semi-colon");
}
        
- (void)test3444
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rlm;"];
    NSArray *tokens = @[@[@"Character",@"‚Äè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rlm; with a semi-colon");
}
        
- (void)test3445
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rmoust"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rmoust"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rmoust without a semi-colon");
}
        
- (void)test3446
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rmoust;"];
    NSArray *tokens = @[@[@"Character",@"‚é±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rmoust; with a semi-colon");
}
        
- (void)test3447
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rmoustache"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rmoustache"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rmoustache without a semi-colon");
}
        
- (void)test3448
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rmoustache;"];
    NSArray *tokens = @[@[@"Character",@"‚é±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rmoustache; with a semi-colon");
}
        
- (void)test3449
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rnmid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rnmid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rnmid without a semi-colon");
}
        
- (void)test3450
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rnmid;"];
    NSArray *tokens = @[@[@"Character",@"‚´Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rnmid; with a semi-colon");
}
        
- (void)test3451
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&roang"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&roang"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: roang without a semi-colon");
}
        
- (void)test3452
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&roang;"];
    NSArray *tokens = @[@[@"Character",@"‚ü≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: roang; with a semi-colon");
}
        
- (void)test3453
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&roarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&roarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: roarr without a semi-colon");
}
        
- (void)test3454
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&roarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: roarr; with a semi-colon");
}
        
- (void)test3455
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&robrk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&robrk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: robrk without a semi-colon");
}
        
- (void)test3456
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&robrk;"];
    NSArray *tokens = @[@[@"Character",@"‚üß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: robrk; with a semi-colon");
}
        
- (void)test3457
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ropar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ropar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ropar without a semi-colon");
}
        
- (void)test3458
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ropar;"];
    NSArray *tokens = @[@[@"Character",@"‚¶Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ropar; with a semi-colon");
}
        
- (void)test3459
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ropf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ropf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ropf without a semi-colon");
}
        
- (void)test3460
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ropf;"];
    NSArray *tokens = @[@[@"Character",@"ùï£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ropf; with a semi-colon");
}
        
- (void)test3461
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&roplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&roplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: roplus without a semi-colon");
}
        
- (void)test3462
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&roplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: roplus; with a semi-colon");
}
        
- (void)test3463
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rotimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rotimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rotimes without a semi-colon");
}
        
- (void)test3464
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rotimes;"];
    NSArray *tokens = @[@[@"Character",@"‚®µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rotimes; with a semi-colon");
}
        
- (void)test3465
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rpar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rpar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rpar without a semi-colon");
}
        
- (void)test3466
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rpar;"];
    NSArray *tokens = @[@[@"Character",@")"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rpar; with a semi-colon");
}
        
- (void)test3467
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rpargt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rpargt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rpargt without a semi-colon");
}
        
- (void)test3468
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rpargt;"];
    NSArray *tokens = @[@[@"Character",@"‚¶î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rpargt; with a semi-colon");
}
        
- (void)test3469
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rppolint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rppolint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rppolint without a semi-colon");
}
        
- (void)test3470
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rppolint;"];
    NSArray *tokens = @[@[@"Character",@"‚®í"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rppolint; with a semi-colon");
}
        
- (void)test3471
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rrarr without a semi-colon");
}
        
- (void)test3472
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rrarr; with a semi-colon");
}
        
- (void)test3473
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsaquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rsaquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rsaquo without a semi-colon");
}
        
- (void)test3474
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsaquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rsaquo; with a semi-colon");
}
        
- (void)test3475
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rscr without a semi-colon");
}
        
- (void)test3476
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rscr; with a semi-colon");
}
        
- (void)test3477
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsh"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rsh"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rsh without a semi-colon");
}
        
- (void)test3478
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsh;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rsh; with a semi-colon");
}
        
- (void)test3479
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsqb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rsqb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rsqb without a semi-colon");
}
        
- (void)test3480
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsqb;"];
    NSArray *tokens = @[@[@"Character",@"]"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rsqb; with a semi-colon");
}
        
- (void)test3481
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rsquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rsquo without a semi-colon");
}
        
- (void)test3482
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Äô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rsquo; with a semi-colon");
}
        
- (void)test3483
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsquor"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rsquor"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rsquor without a semi-colon");
}
        
- (void)test3484
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rsquor;"];
    NSArray *tokens = @[@[@"Character",@"‚Äô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rsquor; with a semi-colon");
}
        
- (void)test3485
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rthree"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rthree"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rthree without a semi-colon");
}
        
- (void)test3486
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rthree;"];
    NSArray *tokens = @[@[@"Character",@"‚ãå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rthree; with a semi-colon");
}
        
- (void)test3487
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtimes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rtimes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rtimes without a semi-colon");
}
        
- (void)test3488
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtimes;"];
    NSArray *tokens = @[@[@"Character",@"‚ãä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rtimes; with a semi-colon");
}
        
- (void)test3489
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rtri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rtri without a semi-colon");
}
        
- (void)test3490
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtri;"];
    NSArray *tokens = @[@[@"Character",@"‚ñπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rtri; with a semi-colon");
}
        
- (void)test3491
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtrie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rtrie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rtrie without a semi-colon");
}
        
- (void)test3492
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtrie;"];
    NSArray *tokens = @[@[@"Character",@"‚äµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rtrie; with a semi-colon");
}
        
- (void)test3493
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtrif"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rtrif"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rtrif without a semi-colon");
}
        
- (void)test3494
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtrif;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rtrif; with a semi-colon");
}
        
- (void)test3495
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtriltri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rtriltri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rtriltri without a semi-colon");
}
        
- (void)test3496
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rtriltri;"];
    NSArray *tokens = @[@[@"Character",@"‚ßé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rtriltri; with a semi-colon");
}
        
- (void)test3497
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ruluhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ruluhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ruluhar without a semi-colon");
}
        
- (void)test3498
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ruluhar;"];
    NSArray *tokens = @[@[@"Character",@"‚•®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ruluhar; with a semi-colon");
}
        
- (void)test3499
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rx"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&rx"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: rx without a semi-colon");
}
        
- (void)test3500
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&rx;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: rx; with a semi-colon");
}
        
- (void)test3501
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sacute without a semi-colon");
}
        
- (void)test3502
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sacute;"];
    NSArray *tokens = @[@[@"Character",@"≈õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sacute; with a semi-colon");
}
        
- (void)test3503
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sbquo"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sbquo"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sbquo without a semi-colon");
}
        
- (void)test3504
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sbquo;"];
    NSArray *tokens = @[@[@"Character",@"‚Äö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sbquo; with a semi-colon");
}
        
- (void)test3505
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sc without a semi-colon");
}
        
- (void)test3506
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sc;"];
    NSArray *tokens = @[@[@"Character",@"‚âª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sc; with a semi-colon");
}
        
- (void)test3507
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scE without a semi-colon");
}
        
- (void)test3508
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scE;"];
    NSArray *tokens = @[@[@"Character",@"‚™¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scE; with a semi-colon");
}
        
- (void)test3509
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scap without a semi-colon");
}
        
- (void)test3510
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scap;"];
    NSArray *tokens = @[@[@"Character",@"‚™∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scap; with a semi-colon");
}
        
- (void)test3511
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scaron without a semi-colon");
}
        
- (void)test3512
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scaron;"];
    NSArray *tokens = @[@[@"Character",@"≈°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scaron; with a semi-colon");
}
        
- (void)test3513
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sccue"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sccue"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sccue without a semi-colon");
}
        
- (void)test3514
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sccue;"];
    NSArray *tokens = @[@[@"Character",@"‚âΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sccue; with a semi-colon");
}
        
- (void)test3515
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sce"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sce"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sce without a semi-colon");
}
        
- (void)test3516
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sce;"];
    NSArray *tokens = @[@[@"Character",@"‚™∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sce; with a semi-colon");
}
        
- (void)test3517
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scedil without a semi-colon");
}
        
- (void)test3518
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scedil;"];
    NSArray *tokens = @[@[@"Character",@"≈ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scedil; with a semi-colon");
}
        
- (void)test3519
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scirc without a semi-colon");
}
        
- (void)test3520
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scirc;"];
    NSArray *tokens = @[@[@"Character",@"≈ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scirc; with a semi-colon");
}
        
- (void)test3521
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scnE without a semi-colon");
}
        
- (void)test3522
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scnE;"];
    NSArray *tokens = @[@[@"Character",@"‚™∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scnE; with a semi-colon");
}
        
- (void)test3523
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scnap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scnap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scnap without a semi-colon");
}
        
- (void)test3524
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scnap;"];
    NSArray *tokens = @[@[@"Character",@"‚™∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scnap; with a semi-colon");
}
        
- (void)test3525
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scnsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scnsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scnsim without a semi-colon");
}
        
- (void)test3526
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scnsim;"];
    NSArray *tokens = @[@[@"Character",@"‚ã©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scnsim; with a semi-colon");
}
        
- (void)test3527
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scpolint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scpolint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scpolint without a semi-colon");
}
        
- (void)test3528
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scpolint;"];
    NSArray *tokens = @[@[@"Character",@"‚®ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scpolint; with a semi-colon");
}
        
- (void)test3529
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scsim without a semi-colon");
}
        
- (void)test3530
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scsim;"];
    NSArray *tokens = @[@[@"Character",@"‚âø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scsim; with a semi-colon");
}
        
- (void)test3531
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&scy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: scy without a semi-colon");
}
        
- (void)test3532
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&scy;"];
    NSArray *tokens = @[@[@"Character",@"—Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: scy; with a semi-colon");
}
        
- (void)test3533
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sdot without a semi-colon");
}
        
- (void)test3534
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sdot; with a semi-colon");
}
        
- (void)test3535
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sdotb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sdotb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sdotb without a semi-colon");
}
        
- (void)test3536
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sdotb;"];
    NSArray *tokens = @[@[@"Character",@"‚ä°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sdotb; with a semi-colon");
}
        
- (void)test3537
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sdote"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sdote"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sdote without a semi-colon");
}
        
- (void)test3538
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sdote;"];
    NSArray *tokens = @[@[@"Character",@"‚©¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sdote; with a semi-colon");
}
        
- (void)test3539
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&seArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&seArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: seArr without a semi-colon");
}
        
- (void)test3540
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&seArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: seArr; with a semi-colon");
}
        
- (void)test3541
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&searhk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&searhk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: searhk without a semi-colon");
}
        
- (void)test3542
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&searhk;"];
    NSArray *tokens = @[@[@"Character",@"‚§•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: searhk; with a semi-colon");
}
        
- (void)test3543
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&searr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&searr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: searr without a semi-colon");
}
        
- (void)test3544
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&searr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: searr; with a semi-colon");
}
        
- (void)test3545
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&searrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&searrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: searrow without a semi-colon");
}
        
- (void)test3546
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&searrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: searrow; with a semi-colon");
}
        
- (void)test3547
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sect"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sect without a semi-colon");
}
        
- (void)test3548
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sect;"];
    NSArray *tokens = @[@[@"Character",@"¬ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sect; with a semi-colon");
}
        
- (void)test3549
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&semi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&semi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: semi without a semi-colon");
}
        
- (void)test3550
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&semi;"];
    NSArray *tokens = @[@[@"Character",@";"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: semi; with a semi-colon");
}
        
- (void)test3551
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&seswar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&seswar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: seswar without a semi-colon");
}
        
- (void)test3552
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&seswar;"];
    NSArray *tokens = @[@[@"Character",@"‚§©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: seswar; with a semi-colon");
}
        
- (void)test3553
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&setminus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&setminus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: setminus without a semi-colon");
}
        
- (void)test3554
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&setminus;"];
    NSArray *tokens = @[@[@"Character",@"‚àñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: setminus; with a semi-colon");
}
        
- (void)test3555
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&setmn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&setmn"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: setmn without a semi-colon");
}
        
- (void)test3556
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&setmn;"];
    NSArray *tokens = @[@[@"Character",@"‚àñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: setmn; with a semi-colon");
}
        
- (void)test3557
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sext"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sext"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sext without a semi-colon");
}
        
- (void)test3558
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sext;"];
    NSArray *tokens = @[@[@"Character",@"‚ú∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sext; with a semi-colon");
}
        
- (void)test3559
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sfr without a semi-colon");
}
        
- (void)test3560
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sfr; with a semi-colon");
}
        
- (void)test3561
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sfrown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sfrown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sfrown without a semi-colon");
}
        
- (void)test3562
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sfrown;"];
    NSArray *tokens = @[@[@"Character",@"‚å¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sfrown; with a semi-colon");
}
        
- (void)test3563
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sharp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sharp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sharp without a semi-colon");
}
        
- (void)test3564
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sharp;"];
    NSArray *tokens = @[@[@"Character",@"‚ôØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sharp; with a semi-colon");
}
        
- (void)test3565
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shchcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&shchcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: shchcy without a semi-colon");
}
        
- (void)test3566
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shchcy;"];
    NSArray *tokens = @[@[@"Character",@"—â"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: shchcy; with a semi-colon");
}
        
- (void)test3567
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&shcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: shcy without a semi-colon");
}
        
- (void)test3568
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shcy;"];
    NSArray *tokens = @[@[@"Character",@"—à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: shcy; with a semi-colon");
}
        
- (void)test3569
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shortmid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&shortmid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: shortmid without a semi-colon");
}
        
- (void)test3570
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shortmid;"];
    NSArray *tokens = @[@[@"Character",@"‚à£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: shortmid; with a semi-colon");
}
        
- (void)test3571
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shortparallel"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&shortparallel"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: shortparallel without a semi-colon");
}
        
- (void)test3572
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shortparallel;"];
    NSArray *tokens = @[@[@"Character",@"‚à•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: shortparallel; with a semi-colon");
}
        
- (void)test3573
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: shy without a semi-colon");
}
        
- (void)test3574
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&shy;"];
    NSArray *tokens = @[@[@"Character",@"¬≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: shy; with a semi-colon");
}
        
- (void)test3575
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sigma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sigma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sigma without a semi-colon");
}
        
- (void)test3576
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sigma;"];
    NSArray *tokens = @[@[@"Character",@"œÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sigma; with a semi-colon");
}
        
- (void)test3577
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sigmaf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sigmaf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sigmaf without a semi-colon");
}
        
- (void)test3578
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sigmaf;"];
    NSArray *tokens = @[@[@"Character",@"œÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sigmaf; with a semi-colon");
}
        
- (void)test3579
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sigmav"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sigmav"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sigmav without a semi-colon");
}
        
- (void)test3580
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sigmav;"];
    NSArray *tokens = @[@[@"Character",@"œÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sigmav; with a semi-colon");
}
        
- (void)test3581
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sim without a semi-colon");
}
        
- (void)test3582
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sim;"];
    NSArray *tokens = @[@[@"Character",@"‚àº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sim; with a semi-colon");
}
        
- (void)test3583
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simdot without a semi-colon");
}
        
- (void)test3584
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simdot;"];
    NSArray *tokens = @[@[@"Character",@"‚©™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simdot; with a semi-colon");
}
        
- (void)test3585
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sime without a semi-colon");
}
        
- (void)test3586
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sime;"];
    NSArray *tokens = @[@[@"Character",@"‚âÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sime; with a semi-colon");
}
        
- (void)test3587
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simeq without a semi-colon");
}
        
- (void)test3588
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simeq; with a semi-colon");
}
        
- (void)test3589
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simg"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simg"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simg without a semi-colon");
}
        
- (void)test3590
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simg;"];
    NSArray *tokens = @[@[@"Character",@"‚™û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simg; with a semi-colon");
}
        
- (void)test3591
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simgE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simgE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simgE without a semi-colon");
}
        
- (void)test3592
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simgE;"];
    NSArray *tokens = @[@[@"Character",@"‚™†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simgE; with a semi-colon");
}
        
- (void)test3593
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&siml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&siml"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: siml without a semi-colon");
}
        
- (void)test3594
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&siml;"];
    NSArray *tokens = @[@[@"Character",@"‚™ù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: siml; with a semi-colon");
}
        
- (void)test3595
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simlE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simlE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simlE without a semi-colon");
}
        
- (void)test3596
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simlE;"];
    NSArray *tokens = @[@[@"Character",@"‚™ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simlE; with a semi-colon");
}
        
- (void)test3597
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simne without a semi-colon");
}
        
- (void)test3598
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simne;"];
    NSArray *tokens = @[@[@"Character",@"‚âÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simne; with a semi-colon");
}
        
- (void)test3599
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simplus without a semi-colon");
}
        
- (void)test3600
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simplus; with a semi-colon");
}
        
- (void)test3601
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&simrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: simrarr without a semi-colon");
}
        
- (void)test3602
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&simrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚•≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: simrarr; with a semi-colon");
}
        
- (void)test3603
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&slarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&slarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: slarr without a semi-colon");
}
        
- (void)test3604
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&slarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: slarr; with a semi-colon");
}
        
- (void)test3605
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smallsetminus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smallsetminus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smallsetminus without a semi-colon");
}
        
- (void)test3606
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smallsetminus;"];
    NSArray *tokens = @[@[@"Character",@"‚àñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smallsetminus; with a semi-colon");
}
        
- (void)test3607
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smashp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smashp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smashp without a semi-colon");
}
        
- (void)test3608
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smashp;"];
    NSArray *tokens = @[@[@"Character",@"‚®≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smashp; with a semi-colon");
}
        
- (void)test3609
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smeparsl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smeparsl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smeparsl without a semi-colon");
}
        
- (void)test3610
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smeparsl;"];
    NSArray *tokens = @[@[@"Character",@"‚ß§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smeparsl; with a semi-colon");
}
        
- (void)test3611
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smid"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smid"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smid without a semi-colon");
}
        
- (void)test3612
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smid;"];
    NSArray *tokens = @[@[@"Character",@"‚à£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smid; with a semi-colon");
}
        
- (void)test3613
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smile"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smile"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smile without a semi-colon");
}
        
- (void)test3614
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smile;"];
    NSArray *tokens = @[@[@"Character",@"‚å£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smile; with a semi-colon");
}
        
- (void)test3615
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smt without a semi-colon");
}
        
- (void)test3616
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smt;"];
    NSArray *tokens = @[@[@"Character",@"‚™™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smt; with a semi-colon");
}
        
- (void)test3617
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smte"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smte"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smte without a semi-colon");
}
        
- (void)test3618
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smte;"];
    NSArray *tokens = @[@[@"Character",@"‚™¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smte; with a semi-colon");
}
        
- (void)test3619
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smtes"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&smtes"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: smtes without a semi-colon");
}
        
- (void)test3620
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&smtes;"];
    NSArray *tokens = @[@[@"Character",@"‚™¨Ô∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: smtes; with a semi-colon");
}
        
- (void)test3621
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&softcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&softcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: softcy without a semi-colon");
}
        
- (void)test3622
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&softcy;"];
    NSArray *tokens = @[@[@"Character",@"—å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: softcy; with a semi-colon");
}
        
- (void)test3623
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sol"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sol"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sol without a semi-colon");
}
        
- (void)test3624
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sol;"];
    NSArray *tokens = @[@[@"Character",@"/"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sol; with a semi-colon");
}
        
- (void)test3625
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&solb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&solb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: solb without a semi-colon");
}
        
- (void)test3626
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&solb;"];
    NSArray *tokens = @[@[@"Character",@"‚ßÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: solb; with a semi-colon");
}
        
- (void)test3627
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&solbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&solbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: solbar without a semi-colon");
}
        
- (void)test3628
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&solbar;"];
    NSArray *tokens = @[@[@"Character",@"‚åø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: solbar; with a semi-colon");
}
        
- (void)test3629
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sopf without a semi-colon");
}
        
- (void)test3630
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sopf; with a semi-colon");
}
        
- (void)test3631
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&spades"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&spades"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: spades without a semi-colon");
}
        
- (void)test3632
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&spades;"];
    NSArray *tokens = @[@[@"Character",@"‚ô†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: spades; with a semi-colon");
}
        
- (void)test3633
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&spadesuit"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&spadesuit"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: spadesuit without a semi-colon");
}
        
- (void)test3634
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&spadesuit;"];
    NSArray *tokens = @[@[@"Character",@"‚ô†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: spadesuit; with a semi-colon");
}
        
- (void)test3635
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&spar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&spar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: spar without a semi-colon");
}
        
- (void)test3636
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&spar;"];
    NSArray *tokens = @[@[@"Character",@"‚à•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: spar; with a semi-colon");
}
        
- (void)test3637
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqcap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqcap without a semi-colon");
}
        
- (void)test3638
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcap;"];
    NSArray *tokens = @[@[@"Character",@"‚äì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqcap; with a semi-colon");
}
        
- (void)test3639
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcaps"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqcaps"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqcaps without a semi-colon");
}
        
- (void)test3640
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcaps;"];
    NSArray *tokens = @[@[@"Character",@"‚äìÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqcaps; with a semi-colon");
}
        
- (void)test3641
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqcup without a semi-colon");
}
        
- (void)test3642
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcup;"];
    NSArray *tokens = @[@[@"Character",@"‚äî"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqcup; with a semi-colon");
}
        
- (void)test3643
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcups"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqcups"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqcups without a semi-colon");
}
        
- (void)test3644
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqcups;"];
    NSArray *tokens = @[@[@"Character",@"‚äîÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqcups; with a semi-colon");
}
        
- (void)test3645
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsub without a semi-colon");
}
        
- (void)test3646
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsub;"];
    NSArray *tokens = @[@[@"Character",@"‚äè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsub; with a semi-colon");
}
        
- (void)test3647
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsube"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsube"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsube without a semi-colon");
}
        
- (void)test3648
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsube;"];
    NSArray *tokens = @[@[@"Character",@"‚äë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsube; with a semi-colon");
}
        
- (void)test3649
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsubset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsubset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsubset without a semi-colon");
}
        
- (void)test3650
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsubset;"];
    NSArray *tokens = @[@[@"Character",@"‚äè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsubset; with a semi-colon");
}
        
- (void)test3651
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsubseteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsubseteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsubseteq without a semi-colon");
}
        
- (void)test3652
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsubseteq;"];
    NSArray *tokens = @[@[@"Character",@"‚äë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsubseteq; with a semi-colon");
}
        
- (void)test3653
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsup without a semi-colon");
}
        
- (void)test3654
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsup;"];
    NSArray *tokens = @[@[@"Character",@"‚äê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsup; with a semi-colon");
}
        
- (void)test3655
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsupe"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsupe"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsupe without a semi-colon");
}
        
- (void)test3656
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsupe;"];
    NSArray *tokens = @[@[@"Character",@"‚äí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsupe; with a semi-colon");
}
        
- (void)test3657
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsupset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsupset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsupset without a semi-colon");
}
        
- (void)test3658
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsupset;"];
    NSArray *tokens = @[@[@"Character",@"‚äê"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsupset; with a semi-colon");
}
        
- (void)test3659
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsupseteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sqsupseteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sqsupseteq without a semi-colon");
}
        
- (void)test3660
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sqsupseteq;"];
    NSArray *tokens = @[@[@"Character",@"‚äí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sqsupseteq; with a semi-colon");
}
        
- (void)test3661
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&squ"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&squ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: squ without a semi-colon");
}
        
- (void)test3662
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&squ;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: squ; with a semi-colon");
}
        
- (void)test3663
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&square"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&square"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: square without a semi-colon");
}
        
- (void)test3664
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&square;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ°"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: square; with a semi-colon");
}
        
- (void)test3665
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&squarf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&squarf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: squarf without a semi-colon");
}
        
- (void)test3666
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&squarf;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: squarf; with a semi-colon");
}
        
- (void)test3667
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&squf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&squf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: squf without a semi-colon");
}
        
- (void)test3668
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&squf;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: squf; with a semi-colon");
}
        
- (void)test3669
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&srarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&srarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: srarr without a semi-colon");
}
        
- (void)test3670
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&srarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: srarr; with a semi-colon");
}
        
- (void)test3671
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sscr without a semi-colon");
}
        
- (void)test3672
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sscr; with a semi-colon");
}
        
- (void)test3673
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ssetmn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ssetmn"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ssetmn without a semi-colon");
}
        
- (void)test3674
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ssetmn;"];
    NSArray *tokens = @[@[@"Character",@"‚àñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ssetmn; with a semi-colon");
}
        
- (void)test3675
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ssmile"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ssmile"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ssmile without a semi-colon");
}
        
- (void)test3676
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ssmile;"];
    NSArray *tokens = @[@[@"Character",@"‚å£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ssmile; with a semi-colon");
}
        
- (void)test3677
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sstarf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sstarf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sstarf without a semi-colon");
}
        
- (void)test3678
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sstarf;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sstarf; with a semi-colon");
}
        
- (void)test3679
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&star"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&star"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: star without a semi-colon");
}
        
- (void)test3680
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&star;"];
    NSArray *tokens = @[@[@"Character",@"‚òÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: star; with a semi-colon");
}
        
- (void)test3681
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&starf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&starf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: starf without a semi-colon");
}
        
- (void)test3682
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&starf;"];
    NSArray *tokens = @[@[@"Character",@"‚òÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: starf; with a semi-colon");
}
        
- (void)test3683
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&straightepsilon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&straightepsilon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: straightepsilon without a semi-colon");
}
        
- (void)test3684
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&straightepsilon;"];
    NSArray *tokens = @[@[@"Character",@"œµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: straightepsilon; with a semi-colon");
}
        
- (void)test3685
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&straightphi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&straightphi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: straightphi without a semi-colon");
}
        
- (void)test3686
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&straightphi;"];
    NSArray *tokens = @[@[@"Character",@"œï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: straightphi; with a semi-colon");
}
        
- (void)test3687
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&strns"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&strns"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: strns without a semi-colon");
}
        
- (void)test3688
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&strns;"];
    NSArray *tokens = @[@[@"Character",@"¬Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: strns; with a semi-colon");
}
        
- (void)test3689
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sub without a semi-colon");
}
        
- (void)test3690
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sub;"];
    NSArray *tokens = @[@[@"Character",@"‚äÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sub; with a semi-colon");
}
        
- (void)test3691
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subE without a semi-colon");
}
        
- (void)test3692
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subE;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subE; with a semi-colon");
}
        
- (void)test3693
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subdot without a semi-colon");
}
        
- (void)test3694
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subdot;"];
    NSArray *tokens = @[@[@"Character",@"‚™Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subdot; with a semi-colon");
}
        
- (void)test3695
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sube"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sube"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sube without a semi-colon");
}
        
- (void)test3696
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sube;"];
    NSArray *tokens = @[@[@"Character",@"‚äÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sube; with a semi-colon");
}
        
- (void)test3697
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subedot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subedot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subedot without a semi-colon");
}
        
- (void)test3698
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subedot;"];
    NSArray *tokens = @[@[@"Character",@"‚´É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subedot; with a semi-colon");
}
        
- (void)test3699
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&submult"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&submult"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: submult without a semi-colon");
}
        
- (void)test3700
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&submult;"];
    NSArray *tokens = @[@[@"Character",@"‚´Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: submult; with a semi-colon");
}
        
- (void)test3701
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subnE without a semi-colon");
}
        
- (void)test3702
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subnE;"];
    NSArray *tokens = @[@[@"Character",@"‚´ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subnE; with a semi-colon");
}
        
- (void)test3703
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subne without a semi-colon");
}
        
- (void)test3704
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subne;"];
    NSArray *tokens = @[@[@"Character",@"‚ää"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subne; with a semi-colon");
}
        
- (void)test3705
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subplus without a semi-colon");
}
        
- (void)test3706
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subplus;"];
    NSArray *tokens = @[@[@"Character",@"‚™ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subplus; with a semi-colon");
}
        
- (void)test3707
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subrarr without a semi-colon");
}
        
- (void)test3708
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚•π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subrarr; with a semi-colon");
}
        
- (void)test3709
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subset without a semi-colon");
}
        
- (void)test3710
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subset;"];
    NSArray *tokens = @[@[@"Character",@"‚äÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subset; with a semi-colon");
}
        
- (void)test3711
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subseteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subseteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subseteq without a semi-colon");
}
        
- (void)test3712
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subseteq;"];
    NSArray *tokens = @[@[@"Character",@"‚äÜ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subseteq; with a semi-colon");
}
        
- (void)test3713
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subseteqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subseteqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subseteqq without a semi-colon");
}
        
- (void)test3714
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subseteqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subseteqq; with a semi-colon");
}
        
- (void)test3715
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsetneq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subsetneq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subsetneq without a semi-colon");
}
        
- (void)test3716
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsetneq;"];
    NSArray *tokens = @[@[@"Character",@"‚ää"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subsetneq; with a semi-colon");
}
        
- (void)test3717
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsetneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subsetneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subsetneqq without a semi-colon");
}
        
- (void)test3718
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsetneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subsetneqq; with a semi-colon");
}
        
- (void)test3719
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subsim without a semi-colon");
}
        
- (void)test3720
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsim;"];
    NSArray *tokens = @[@[@"Character",@"‚´á"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subsim; with a semi-colon");
}
        
- (void)test3721
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subsub without a semi-colon");
}
        
- (void)test3722
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsub;"];
    NSArray *tokens = @[@[@"Character",@"‚´ï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subsub; with a semi-colon");
}
        
- (void)test3723
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&subsup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: subsup without a semi-colon");
}
        
- (void)test3724
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&subsup;"];
    NSArray *tokens = @[@[@"Character",@"‚´ì"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: subsup; with a semi-colon");
}
        
- (void)test3725
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succ"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succ without a semi-colon");
}
        
- (void)test3726
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succ;"];
    NSArray *tokens = @[@[@"Character",@"‚âª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succ; with a semi-colon");
}
        
- (void)test3727
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succapprox without a semi-colon");
}
        
- (void)test3728
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succapprox; with a semi-colon");
}
        
- (void)test3729
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succcurlyeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succcurlyeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succcurlyeq without a semi-colon");
}
        
- (void)test3730
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succcurlyeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succcurlyeq; with a semi-colon");
}
        
- (void)test3731
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succeq without a semi-colon");
}
        
- (void)test3732
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succeq;"];
    NSArray *tokens = @[@[@"Character",@"‚™∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succeq; with a semi-colon");
}
        
- (void)test3733
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succnapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succnapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succnapprox without a semi-colon");
}
        
- (void)test3734
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succnapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚™∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succnapprox; with a semi-colon");
}
        
- (void)test3735
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succneqq without a semi-colon");
}
        
- (void)test3736
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚™∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succneqq; with a semi-colon");
}
        
- (void)test3737
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succnsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succnsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succnsim without a semi-colon");
}
        
- (void)test3738
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succnsim;"];
    NSArray *tokens = @[@[@"Character",@"‚ã©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succnsim; with a semi-colon");
}
        
- (void)test3739
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&succsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: succsim without a semi-colon");
}
        
- (void)test3740
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&succsim;"];
    NSArray *tokens = @[@[@"Character",@"‚âø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: succsim; with a semi-colon");
}
        
- (void)test3741
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sum"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sum"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sum without a semi-colon");
}
        
- (void)test3742
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sum;"];
    NSArray *tokens = @[@[@"Character",@"‚àë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sum; with a semi-colon");
}
        
- (void)test3743
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sung"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sung"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sung without a semi-colon");
}
        
- (void)test3744
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sung;"];
    NSArray *tokens = @[@[@"Character",@"‚ô™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sung; with a semi-colon");
}
        
- (void)test3745
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&sup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: sup without a semi-colon");
}
        
- (void)test3746
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup1"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sup1 without a semi-colon");
}
        
- (void)test3747
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup1;"];
    NSArray *tokens = @[@[@"Character",@"¬π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sup1; with a semi-colon");
}
        
- (void)test3748
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup2"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sup2 without a semi-colon");
}
        
- (void)test3749
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup2;"];
    NSArray *tokens = @[@[@"Character",@"¬≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sup2; with a semi-colon");
}
        
- (void)test3750
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup3"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sup3 without a semi-colon");
}
        
- (void)test3751
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup3;"];
    NSArray *tokens = @[@[@"Character",@"¬≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sup3; with a semi-colon");
}
        
- (void)test3752
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&sup;"];
    NSArray *tokens = @[@[@"Character",@"‚äÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: sup; with a semi-colon");
}
        
- (void)test3753
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supE without a semi-colon");
}
        
- (void)test3754
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supE;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supE; with a semi-colon");
}
        
- (void)test3755
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supdot without a semi-colon");
}
        
- (void)test3756
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supdot;"];
    NSArray *tokens = @[@[@"Character",@"‚™æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supdot; with a semi-colon");
}
        
- (void)test3757
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supdsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supdsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supdsub without a semi-colon");
}
        
- (void)test3758
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supdsub;"];
    NSArray *tokens = @[@[@"Character",@"‚´ò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supdsub; with a semi-colon");
}
        
- (void)test3759
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supe"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supe"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supe without a semi-colon");
}
        
- (void)test3760
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supe;"];
    NSArray *tokens = @[@[@"Character",@"‚äá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supe; with a semi-colon");
}
        
- (void)test3761
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supedot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supedot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supedot without a semi-colon");
}
        
- (void)test3762
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supedot;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supedot; with a semi-colon");
}
        
- (void)test3763
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&suphsol"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&suphsol"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: suphsol without a semi-colon");
}
        
- (void)test3764
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&suphsol;"];
    NSArray *tokens = @[@[@"Character",@"‚üâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: suphsol; with a semi-colon");
}
        
- (void)test3765
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&suphsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&suphsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: suphsub without a semi-colon");
}
        
- (void)test3766
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&suphsub;"];
    NSArray *tokens = @[@[@"Character",@"‚´ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: suphsub; with a semi-colon");
}
        
- (void)test3767
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&suplarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&suplarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: suplarr without a semi-colon");
}
        
- (void)test3768
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&suplarr;"];
    NSArray *tokens = @[@[@"Character",@"‚•ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: suplarr; with a semi-colon");
}
        
- (void)test3769
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supmult"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supmult"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supmult without a semi-colon");
}
        
- (void)test3770
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supmult;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supmult; with a semi-colon");
}
        
- (void)test3771
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supnE without a semi-colon");
}
        
- (void)test3772
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supnE;"];
    NSArray *tokens = @[@[@"Character",@"‚´å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supnE; with a semi-colon");
}
        
- (void)test3773
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supne without a semi-colon");
}
        
- (void)test3774
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supne;"];
    NSArray *tokens = @[@[@"Character",@"‚äã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supne; with a semi-colon");
}
        
- (void)test3775
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supplus without a semi-colon");
}
        
- (void)test3776
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supplus;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supplus; with a semi-colon");
}
        
- (void)test3777
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supset"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supset"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supset without a semi-colon");
}
        
- (void)test3778
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supset;"];
    NSArray *tokens = @[@[@"Character",@"‚äÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supset; with a semi-colon");
}
        
- (void)test3779
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supseteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supseteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supseteq without a semi-colon");
}
        
- (void)test3780
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supseteq;"];
    NSArray *tokens = @[@[@"Character",@"‚äá"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supseteq; with a semi-colon");
}
        
- (void)test3781
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supseteqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supseteqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supseteqq without a semi-colon");
}
        
- (void)test3782
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supseteqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supseteqq; with a semi-colon");
}
        
- (void)test3783
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsetneq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supsetneq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supsetneq without a semi-colon");
}
        
- (void)test3784
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsetneq;"];
    NSArray *tokens = @[@[@"Character",@"‚äã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supsetneq; with a semi-colon");
}
        
- (void)test3785
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsetneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supsetneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supsetneqq without a semi-colon");
}
        
- (void)test3786
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsetneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supsetneqq; with a semi-colon");
}
        
- (void)test3787
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supsim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supsim without a semi-colon");
}
        
- (void)test3788
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsim;"];
    NSArray *tokens = @[@[@"Character",@"‚´à"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supsim; with a semi-colon");
}
        
- (void)test3789
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supsub without a semi-colon");
}
        
- (void)test3790
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsub;"];
    NSArray *tokens = @[@[@"Character",@"‚´î"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supsub; with a semi-colon");
}
        
- (void)test3791
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&supsup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: supsup without a semi-colon");
}
        
- (void)test3792
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&supsup;"];
    NSArray *tokens = @[@[@"Character",@"‚´ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: supsup; with a semi-colon");
}
        
- (void)test3793
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&swArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: swArr without a semi-colon");
}
        
- (void)test3794
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: swArr; with a semi-colon");
}
        
- (void)test3795
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swarhk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&swarhk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: swarhk without a semi-colon");
}
        
- (void)test3796
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swarhk;"];
    NSArray *tokens = @[@[@"Character",@"‚§¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: swarhk; with a semi-colon");
}
        
- (void)test3797
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&swarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: swarr without a semi-colon");
}
        
- (void)test3798
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: swarr; with a semi-colon");
}
        
- (void)test3799
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&swarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: swarrow without a semi-colon");
}
        
- (void)test3800
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: swarrow; with a semi-colon");
}
        
- (void)test3801
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swnwar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&swnwar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: swnwar without a semi-colon");
}
        
- (void)test3802
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&swnwar;"];
    NSArray *tokens = @[@[@"Character",@"‚§™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: swnwar; with a semi-colon");
}
        
- (void)test3803
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&szlig"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: szlig without a semi-colon");
}
        
- (void)test3804
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&szlig;"];
    NSArray *tokens = @[@[@"Character",@"√ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: szlig; with a semi-colon");
}
        
- (void)test3805
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&target"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&target"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: target without a semi-colon");
}
        
- (void)test3806
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&target;"];
    NSArray *tokens = @[@[@"Character",@"‚åñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: target; with a semi-colon");
}
        
- (void)test3807
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tau"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tau"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tau without a semi-colon");
}
        
- (void)test3808
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tau;"];
    NSArray *tokens = @[@[@"Character",@"œÑ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tau; with a semi-colon");
}
        
- (void)test3809
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tbrk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tbrk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tbrk without a semi-colon");
}
        
- (void)test3810
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tbrk;"];
    NSArray *tokens = @[@[@"Character",@"‚é¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tbrk; with a semi-colon");
}
        
- (void)test3811
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tcaron without a semi-colon");
}
        
- (void)test3812
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tcaron;"];
    NSArray *tokens = @[@[@"Character",@"≈•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tcaron; with a semi-colon");
}
        
- (void)test3813
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tcedil"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tcedil"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tcedil without a semi-colon");
}
        
- (void)test3814
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tcedil;"];
    NSArray *tokens = @[@[@"Character",@"≈£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tcedil; with a semi-colon");
}
        
- (void)test3815
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tcy without a semi-colon");
}
        
- (void)test3816
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tcy;"];
    NSArray *tokens = @[@[@"Character",@"—Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tcy; with a semi-colon");
}
        
- (void)test3817
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tdot without a semi-colon");
}
        
- (void)test3818
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tdot;"];
    NSArray *tokens = @[@[@"Character",@"‚Éõ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tdot; with a semi-colon");
}
        
- (void)test3819
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&telrec"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&telrec"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: telrec without a semi-colon");
}
        
- (void)test3820
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&telrec;"];
    NSArray *tokens = @[@[@"Character",@"‚åï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: telrec; with a semi-colon");
}
        
- (void)test3821
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tfr without a semi-colon");
}
        
- (void)test3822
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tfr; with a semi-colon");
}
        
- (void)test3823
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&there4"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&there4"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: there4 without a semi-colon");
}
        
- (void)test3824
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&there4;"];
    NSArray *tokens = @[@[@"Character",@"‚à¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: there4; with a semi-colon");
}
        
- (void)test3825
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&therefore"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&therefore"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: therefore without a semi-colon");
}
        
- (void)test3826
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&therefore;"];
    NSArray *tokens = @[@[@"Character",@"‚à¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: therefore; with a semi-colon");
}
        
- (void)test3827
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&theta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&theta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: theta without a semi-colon");
}
        
- (void)test3828
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&theta;"];
    NSArray *tokens = @[@[@"Character",@"Œ∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: theta; with a semi-colon");
}
        
- (void)test3829
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thetasym"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&thetasym"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: thetasym without a semi-colon");
}
        
- (void)test3830
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thetasym;"];
    NSArray *tokens = @[@[@"Character",@"œë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thetasym; with a semi-colon");
}
        
- (void)test3831
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thetav"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&thetav"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: thetav without a semi-colon");
}
        
- (void)test3832
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thetav;"];
    NSArray *tokens = @[@[@"Character",@"œë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thetav; with a semi-colon");
}
        
- (void)test3833
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thickapprox"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&thickapprox"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: thickapprox without a semi-colon");
}
        
- (void)test3834
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thickapprox;"];
    NSArray *tokens = @[@[@"Character",@"‚âà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thickapprox; with a semi-colon");
}
        
- (void)test3835
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thicksim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&thicksim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: thicksim without a semi-colon");
}
        
- (void)test3836
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thicksim;"];
    NSArray *tokens = @[@[@"Character",@"‚àº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thicksim; with a semi-colon");
}
        
- (void)test3837
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thinsp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&thinsp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: thinsp without a semi-colon");
}
        
- (void)test3838
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thinsp;"];
    NSArray *tokens = @[@[@"Character",@"‚Äâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thinsp; with a semi-colon");
}
        
- (void)test3839
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thkap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&thkap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: thkap without a semi-colon");
}
        
- (void)test3840
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thkap;"];
    NSArray *tokens = @[@[@"Character",@"‚âà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thkap; with a semi-colon");
}
        
- (void)test3841
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thksim"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&thksim"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: thksim without a semi-colon");
}
        
- (void)test3842
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thksim;"];
    NSArray *tokens = @[@[@"Character",@"‚àº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thksim; with a semi-colon");
}
        
- (void)test3843
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thorn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thorn without a semi-colon");
}
        
- (void)test3844
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&thorn;"];
    NSArray *tokens = @[@[@"Character",@"√æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: thorn; with a semi-colon");
}
        
- (void)test3845
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tilde without a semi-colon");
}
        
- (void)test3846
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tilde;"];
    NSArray *tokens = @[@[@"Character",@"Àú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tilde; with a semi-colon");
}
        
- (void)test3847
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&times"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: times without a semi-colon");
}
        
- (void)test3848
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&times;"];
    NSArray *tokens = @[@[@"Character",@"√ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: times; with a semi-colon");
}
        
- (void)test3849
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&timesb;"];
    NSArray *tokens = @[@[@"Character",@"‚ä†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: timesb; with a semi-colon");
}
        
- (void)test3850
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&timesbar;"];
    NSArray *tokens = @[@[@"Character",@"‚®±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: timesbar; with a semi-colon");
}
        
- (void)test3851
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&timesd;"];
    NSArray *tokens = @[@[@"Character",@"‚®∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: timesd; with a semi-colon");
}
        
- (void)test3852
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tint"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tint"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tint without a semi-colon");
}
        
- (void)test3853
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tint;"];
    NSArray *tokens = @[@[@"Character",@"‚à≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tint; with a semi-colon");
}
        
- (void)test3854
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&toea"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&toea"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: toea without a semi-colon");
}
        
- (void)test3855
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&toea;"];
    NSArray *tokens = @[@[@"Character",@"‚§®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: toea; with a semi-colon");
}
        
- (void)test3856
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&top"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&top"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: top without a semi-colon");
}
        
- (void)test3857
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&top;"];
    NSArray *tokens = @[@[@"Character",@"‚ä§"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: top; with a semi-colon");
}
        
- (void)test3858
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topbot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&topbot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: topbot without a semi-colon");
}
        
- (void)test3859
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topbot;"];
    NSArray *tokens = @[@[@"Character",@"‚å∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: topbot; with a semi-colon");
}
        
- (void)test3860
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topcir"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&topcir"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: topcir without a semi-colon");
}
        
- (void)test3861
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topcir;"];
    NSArray *tokens = @[@[@"Character",@"‚´±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: topcir; with a semi-colon");
}
        
- (void)test3862
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&topf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: topf without a semi-colon");
}
        
- (void)test3863
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topf;"];
    NSArray *tokens = @[@[@"Character",@"ùï•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: topf; with a semi-colon");
}
        
- (void)test3864
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topfork"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&topfork"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: topfork without a semi-colon");
}
        
- (void)test3865
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&topfork;"];
    NSArray *tokens = @[@[@"Character",@"‚´ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: topfork; with a semi-colon");
}
        
- (void)test3866
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tosa"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tosa"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tosa without a semi-colon");
}
        
- (void)test3867
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tosa;"];
    NSArray *tokens = @[@[@"Character",@"‚§©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tosa; with a semi-colon");
}
        
- (void)test3868
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tprime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tprime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tprime without a semi-colon");
}
        
- (void)test3869
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tprime;"];
    NSArray *tokens = @[@[@"Character",@"‚Ä¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tprime; with a semi-colon");
}
        
- (void)test3870
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trade"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&trade"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: trade without a semi-colon");
}
        
- (void)test3871
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trade;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: trade; with a semi-colon");
}
        
- (void)test3872
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&triangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: triangle without a semi-colon");
}
        
- (void)test3873
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangle;"];
    NSArray *tokens = @[@[@"Character",@"‚ñµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: triangle; with a semi-colon");
}
        
- (void)test3874
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangledown"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&triangledown"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: triangledown without a semi-colon");
}
        
- (void)test3875
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangledown;"];
    NSArray *tokens = @[@[@"Character",@"‚ñø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: triangledown; with a semi-colon");
}
        
- (void)test3876
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangleleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&triangleleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: triangleleft without a semi-colon");
}
        
- (void)test3877
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangleleft;"];
    NSArray *tokens = @[@[@"Character",@"‚óÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: triangleleft; with a semi-colon");
}
        
- (void)test3878
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trianglelefteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&trianglelefteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: trianglelefteq without a semi-colon");
}
        
- (void)test3879
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trianglelefteq;"];
    NSArray *tokens = @[@[@"Character",@"‚ä¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: trianglelefteq; with a semi-colon");
}
        
- (void)test3880
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangleq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&triangleq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: triangleq without a semi-colon");
}
        
- (void)test3881
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangleq;"];
    NSArray *tokens = @[@[@"Character",@"‚âú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: triangleq; with a semi-colon");
}
        
- (void)test3882
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangleright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&triangleright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: triangleright without a semi-colon");
}
        
- (void)test3883
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triangleright;"];
    NSArray *tokens = @[@[@"Character",@"‚ñπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: triangleright; with a semi-colon");
}
        
- (void)test3884
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trianglerighteq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&trianglerighteq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: trianglerighteq without a semi-colon");
}
        
- (void)test3885
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trianglerighteq;"];
    NSArray *tokens = @[@[@"Character",@"‚äµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: trianglerighteq; with a semi-colon");
}
        
- (void)test3886
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tridot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tridot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tridot without a semi-colon");
}
        
- (void)test3887
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tridot;"];
    NSArray *tokens = @[@[@"Character",@"‚ó¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tridot; with a semi-colon");
}
        
- (void)test3888
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trie"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&trie"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: trie without a semi-colon");
}
        
- (void)test3889
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trie;"];
    NSArray *tokens = @[@[@"Character",@"‚âú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: trie; with a semi-colon");
}
        
- (void)test3890
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triminus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&triminus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: triminus without a semi-colon");
}
        
- (void)test3891
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triminus;"];
    NSArray *tokens = @[@[@"Character",@"‚®∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: triminus; with a semi-colon");
}
        
- (void)test3892
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&triplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: triplus without a semi-colon");
}
        
- (void)test3893
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&triplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: triplus; with a semi-colon");
}
        
- (void)test3894
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trisb"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&trisb"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: trisb without a semi-colon");
}
        
- (void)test3895
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trisb;"];
    NSArray *tokens = @[@[@"Character",@"‚ßç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: trisb; with a semi-colon");
}
        
- (void)test3896
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tritime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tritime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tritime without a semi-colon");
}
        
- (void)test3897
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tritime;"];
    NSArray *tokens = @[@[@"Character",@"‚®ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tritime; with a semi-colon");
}
        
- (void)test3898
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trpezium"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&trpezium"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: trpezium without a semi-colon");
}
        
- (void)test3899
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&trpezium;"];
    NSArray *tokens = @[@[@"Character",@"‚è¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: trpezium; with a semi-colon");
}
        
- (void)test3900
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tscr without a semi-colon");
}
        
- (void)test3901
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìâ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tscr; with a semi-colon");
}
        
- (void)test3902
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tscy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tscy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tscy without a semi-colon");
}
        
- (void)test3903
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tscy;"];
    NSArray *tokens = @[@[@"Character",@"—Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tscy; with a semi-colon");
}
        
- (void)test3904
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tshcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tshcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tshcy without a semi-colon");
}
        
- (void)test3905
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tshcy;"];
    NSArray *tokens = @[@[@"Character",@"—õ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tshcy; with a semi-colon");
}
        
- (void)test3906
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tstrok"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&tstrok"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: tstrok without a semi-colon");
}
        
- (void)test3907
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&tstrok;"];
    NSArray *tokens = @[@[@"Character",@"≈ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: tstrok; with a semi-colon");
}
        
- (void)test3908
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&twixt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&twixt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: twixt without a semi-colon");
}
        
- (void)test3909
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&twixt;"];
    NSArray *tokens = @[@[@"Character",@"‚â¨"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: twixt; with a semi-colon");
}
        
- (void)test3910
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&twoheadleftarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&twoheadleftarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: twoheadleftarrow without a semi-colon");
}
        
- (void)test3911
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&twoheadleftarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üû"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: twoheadleftarrow; with a semi-colon");
}
        
- (void)test3912
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&twoheadrightarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&twoheadrightarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: twoheadrightarrow without a semi-colon");
}
        
- (void)test3913
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&twoheadrightarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Ü†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: twoheadrightarrow; with a semi-colon");
}
        
- (void)test3914
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uArr without a semi-colon");
}
        
- (void)test3915
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uArr; with a semi-colon");
}
        
- (void)test3916
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uHar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uHar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uHar without a semi-colon");
}
        
- (void)test3917
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uHar;"];
    NSArray *tokens = @[@[@"Character",@"‚•£"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uHar; with a semi-colon");
}
        
- (void)test3918
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uacute without a semi-colon");
}
        
- (void)test3919
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uacute;"];
    NSArray *tokens = @[@[@"Character",@"√∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uacute; with a semi-colon");
}
        
- (void)test3920
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uarr without a semi-colon");
}
        
- (void)test3921
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uarr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uarr; with a semi-colon");
}
        
- (void)test3922
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ubrcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ubrcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ubrcy without a semi-colon");
}
        
- (void)test3923
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ubrcy;"];
    NSArray *tokens = @[@[@"Character",@"—û"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ubrcy; with a semi-colon");
}
        
- (void)test3924
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ubreve"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ubreve"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ubreve without a semi-colon");
}
        
- (void)test3925
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ubreve;"];
    NSArray *tokens = @[@[@"Character",@"≈≠"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ubreve; with a semi-colon");
}
        
- (void)test3926
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ucirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ucirc without a semi-colon");
}
        
- (void)test3927
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ucirc;"];
    NSArray *tokens = @[@[@"Character",@"√ª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ucirc; with a semi-colon");
}
        
- (void)test3928
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ucy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ucy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ucy without a semi-colon");
}
        
- (void)test3929
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ucy;"];
    NSArray *tokens = @[@[@"Character",@"—É"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ucy; with a semi-colon");
}
        
- (void)test3930
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&udarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&udarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: udarr without a semi-colon");
}
        
- (void)test3931
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&udarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: udarr; with a semi-colon");
}
        
- (void)test3932
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&udblac"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&udblac"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: udblac without a semi-colon");
}
        
- (void)test3933
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&udblac;"];
    NSArray *tokens = @[@[@"Character",@"≈±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: udblac; with a semi-colon");
}
        
- (void)test3934
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&udhar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&udhar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: udhar without a semi-colon");
}
        
- (void)test3935
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&udhar;"];
    NSArray *tokens = @[@[@"Character",@"‚•Æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: udhar; with a semi-colon");
}
        
- (void)test3936
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ufisht"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ufisht"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ufisht without a semi-colon");
}
        
- (void)test3937
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ufisht;"];
    NSArray *tokens = @[@[@"Character",@"‚•æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ufisht; with a semi-colon");
}
        
- (void)test3938
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ufr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ufr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ufr without a semi-colon");
}
        
- (void)test3939
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ufr;"];
    NSArray *tokens = @[@[@"Character",@"ùî≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ufr; with a semi-colon");
}
        
- (void)test3940
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ugrave"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ugrave without a semi-colon");
}
        
- (void)test3941
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ugrave;"];
    NSArray *tokens = @[@[@"Character",@"√π"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ugrave; with a semi-colon");
}
        
- (void)test3942
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uharl"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uharl"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uharl without a semi-colon");
}
        
- (void)test3943
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uharl;"];
    NSArray *tokens = @[@[@"Character",@"‚Üø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uharl; with a semi-colon");
}
        
- (void)test3944
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uharr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uharr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uharr without a semi-colon");
}
        
- (void)test3945
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uharr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uharr; with a semi-colon");
}
        
- (void)test3946
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uhblk"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uhblk"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uhblk without a semi-colon");
}
        
- (void)test3947
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uhblk;"];
    NSArray *tokens = @[@[@"Character",@"‚ñÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uhblk; with a semi-colon");
}
        
- (void)test3948
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ulcorn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ulcorn"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ulcorn without a semi-colon");
}
        
- (void)test3949
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ulcorn;"];
    NSArray *tokens = @[@[@"Character",@"‚åú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ulcorn; with a semi-colon");
}
        
- (void)test3950
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ulcorner"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ulcorner"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ulcorner without a semi-colon");
}
        
- (void)test3951
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ulcorner;"];
    NSArray *tokens = @[@[@"Character",@"‚åú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ulcorner; with a semi-colon");
}
        
- (void)test3952
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ulcrop"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ulcrop"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ulcrop without a semi-colon");
}
        
- (void)test3953
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ulcrop;"];
    NSArray *tokens = @[@[@"Character",@"‚åè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ulcrop; with a semi-colon");
}
        
- (void)test3954
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ultri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ultri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ultri without a semi-colon");
}
        
- (void)test3955
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ultri;"];
    NSArray *tokens = @[@[@"Character",@"‚ó∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ultri; with a semi-colon");
}
        
- (void)test3956
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&umacr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&umacr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: umacr without a semi-colon");
}
        
- (void)test3957
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&umacr;"];
    NSArray *tokens = @[@[@"Character",@"≈´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: umacr; with a semi-colon");
}
        
- (void)test3958
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uml without a semi-colon");
}
        
- (void)test3959
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uml;"];
    NSArray *tokens = @[@[@"Character",@"¬®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uml; with a semi-colon");
}
        
- (void)test3960
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uogon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uogon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uogon without a semi-colon");
}
        
- (void)test3961
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uogon;"];
    NSArray *tokens = @[@[@"Character",@"≈≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uogon; with a semi-colon");
}
        
- (void)test3962
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uopf without a semi-colon");
}
        
- (void)test3963
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï¶"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uopf; with a semi-colon");
}
        
- (void)test3964
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uparrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uparrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uparrow without a semi-colon");
}
        
- (void)test3965
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uparrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uparrow; with a semi-colon");
}
        
- (void)test3966
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&updownarrow"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&updownarrow"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: updownarrow without a semi-colon");
}
        
- (void)test3967
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&updownarrow;"];
    NSArray *tokens = @[@[@"Character",@"‚Üï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: updownarrow; with a semi-colon");
}
        
- (void)test3968
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upharpoonleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&upharpoonleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: upharpoonleft without a semi-colon");
}
        
- (void)test3969
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upharpoonleft;"];
    NSArray *tokens = @[@[@"Character",@"‚Üø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: upharpoonleft; with a semi-colon");
}
        
- (void)test3970
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upharpoonright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&upharpoonright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: upharpoonright without a semi-colon");
}
        
- (void)test3971
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upharpoonright;"];
    NSArray *tokens = @[@[@"Character",@"‚Üæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: upharpoonright; with a semi-colon");
}
        
- (void)test3972
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uplus without a semi-colon");
}
        
- (void)test3973
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uplus;"];
    NSArray *tokens = @[@[@"Character",@"‚äé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uplus; with a semi-colon");
}
        
- (void)test3974
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upsi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&upsi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: upsi without a semi-colon");
}
        
- (void)test3975
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upsi;"];
    NSArray *tokens = @[@[@"Character",@"œÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: upsi; with a semi-colon");
}
        
- (void)test3976
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upsih"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&upsih"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: upsih without a semi-colon");
}
        
- (void)test3977
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upsih;"];
    NSArray *tokens = @[@[@"Character",@"œí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: upsih; with a semi-colon");
}
        
- (void)test3978
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upsilon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&upsilon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: upsilon without a semi-colon");
}
        
- (void)test3979
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upsilon;"];
    NSArray *tokens = @[@[@"Character",@"œÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: upsilon; with a semi-colon");
}
        
- (void)test3980
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upuparrows"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&upuparrows"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: upuparrows without a semi-colon");
}
        
- (void)test3981
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&upuparrows;"];
    NSArray *tokens = @[@[@"Character",@"‚áà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: upuparrows; with a semi-colon");
}
        
- (void)test3982
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urcorn"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&urcorn"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: urcorn without a semi-colon");
}
        
- (void)test3983
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urcorn;"];
    NSArray *tokens = @[@[@"Character",@"‚åù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: urcorn; with a semi-colon");
}
        
- (void)test3984
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urcorner"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&urcorner"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: urcorner without a semi-colon");
}
        
- (void)test3985
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urcorner;"];
    NSArray *tokens = @[@[@"Character",@"‚åù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: urcorner; with a semi-colon");
}
        
- (void)test3986
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urcrop"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&urcrop"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: urcrop without a semi-colon");
}
        
- (void)test3987
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urcrop;"];
    NSArray *tokens = @[@[@"Character",@"‚åé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: urcrop; with a semi-colon");
}
        
- (void)test3988
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uring"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uring"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uring without a semi-colon");
}
        
- (void)test3989
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uring;"];
    NSArray *tokens = @[@[@"Character",@"≈Ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uring; with a semi-colon");
}
        
- (void)test3990
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urtri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&urtri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: urtri without a semi-colon");
}
        
- (void)test3991
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&urtri;"];
    NSArray *tokens = @[@[@"Character",@"‚óπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: urtri; with a semi-colon");
}
        
- (void)test3992
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uscr without a semi-colon");
}
        
- (void)test3993
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uscr; with a semi-colon");
}
        
- (void)test3994
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&utdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: utdot without a semi-colon");
}
        
- (void)test3995
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utdot;"];
    NSArray *tokens = @[@[@"Character",@"‚ã∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: utdot; with a semi-colon");
}
        
- (void)test3996
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utilde"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&utilde"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: utilde without a semi-colon");
}
        
- (void)test3997
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utilde;"];
    NSArray *tokens = @[@[@"Character",@"≈©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: utilde; with a semi-colon");
}
        
- (void)test3998
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&utri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: utri without a semi-colon");
}
        
- (void)test3999
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utri;"];
    NSArray *tokens = @[@[@"Character",@"‚ñµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: utri; with a semi-colon");
}
        
- (void)test4000
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utrif"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&utrif"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: utrif without a semi-colon");
}
        
- (void)test4001
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&utrif;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: utrif; with a semi-colon");
}
        
- (void)test4002
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uuarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uuarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uuarr without a semi-colon");
}
        
- (void)test4003
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uuarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áà"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uuarr; with a semi-colon");
}
        
- (void)test4004
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uuml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uuml without a semi-colon");
}
        
- (void)test4005
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uuml;"];
    NSArray *tokens = @[@[@"Character",@"√º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uuml; with a semi-colon");
}
        
- (void)test4006
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uwangle"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&uwangle"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: uwangle without a semi-colon");
}
        
- (void)test4007
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&uwangle;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: uwangle; with a semi-colon");
}
        
- (void)test4008
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vArr without a semi-colon");
}
        
- (void)test4009
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vArr;"];
    NSArray *tokens = @[@[@"Character",@"‚áï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vArr; with a semi-colon");
}
        
- (void)test4010
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vBar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vBar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vBar without a semi-colon");
}
        
- (void)test4011
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vBar;"];
    NSArray *tokens = @[@[@"Character",@"‚´®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vBar; with a semi-colon");
}
        
- (void)test4012
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vBarv"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vBarv"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vBarv without a semi-colon");
}
        
- (void)test4013
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vBarv;"];
    NSArray *tokens = @[@[@"Character",@"‚´©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vBarv; with a semi-colon");
}
        
- (void)test4014
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vDash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vDash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vDash without a semi-colon");
}
        
- (void)test4015
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vDash;"];
    NSArray *tokens = @[@[@"Character",@"‚ä®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vDash; with a semi-colon");
}
        
- (void)test4016
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vangrt"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vangrt"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vangrt without a semi-colon");
}
        
- (void)test4017
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vangrt;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ú"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vangrt; with a semi-colon");
}
        
- (void)test4018
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varepsilon"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varepsilon"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varepsilon without a semi-colon");
}
        
- (void)test4019
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varepsilon;"];
    NSArray *tokens = @[@[@"Character",@"œµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varepsilon; with a semi-colon");
}
        
- (void)test4020
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varkappa"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varkappa"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varkappa without a semi-colon");
}
        
- (void)test4021
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varkappa;"];
    NSArray *tokens = @[@[@"Character",@"œ∞"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varkappa; with a semi-colon");
}
        
- (void)test4022
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varnothing"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varnothing"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varnothing without a semi-colon");
}
        
- (void)test4023
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varnothing;"];
    NSArray *tokens = @[@[@"Character",@"‚àÖ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varnothing; with a semi-colon");
}
        
- (void)test4024
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varphi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varphi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varphi without a semi-colon");
}
        
- (void)test4025
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varphi;"];
    NSArray *tokens = @[@[@"Character",@"œï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varphi; with a semi-colon");
}
        
- (void)test4026
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varpi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varpi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varpi without a semi-colon");
}
        
- (void)test4027
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varpi;"];
    NSArray *tokens = @[@[@"Character",@"œñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varpi; with a semi-colon");
}
        
- (void)test4028
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varpropto"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varpropto"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varpropto without a semi-colon");
}
        
- (void)test4029
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varpropto;"];
    NSArray *tokens = @[@[@"Character",@"‚àù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varpropto; with a semi-colon");
}
        
- (void)test4030
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varr without a semi-colon");
}
        
- (void)test4031
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varr;"];
    NSArray *tokens = @[@[@"Character",@"‚Üï"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varr; with a semi-colon");
}
        
- (void)test4032
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varrho"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varrho"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varrho without a semi-colon");
}
        
- (void)test4033
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varrho;"];
    NSArray *tokens = @[@[@"Character",@"œ±"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varrho; with a semi-colon");
}
        
- (void)test4034
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsigma"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varsigma"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varsigma without a semi-colon");
}
        
- (void)test4035
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsigma;"];
    NSArray *tokens = @[@[@"Character",@"œÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varsigma; with a semi-colon");
}
        
- (void)test4036
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsubsetneq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varsubsetneq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varsubsetneq without a semi-colon");
}
        
- (void)test4037
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsubsetneq;"];
    NSArray *tokens = @[@[@"Character",@"‚ääÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varsubsetneq; with a semi-colon");
}
        
- (void)test4038
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsubsetneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varsubsetneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varsubsetneqq without a semi-colon");
}
        
- (void)test4039
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsubsetneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´ãÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varsubsetneqq; with a semi-colon");
}
        
- (void)test4040
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsupsetneq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varsupsetneq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varsupsetneq without a semi-colon");
}
        
- (void)test4041
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsupsetneq;"];
    NSArray *tokens = @[@[@"Character",@"‚äãÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varsupsetneq; with a semi-colon");
}
        
- (void)test4042
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsupsetneqq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&varsupsetneqq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: varsupsetneqq without a semi-colon");
}
        
- (void)test4043
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&varsupsetneqq;"];
    NSArray *tokens = @[@[@"Character",@"‚´åÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: varsupsetneqq; with a semi-colon");
}
        
- (void)test4044
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vartheta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vartheta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vartheta without a semi-colon");
}
        
- (void)test4045
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vartheta;"];
    NSArray *tokens = @[@[@"Character",@"œë"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vartheta; with a semi-colon");
}
        
- (void)test4046
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vartriangleleft"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vartriangleleft"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vartriangleleft without a semi-colon");
}
        
- (void)test4047
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vartriangleleft;"];
    NSArray *tokens = @[@[@"Character",@"‚ä≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vartriangleleft; with a semi-colon");
}
        
- (void)test4048
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vartriangleright"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vartriangleright"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vartriangleright without a semi-colon");
}
        
- (void)test4049
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vartriangleright;"];
    NSArray *tokens = @[@[@"Character",@"‚ä≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vartriangleright; with a semi-colon");
}
        
- (void)test4050
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vcy without a semi-colon");
}
        
- (void)test4051
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vcy;"];
    NSArray *tokens = @[@[@"Character",@"–≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vcy; with a semi-colon");
}
        
- (void)test4052
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vdash"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vdash"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vdash without a semi-colon");
}
        
- (void)test4053
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vdash;"];
    NSArray *tokens = @[@[@"Character",@"‚ä¢"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vdash; with a semi-colon");
}
        
- (void)test4054
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vee without a semi-colon");
}
        
- (void)test4055
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vee;"];
    NSArray *tokens = @[@[@"Character",@"‚à®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vee; with a semi-colon");
}
        
- (void)test4056
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&veebar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&veebar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: veebar without a semi-colon");
}
        
- (void)test4057
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&veebar;"];
    NSArray *tokens = @[@[@"Character",@"‚äª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: veebar; with a semi-colon");
}
        
- (void)test4058
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&veeeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&veeeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: veeeq without a semi-colon");
}
        
- (void)test4059
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&veeeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: veeeq; with a semi-colon");
}
        
- (void)test4060
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vellip"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vellip"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vellip without a semi-colon");
}
        
- (void)test4061
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vellip;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vellip; with a semi-colon");
}
        
- (void)test4062
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&verbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&verbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: verbar without a semi-colon");
}
        
- (void)test4063
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&verbar;"];
    NSArray *tokens = @[@[@"Character",@"|"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: verbar; with a semi-colon");
}
        
- (void)test4064
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vert"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vert"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vert without a semi-colon");
}
        
- (void)test4065
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vert;"];
    NSArray *tokens = @[@[@"Character",@"|"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vert; with a semi-colon");
}
        
- (void)test4066
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vfr without a semi-colon");
}
        
- (void)test4067
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vfr; with a semi-colon");
}
        
- (void)test4068
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vltri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vltri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vltri without a semi-colon");
}
        
- (void)test4069
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vltri;"];
    NSArray *tokens = @[@[@"Character",@"‚ä≤"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vltri; with a semi-colon");
}
        
- (void)test4070
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vnsub"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vnsub"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vnsub without a semi-colon");
}
        
- (void)test4071
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vnsub;"];
    NSArray *tokens = @[@[@"Character",@"‚äÇ‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vnsub; with a semi-colon");
}
        
- (void)test4072
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vnsup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vnsup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vnsup without a semi-colon");
}
        
- (void)test4073
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vnsup;"];
    NSArray *tokens = @[@[@"Character",@"‚äÉ‚Éí"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vnsup; with a semi-colon");
}
        
- (void)test4074
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vopf without a semi-colon");
}
        
- (void)test4075
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vopf;"];
    NSArray *tokens = @[@[@"Character",@"ùïß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vopf; with a semi-colon");
}
        
- (void)test4076
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vprop"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vprop"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vprop without a semi-colon");
}
        
- (void)test4077
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vprop;"];
    NSArray *tokens = @[@[@"Character",@"‚àù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vprop; with a semi-colon");
}
        
- (void)test4078
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vrtri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vrtri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vrtri without a semi-colon");
}
        
- (void)test4079
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vrtri;"];
    NSArray *tokens = @[@[@"Character",@"‚ä≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vrtri; with a semi-colon");
}
        
- (void)test4080
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vscr without a semi-colon");
}
        
- (void)test4081
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vscr; with a semi-colon");
}
        
- (void)test4082
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsubnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vsubnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vsubnE without a semi-colon");
}
        
- (void)test4083
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsubnE;"];
    NSArray *tokens = @[@[@"Character",@"‚´ãÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vsubnE; with a semi-colon");
}
        
- (void)test4084
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsubne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vsubne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vsubne without a semi-colon");
}
        
- (void)test4085
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsubne;"];
    NSArray *tokens = @[@[@"Character",@"‚ääÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vsubne; with a semi-colon");
}
        
- (void)test4086
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsupnE"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vsupnE"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vsupnE without a semi-colon");
}
        
- (void)test4087
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsupnE;"];
    NSArray *tokens = @[@[@"Character",@"‚´åÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vsupnE; with a semi-colon");
}
        
- (void)test4088
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsupne"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vsupne"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vsupne without a semi-colon");
}
        
- (void)test4089
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vsupne;"];
    NSArray *tokens = @[@[@"Character",@"‚äãÔ∏Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vsupne; with a semi-colon");
}
        
- (void)test4090
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vzigzag"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&vzigzag"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: vzigzag without a semi-colon");
}
        
- (void)test4091
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&vzigzag;"];
    NSArray *tokens = @[@[@"Character",@"‚¶ö"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: vzigzag; with a semi-colon");
}
        
- (void)test4092
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wcirc without a semi-colon");
}
        
- (void)test4093
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wcirc;"];
    NSArray *tokens = @[@[@"Character",@"≈µ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wcirc; with a semi-colon");
}
        
- (void)test4094
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wedbar"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wedbar"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wedbar without a semi-colon");
}
        
- (void)test4095
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wedbar;"];
    NSArray *tokens = @[@[@"Character",@"‚©ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wedbar; with a semi-colon");
}
        
- (void)test4096
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wedge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wedge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wedge without a semi-colon");
}
        
- (void)test4097
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wedge;"];
    NSArray *tokens = @[@[@"Character",@"‚àß"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wedge; with a semi-colon");
}
        
- (void)test4098
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wedgeq"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wedgeq"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wedgeq without a semi-colon");
}
        
- (void)test4099
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wedgeq;"];
    NSArray *tokens = @[@[@"Character",@"‚âô"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wedgeq; with a semi-colon");
}
        
- (void)test4100
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&weierp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&weierp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: weierp without a semi-colon");
}
        
- (void)test4101
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&weierp;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: weierp; with a semi-colon");
}
        
- (void)test4102
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wfr without a semi-colon");
}
        
- (void)test4103
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî¥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wfr; with a semi-colon");
}
        
- (void)test4104
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wopf without a semi-colon");
}
        
- (void)test4105
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wopf; with a semi-colon");
}
        
- (void)test4106
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wp"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wp"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wp without a semi-colon");
}
        
- (void)test4107
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wp;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñò"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wp; with a semi-colon");
}
        
- (void)test4108
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wr without a semi-colon");
}
        
- (void)test4109
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wr;"];
    NSArray *tokens = @[@[@"Character",@"‚âÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wr; with a semi-colon");
}
        
- (void)test4110
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wreath"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wreath"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wreath without a semi-colon");
}
        
- (void)test4111
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wreath;"];
    NSArray *tokens = @[@[@"Character",@"‚âÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wreath; with a semi-colon");
}
        
- (void)test4112
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&wscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: wscr without a semi-colon");
}
        
- (void)test4113
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&wscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: wscr; with a semi-colon");
}
        
- (void)test4114
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xcap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xcap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xcap without a semi-colon");
}
        
- (void)test4115
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xcap;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÇ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xcap; with a semi-colon");
}
        
- (void)test4116
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xcirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xcirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xcirc without a semi-colon");
}
        
- (void)test4117
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xcirc;"];
    NSArray *tokens = @[@[@"Character",@"‚óØ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xcirc; with a semi-colon");
}
        
- (void)test4118
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xcup without a semi-colon");
}
        
- (void)test4119
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xcup;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÉ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xcup; with a semi-colon");
}
        
- (void)test4120
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xdtri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xdtri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xdtri without a semi-colon");
}
        
- (void)test4121
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xdtri;"];
    NSArray *tokens = @[@[@"Character",@"‚ñΩ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xdtri; with a semi-colon");
}
        
- (void)test4122
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xfr without a semi-colon");
}
        
- (void)test4123
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xfr;"];
    NSArray *tokens = @[@[@"Character",@"ùîµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xfr; with a semi-colon");
}
        
- (void)test4124
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xhArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xhArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xhArr without a semi-colon");
}
        
- (void)test4125
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xhArr;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xhArr; with a semi-colon");
}
        
- (void)test4126
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xharr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xharr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xharr without a semi-colon");
}
        
- (void)test4127
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xharr;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xharr; with a semi-colon");
}
        
- (void)test4128
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xi"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xi"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xi without a semi-colon");
}
        
- (void)test4129
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xi;"];
    NSArray *tokens = @[@[@"Character",@"Œæ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xi; with a semi-colon");
}
        
- (void)test4130
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xlArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xlArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xlArr without a semi-colon");
}
        
- (void)test4131
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xlArr;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∏"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xlArr; with a semi-colon");
}
        
- (void)test4132
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xlarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xlarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xlarr without a semi-colon");
}
        
- (void)test4133
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xlarr;"];
    NSArray *tokens = @[@[@"Character",@"‚üµ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xlarr; with a semi-colon");
}
        
- (void)test4134
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xmap"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xmap"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xmap without a semi-colon");
}
        
- (void)test4135
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xmap;"];
    NSArray *tokens = @[@[@"Character",@"‚üº"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xmap; with a semi-colon");
}
        
- (void)test4136
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xnis"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xnis"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xnis without a semi-colon");
}
        
- (void)test4137
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xnis;"];
    NSArray *tokens = @[@[@"Character",@"‚ãª"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xnis; with a semi-colon");
}
        
- (void)test4138
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xodot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xodot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xodot without a semi-colon");
}
        
- (void)test4139
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xodot;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ä"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xodot; with a semi-colon");
}
        
- (void)test4140
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xopf without a semi-colon");
}
        
- (void)test4141
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï©"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xopf; with a semi-colon");
}
        
- (void)test4142
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xoplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xoplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xoplus without a semi-colon");
}
        
- (void)test4143
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xoplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®Å"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xoplus; with a semi-colon");
}
        
- (void)test4144
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xotime"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xotime"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xotime without a semi-colon");
}
        
- (void)test4145
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xotime;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xotime; with a semi-colon");
}
        
- (void)test4146
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xrArr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xrArr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xrArr without a semi-colon");
}
        
- (void)test4147
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xrArr;"];
    NSArray *tokens = @[@[@"Character",@"‚üπ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xrArr; with a semi-colon");
}
        
- (void)test4148
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xrarr without a semi-colon");
}
        
- (void)test4149
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚ü∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xrarr; with a semi-colon");
}
        
- (void)test4150
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xscr without a semi-colon");
}
        
- (void)test4151
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xscr; with a semi-colon");
}
        
- (void)test4152
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xsqcup"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xsqcup"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xsqcup without a semi-colon");
}
        
- (void)test4153
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xsqcup;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ü"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xsqcup; with a semi-colon");
}
        
- (void)test4154
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xuplus"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xuplus"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xuplus without a semi-colon");
}
        
- (void)test4155
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xuplus;"];
    NSArray *tokens = @[@[@"Character",@"‚®Ñ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xuplus; with a semi-colon");
}
        
- (void)test4156
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xutri"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xutri"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xutri without a semi-colon");
}
        
- (void)test4157
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xutri;"];
    NSArray *tokens = @[@[@"Character",@"‚ñ≥"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xutri; with a semi-colon");
}
        
- (void)test4158
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xvee"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xvee"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xvee without a semi-colon");
}
        
- (void)test4159
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xvee;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÅ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xvee; with a semi-colon");
}
        
- (void)test4160
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xwedge"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&xwedge"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: xwedge without a semi-colon");
}
        
- (void)test4161
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&xwedge;"];
    NSArray *tokens = @[@[@"Character",@"‚ãÄ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: xwedge; with a semi-colon");
}
        
- (void)test4162
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yacute without a semi-colon");
}
        
- (void)test4163
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yacute;"];
    NSArray *tokens = @[@[@"Character",@"√Ω"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yacute; with a semi-colon");
}
        
- (void)test4164
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yacy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&yacy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: yacy without a semi-colon");
}
        
- (void)test4165
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yacy;"];
    NSArray *tokens = @[@[@"Character",@"—è"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yacy; with a semi-colon");
}
        
- (void)test4166
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ycirc"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ycirc"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ycirc without a semi-colon");
}
        
- (void)test4167
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ycirc;"];
    NSArray *tokens = @[@[@"Character",@"≈∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ycirc; with a semi-colon");
}
        
- (void)test4168
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ycy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&ycy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: ycy without a semi-colon");
}
        
- (void)test4169
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&ycy;"];
    NSArray *tokens = @[@[@"Character",@"—ã"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: ycy; with a semi-colon");
}
        
- (void)test4170
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yen"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"¬•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yen without a semi-colon");
}
        
- (void)test4171
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yen;"];
    NSArray *tokens = @[@[@"Character",@"¬•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yen; with a semi-colon");
}
        
- (void)test4172
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&yfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: yfr without a semi-colon");
}
        
- (void)test4173
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yfr; with a semi-colon");
}
        
- (void)test4174
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yicy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&yicy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: yicy without a semi-colon");
}
        
- (void)test4175
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yicy;"];
    NSArray *tokens = @[@[@"Character",@"—ó"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yicy; with a semi-colon");
}
        
- (void)test4176
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&yopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: yopf without a semi-colon");
}
        
- (void)test4177
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yopf; with a semi-colon");
}
        
- (void)test4178
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&yscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: yscr without a semi-colon");
}
        
- (void)test4179
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìé"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yscr; with a semi-colon");
}
        
- (void)test4180
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yucy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&yucy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: yucy without a semi-colon");
}
        
- (void)test4181
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yucy;"];
    NSArray *tokens = @[@[@"Character",@"—é"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yucy; with a semi-colon");
}
        
- (void)test4182
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yuml"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"√ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yuml without a semi-colon");
}
        
- (void)test4183
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&yuml;"];
    NSArray *tokens = @[@[@"Character",@"√ø"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: yuml; with a semi-colon");
}
        
- (void)test4184
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zacute"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zacute"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zacute without a semi-colon");
}
        
- (void)test4185
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zacute;"];
    NSArray *tokens = @[@[@"Character",@"≈∫"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zacute; with a semi-colon");
}
        
- (void)test4186
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zcaron"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zcaron"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zcaron without a semi-colon");
}
        
- (void)test4187
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zcaron;"];
    NSArray *tokens = @[@[@"Character",@"≈æ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zcaron; with a semi-colon");
}
        
- (void)test4188
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zcy without a semi-colon");
}
        
- (void)test4189
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zcy;"];
    NSArray *tokens = @[@[@"Character",@"–∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zcy; with a semi-colon");
}
        
- (void)test4190
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zdot"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zdot"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zdot without a semi-colon");
}
        
- (void)test4191
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zdot;"];
    NSArray *tokens = @[@[@"Character",@"≈º"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zdot; with a semi-colon");
}
        
- (void)test4192
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zeetrf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zeetrf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zeetrf without a semi-colon");
}
        
- (void)test4193
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zeetrf;"];
    NSArray *tokens = @[@[@"Character",@"‚Ñ®"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zeetrf; with a semi-colon");
}
        
- (void)test4194
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zeta"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zeta"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zeta without a semi-colon");
}
        
- (void)test4195
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zeta;"];
    NSArray *tokens = @[@[@"Character",@"Œ∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zeta; with a semi-colon");
}
        
- (void)test4196
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zfr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zfr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zfr without a semi-colon");
}
        
- (void)test4197
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zfr;"];
    NSArray *tokens = @[@[@"Character",@"ùî∑"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zfr; with a semi-colon");
}
        
- (void)test4198
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zhcy"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zhcy"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zhcy without a semi-colon");
}
        
- (void)test4199
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zhcy;"];
    NSArray *tokens = @[@[@"Character",@"–∂"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zhcy; with a semi-colon");
}
        
- (void)test4200
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zigrarr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zigrarr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zigrarr without a semi-colon");
}
        
- (void)test4201
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zigrarr;"];
    NSArray *tokens = @[@[@"Character",@"‚áù"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zigrarr; with a semi-colon");
}
        
- (void)test4202
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zopf"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zopf"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zopf without a semi-colon");
}
        
- (void)test4203
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zopf;"];
    NSArray *tokens = @[@[@"Character",@"ùï´"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zopf; with a semi-colon");
}
        
- (void)test4204
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zscr"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zscr"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zscr without a semi-colon");
}
        
- (void)test4205
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zscr;"];
    NSArray *tokens = @[@[@"Character",@"ùìè"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zscr; with a semi-colon");
}
        
- (void)test4206
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zwj"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zwj"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zwj without a semi-colon");
}
        
- (void)test4207
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zwj;"];
    NSArray *tokens = @[@[@"Character",@"‚Äç"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zwj; with a semi-colon");
}
        
- (void)test4208
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zwnj"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"&zwnj"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Bad named entity: zwnj without a semi-colon");
}
        
- (void)test4209
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&zwnj;"];
    NSArray *tokens = @[@[@"Character",@"‚Äå"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Named entity: zwnj; with a semi-colon");
}

@end
