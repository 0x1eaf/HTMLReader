// This file was autogenerated from Tests/html5lib/tokenizer/entities.test.

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizer.h"

@interface TokenizerEntitiesTests : SenTestCase

@end

@implementation TokenizerEntitiesTests
        
- (void)test0
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"<h a='&noti;'>"];
    NSArray *tokens = @[@"ParseError",@[@"StartTag",@"h",@{@"a":@"&noti;"}]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Undefined named entity in attribute value ending in semicolon and whose name starts with a known entity name.");
}
        
- (void)test1
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"<h a='&lang='>"];
    NSArray *tokens = @[@"ParseError",@[@"StartTag",@"h",@{@"a":@"&lang="}]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Entity name followed by the equals sign in an attribute value.");
}
        
- (void)test2
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#013;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"\r"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"CR as numeric entity");
}
        
- (void)test3
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x00D;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"\r"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"CR as hexadecimal numeric entity");
}
        
- (void)test4
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0128;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"€"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 EURO SIGN numeric entity.");
}
        
- (void)test5
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0129;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR numeric entity.");
}
        
- (void)test6
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0130;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‚"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SINGLE LOW-9 QUOTATION MARK numeric entity.");
}
        
- (void)test7
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0131;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"ƒ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN SMALL LETTER F WITH HOOK numeric entity.");
}
        
- (void)test8
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0132;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"„"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 DOUBLE LOW-9 QUOTATION MARK numeric entity.");
}
        
- (void)test9
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0133;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"…"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 HORIZONTAL ELLIPSIS numeric entity.");
}
        
- (void)test10
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0134;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 DAGGER numeric entity.");
}
        
- (void)test11
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0135;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‡"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 DOUBLE DAGGER numeric entity.");
}
        
- (void)test12
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0136;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"ˆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 MODIFIER LETTER CIRCUMFLEX ACCENT numeric entity.");
}
        
- (void)test13
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0137;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‰"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 PER MILLE SIGN numeric entity.");
}
        
- (void)test14
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0138;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"Š"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN CAPITAL LETTER S WITH CARON numeric entity.");
}
        
- (void)test15
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0139;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‹"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SINGLE LEFT-POINTING ANGLE QUOTATION MARK numeric entity.");
}
        
- (void)test16
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0140;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"Œ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN CAPITAL LIGATURE OE numeric entity.");
}
        
- (void)test17
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0141;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR numeric entity.");
}
        
- (void)test18
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0142;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"Ž"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN CAPITAL LETTER Z WITH CARON numeric entity.");
}
        
- (void)test19
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0143;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR numeric entity.");
}
        
- (void)test20
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0144;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR numeric entity.");
}
        
- (void)test21
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0145;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‘"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LEFT SINGLE QUOTATION MARK numeric entity.");
}
        
- (void)test22
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0146;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"’"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 RIGHT SINGLE QUOTATION MARK numeric entity.");
}
        
- (void)test23
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0147;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"“"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LEFT DOUBLE QUOTATION MARK numeric entity.");
}
        
- (void)test24
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0148;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"”"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 RIGHT DOUBLE QUOTATION MARK numeric entity.");
}
        
- (void)test25
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0149;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 BULLET numeric entity.");
}
        
- (void)test26
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0150;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"–"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 EN DASH numeric entity.");
}
        
- (void)test27
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0151;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"—"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 EM DASH numeric entity.");
}
        
- (void)test28
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0152;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"˜"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SMALL TILDE numeric entity.");
}
        
- (void)test29
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0153;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 TRADE MARK SIGN numeric entity.");
}
        
- (void)test30
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0154;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"š"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN SMALL LETTER S WITH CARON numeric entity.");
}
        
- (void)test31
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0155;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"›"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SINGLE RIGHT-POINTING ANGLE QUOTATION MARK numeric entity.");
}
        
- (void)test32
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0156;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"œ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN SMALL LIGATURE OE numeric entity.");
}
        
- (void)test33
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#0157;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR numeric entity.");
}
        
- (void)test34
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x080;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"€"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 EURO SIGN hexadecimal numeric entity.");
}
        
- (void)test35
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x081;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR hexadecimal numeric entity.");
}
        
- (void)test36
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x082;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‚"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SINGLE LOW-9 QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test37
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x083;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"ƒ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN SMALL LETTER F WITH HOOK hexadecimal numeric entity.");
}
        
- (void)test38
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x084;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"„"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 DOUBLE LOW-9 QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test39
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x085;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"…"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 HORIZONTAL ELLIPSIS hexadecimal numeric entity.");
}
        
- (void)test40
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x086;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"†"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 DAGGER hexadecimal numeric entity.");
}
        
- (void)test41
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x087;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‡"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 DOUBLE DAGGER hexadecimal numeric entity.");
}
        
- (void)test42
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x088;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"ˆ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 MODIFIER LETTER CIRCUMFLEX ACCENT hexadecimal numeric entity.");
}
        
- (void)test43
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x089;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‰"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 PER MILLE SIGN hexadecimal numeric entity.");
}
        
- (void)test44
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x08A;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"Š"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN CAPITAL LETTER S WITH CARON hexadecimal numeric entity.");
}
        
- (void)test45
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x08B;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‹"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SINGLE LEFT-POINTING ANGLE QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test46
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x08C;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"Œ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN CAPITAL LIGATURE OE hexadecimal numeric entity.");
}
        
- (void)test47
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x08D;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR hexadecimal numeric entity.");
}
        
- (void)test48
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x08E;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"Ž"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN CAPITAL LETTER Z WITH CARON hexadecimal numeric entity.");
}
        
- (void)test49
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x08F;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR hexadecimal numeric entity.");
}
        
- (void)test50
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x090;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR hexadecimal numeric entity.");
}
        
- (void)test51
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x091;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"‘"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LEFT SINGLE QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test52
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x092;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"’"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 RIGHT SINGLE QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test53
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x093;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"“"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LEFT DOUBLE QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test54
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x094;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"”"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 RIGHT DOUBLE QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test55
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x095;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"•"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 BULLET hexadecimal numeric entity.");
}
        
- (void)test56
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x096;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"–"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 EN DASH hexadecimal numeric entity.");
}
        
- (void)test57
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x097;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"—"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 EM DASH hexadecimal numeric entity.");
}
        
- (void)test58
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x098;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"˜"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SMALL TILDE hexadecimal numeric entity.");
}
        
- (void)test59
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x099;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"™"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 TRADE MARK SIGN hexadecimal numeric entity.");
}
        
- (void)test60
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x09A;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"š"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN SMALL LETTER S WITH CARON hexadecimal numeric entity.");
}
        
- (void)test61
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x09B;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"›"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 SINGLE RIGHT-POINTING ANGLE QUOTATION MARK hexadecimal numeric entity.");
}
        
- (void)test62
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x09C;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"œ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN SMALL LIGATURE OE hexadecimal numeric entity.");
}
        
- (void)test63
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x09D;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@""]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 REPLACEMENT CHAR hexadecimal numeric entity.");
}
        
- (void)test64
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x09E;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"ž"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN SMALL LETTER Z WITH CARON hexadecimal numeric entity.");
}
        
- (void)test65
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#x09F;"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"Ÿ"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Windows-1252 LATIN CAPITAL LETTER Y WITH DIAERESIS hexadecimal numeric entity.");
}
        
- (void)test66
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#97a"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"aa"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Decimal numeric entity followed by hex character a.");
}
        
- (void)test67
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#97A"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"aA"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Decimal numeric entity followed by hex character A.");
}
        
- (void)test68
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#97f"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"af"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Decimal numeric entity followed by hex character f.");
}
        
- (void)test69
{
    HTMLTokenizer *tokenizer = [HTMLTokenizer tokenizerWithString:@"&#97F"];
    NSArray *tokens = @[@"ParseError",@[@"Character",@"aF"]];
    STAssertEqualObjects(tokenizer.allObjects, tokens, @"%@", @"Decimal numeric entity followed by hex character A.");
}

@end
