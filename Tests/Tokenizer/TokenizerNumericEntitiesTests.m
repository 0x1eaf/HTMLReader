// This file was autogenerated from Tests/html5lib/tokenizer/numericEntities.test

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerNumericEntitiesTests : SenTestCase

@end

@implementation TokenizerNumericEntitiesTests
        
- (void)test000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0000");
    }
}
        
- (void)test001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0001]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0001;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0001");
    }
}
        
- (void)test002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0002]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0002;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0002");
    }
}
        
- (void)test003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0003]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0003;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0003");
    }
}
        
- (void)test004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0004]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0004;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0004");
    }
}
        
- (void)test005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0005]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0005;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0005");
    }
}
        
- (void)test006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0006]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0006;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0006");
    }
}
        
- (void)test007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0007]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0007;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0007");
    }
}
        
- (void)test008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"\b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0008;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0008");
    }
}
        
- (void)test009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x000b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+000B");
    }
}
        
- (void)test010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x000e]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x000e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+000E");
    }
}
        
- (void)test011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x000f]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x000f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+000F");
    }
}
        
- (void)test012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0010]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0010;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0010");
    }
}
        
- (void)test013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0011]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0011;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0011");
    }
}
        
- (void)test014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0012]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0012;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0012");
    }
}
        
- (void)test015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0013]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0013;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0013");
    }
}
        
- (void)test016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0014]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0014;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0014");
    }
}
        
- (void)test017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0015]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0015;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0015");
    }
}
        
- (void)test018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0016]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0016;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0016");
    }
}
        
- (void)test019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0017]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0017;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0017");
    }
}
        
- (void)test020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0018]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0018;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0018");
    }
}
        
- (void)test021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0019]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0019;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+0019");
    }
}
        
- (void)test022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001a]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x001a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+001A");
    }
}
        
- (void)test023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x001b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+001B");
    }
}
        
- (void)test024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001c]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x001c;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+001C");
    }
}
        
- (void)test025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001d]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x001d;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+001D");
    }
}
        
- (void)test026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001e]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x001e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+001E");
    }
}
        
- (void)test027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x001f]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x001f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+001F");
    }
}
        
- (void)test028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x007f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+007F");
    }
}
        
- (void)test029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xd800;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+D800");
    }
}
        
- (void)test030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xdfff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+DFFF");
    }
}
        
- (void)test031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD0");
    }
}
        
- (void)test032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD1");
    }
}
        
- (void)test033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD2");
    }
}
        
- (void)test034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD3");
    }
}
        
- (void)test035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD4");
    }
}
        
- (void)test036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD5");
    }
}
        
- (void)test037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD6");
    }
}
        
- (void)test038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD7");
    }
}
        
- (void)test039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD8");
    }
}
        
- (void)test040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdd9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDD9");
    }
}
        
- (void)test041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdda;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDDA");
    }
}
        
- (void)test042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfddb;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDDB");
    }
}
        
- (void)test043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfddc;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDDC");
    }
}
        
- (void)test044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfddd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDDD");
    }
}
        
- (void)test045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdde;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDDE");
    }
}
        
- (void)test046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfddf;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDDF");
    }
}
        
- (void)test047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï· "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE0");
    }
}
        
- (void)test048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¡"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE1");
    }
}
        
- (void)test049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE2");
    }
}
        
- (void)test050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE3");
    }
}
        
- (void)test051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE4");
    }
}
        
- (void)test052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE5");
    }
}
        
- (void)test053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¦"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE6");
    }
}
        
- (void)test054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE7");
    }
}
        
- (void)test055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE8");
    }
}
        
- (void)test056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfde9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDE9");
    }
}
        
- (void)test057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·ª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdea;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDEA");
    }
}
        
- (void)test058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·«"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdeb;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDEB");
    }
}
        
- (void)test059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¬"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdec;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDEC");
    }
}
        
- (void)test060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·­"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfded;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDED");
    }
}
        
- (void)test061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdee;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDEE");
    }
}
        
- (void)test062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï·¯"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdef;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FDEF");
    }
}
        
- (void)test063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FFFE");
    }
}
        
- (void)test064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ï¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FFFF");
    }
}
        
- (void)test065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ð¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x1fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+1FFFE");
    }
}
        
- (void)test066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ð¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x1ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+1FFFF");
    }
}
        
- (void)test067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ð¯¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x2fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+2FFFE");
    }
}
        
- (void)test068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ð¯¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x2ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+2FFFF");
    }
}
        
- (void)test069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ð¿¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x3fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+3FFFE");
    }
}
        
- (void)test070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ð¿¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x3ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+3FFFF");
    }
}
        
- (void)test071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x4fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+4FFFE");
    }
}
        
- (void)test072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x4ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+4FFFF");
    }
}
        
- (void)test073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x5fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+5FFFE");
    }
}
        
- (void)test074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x5ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+5FFFF");
    }
}
        
- (void)test075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¯¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x6fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+6FFFE");
    }
}
        
- (void)test076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¯¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x6ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+6FFFF");
    }
}
        
- (void)test077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¿¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x7fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+7FFFE");
    }
}
        
- (void)test078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ñ¿¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x7ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+7FFFF");
    }
}
        
- (void)test079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x8fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+8FFFE");
    }
}
        
- (void)test080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x8ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+8FFFF");
    }
}
        
- (void)test081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x9fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+9FFFE");
    }
}
        
- (void)test082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x9ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+9FFFF");
    }
}
        
- (void)test083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¯¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xafffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+AFFFE");
    }
}
        
- (void)test084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¯¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xaffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+AFFFF");
    }
}
        
- (void)test085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¿¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xbfffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+BFFFE");
    }
}
        
- (void)test086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ò¿¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xbffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+BFFFF");
    }
}
        
- (void)test087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xcfffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+CFFFE");
    }
}
        
- (void)test088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xcffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+CFFFF");
    }
}
        
- (void)test089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xdfffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+DFFFE");
    }
}
        
- (void)test090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xdffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+DFFFF");
    }
}
        
- (void)test091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¯¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xefffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+EFFFE");
    }
}
        
- (void)test092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¯¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xeffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+EFFFF");
    }
}
        
- (void)test093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¿¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xffffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FFFFE");
    }
}
        
- (void)test094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ó¿¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+FFFFF");
    }
}
        
- (void)test095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ô¿¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x10fffe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+10FFFE");
    }
}
        
- (void)test096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"ô¿¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x10ffff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Invalid numeric entity character U+10FFFF");
    }
}
        
- (void)test097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0009;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0009");
    }
}
        
- (void)test098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x000a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+000A");
    }
}
        
- (void)test099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0020;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0020");
    }
}
        
- (void)test100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0021;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0021");
    }
}
        
- (void)test101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0022;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0022");
    }
}
        
- (void)test102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"#"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0023;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0023");
    }
}
        
- (void)test103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"$"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0024;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0024");
    }
}
        
- (void)test104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"%"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0025;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0025");
    }
}
        
- (void)test105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0026;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0026");
    }
}
        
- (void)test106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0027;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0027");
    }
}
        
- (void)test107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"("]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0028;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0028");
    }
}
        
- (void)test108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @")"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0029;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0029");
    }
}
        
- (void)test109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"*"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x002a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+002A");
    }
}
        
- (void)test110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"+"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x002b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+002B");
    }
}
        
- (void)test111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @","]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x002c;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+002C");
    }
}
        
- (void)test112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x002d;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+002D");
    }
}
        
- (void)test113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x002e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+002E");
    }
}
        
- (void)test114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x002f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+002F");
    }
}
        
- (void)test115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0030;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0030");
    }
}
        
- (void)test116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0031;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0031");
    }
}
        
- (void)test117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"2"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0032;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0032");
    }
}
        
- (void)test118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"3"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0033;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0033");
    }
}
        
- (void)test119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"4"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0034;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0034");
    }
}
        
- (void)test120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"5"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0035;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0035");
    }
}
        
- (void)test121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"6"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0036;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0036");
    }
}
        
- (void)test122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"7"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0037;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0037");
    }
}
        
- (void)test123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"8"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0038;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0038");
    }
}
        
- (void)test124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0039;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0039");
    }
}
        
- (void)test125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @":"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x003a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+003A");
    }
}
        
- (void)test126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @";"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x003b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+003B");
    }
}
        
- (void)test127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x003c;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+003C");
    }
}
        
- (void)test128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x003d;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+003D");
    }
}
        
- (void)test129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @">"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x003e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+003E");
    }
}
        
- (void)test130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x003f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+003F");
    }
}
        
- (void)test131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0040;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0040");
    }
}
        
- (void)test132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0041;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0041");
    }
}
        
- (void)test133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0042;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0042");
    }
}
        
- (void)test134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"C"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0043;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0043");
    }
}
        
- (void)test135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"D"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0044;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0044");
    }
}
        
- (void)test136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"E"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0045;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0045");
    }
}
        
- (void)test137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"F"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0046;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0046");
    }
}
        
- (void)test138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"G"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0047;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0047");
    }
}
        
- (void)test139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"H"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0048;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0048");
    }
}
        
- (void)test140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"I"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0049;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0049");
    }
}
        
- (void)test141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"J"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x004a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+004A");
    }
}
        
- (void)test142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"K"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x004b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+004B");
    }
}
        
- (void)test143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"L"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x004c;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+004C");
    }
}
        
- (void)test144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"M"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x004d;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+004D");
    }
}
        
- (void)test145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"N"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x004e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+004E");
    }
}
        
- (void)test146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"O"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x004f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+004F");
    }
}
        
- (void)test147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"P"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0050;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0050");
    }
}
        
- (void)test148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Q"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0051;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0051");
    }
}
        
- (void)test149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"R"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0052;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0052");
    }
}
        
- (void)test150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"S"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0053;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0053");
    }
}
        
- (void)test151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"T"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0054;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0054");
    }
}
        
- (void)test152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"U"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0055;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0055");
    }
}
        
- (void)test153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"V"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0056;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0056");
    }
}
        
- (void)test154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"W"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0057;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0057");
    }
}
        
- (void)test155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"X"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0058;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0058");
    }
}
        
- (void)test156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0059;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0059");
    }
}
        
- (void)test157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x005a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+005A");
    }
}
        
- (void)test158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"["]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x005b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+005B");
    }
}
        
- (void)test159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\\"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x005c;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+005C");
    }
}
        
- (void)test160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"]"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x005d;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+005D");
    }
}
        
- (void)test161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"^"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x005e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+005E");
    }
}
        
- (void)test162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"_"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x005f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+005F");
    }
}
        
- (void)test163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0060;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0060");
    }
}
        
- (void)test164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0061;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0061");
    }
}
        
- (void)test165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0062;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0062");
    }
}
        
- (void)test166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"c"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0063;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0063");
    }
}
        
- (void)test167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"d"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0064;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0064");
    }
}
        
- (void)test168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"e"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0065;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0065");
    }
}
        
- (void)test169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0066;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0066");
    }
}
        
- (void)test170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"g"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0067;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0067");
    }
}
        
- (void)test171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"h"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0068;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0068");
    }
}
        
- (void)test172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"i"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0069;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0069");
    }
}
        
- (void)test173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"j"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x006a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+006A");
    }
}
        
- (void)test174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"k"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x006b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+006B");
    }
}
        
- (void)test175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"l"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x006c;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+006C");
    }
}
        
- (void)test176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"m"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x006d;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+006D");
    }
}
        
- (void)test177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x006e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+006E");
    }
}
        
- (void)test178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"o"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x006f;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+006F");
    }
}
        
- (void)test179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"p"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0070;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0070");
    }
}
        
- (void)test180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"q"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0071;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0071");
    }
}
        
- (void)test181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"r"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0072;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0072");
    }
}
        
- (void)test182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"s"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0073;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0073");
    }
}
        
- (void)test183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0074;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0074");
    }
}
        
- (void)test184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"u"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0075;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0075");
    }
}
        
- (void)test185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"v"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0076;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0076");
    }
}
        
- (void)test186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"w"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0077;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0077");
    }
}
        
- (void)test187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"x"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0078;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0078");
    }
}
        
- (void)test188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x0079;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+0079");
    }
}
        
- (void)test189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x007a;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+007A");
    }
}
        
- (void)test190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x007b;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+007B");
    }
}
        
- (void)test191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"|"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x007c;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+007C");
    }
}
        
- (void)test192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"}"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x007d;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+007D");
    }
}
        
- (void)test193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"~"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x007e;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+007E");
    }
}
        
- (void)test194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A0");
    }
}
        
- (void)test195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¡"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A1");
    }
}
        
- (void)test196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A2");
    }
}
        
- (void)test197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A3");
    }
}
        
- (void)test198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A4");
    }
}
        
- (void)test199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A5");
    }
}
        
- (void)test200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¦"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A6");
    }
}
        
- (void)test201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A7");
    }
}
        
- (void)test202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A8");
    }
}
        
- (void)test203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00a9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00A9");
    }
}
        
- (void)test204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Âª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00aa;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00AA");
    }
}
        
- (void)test205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â«"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ab;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00AB");
    }
}
        
- (void)test206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¬"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ac;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00AC");
    }
}
        
- (void)test207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â­"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ad;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00AD");
    }
}
        
- (void)test208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ae;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00AE");
    }
}
        
- (void)test209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¯"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00af;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00AF");
    }
}
        
- (void)test210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B0");
    }
}
        
- (void)test211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B1");
    }
}
        
- (void)test212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â²"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B2");
    }
}
        
- (void)test213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â³"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B3");
    }
}
        
- (void)test214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B4");
    }
}
        
- (void)test215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Âµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B5");
    }
}
        
- (void)test216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B6");
    }
}
        
- (void)test217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B7");
    }
}
        
- (void)test218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¸"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B8");
    }
}
        
- (void)test219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¹"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00b9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00B9");
    }
}
        
- (void)test220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Âº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ba;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00BA");
    }
}
        
- (void)test221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â»"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00bb;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00BB");
    }
}
        
- (void)test222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¼"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00bc;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00BC");
    }
}
        
- (void)test223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00bd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00BD");
    }
}
        
- (void)test224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00be;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00BE");
    }
}
        
- (void)test225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Â¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00bf;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00BF");
    }
}
        
- (void)test226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C0");
    }
}
        
- (void)test227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C1");
    }
}
        
- (void)test228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C2");
    }
}
        
- (void)test229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C3");
    }
}
        
- (void)test230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C4");
    }
}
        
- (void)test231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C5");
    }
}
        
- (void)test232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C6");
    }
}
        
- (void)test233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C7");
    }
}
        
- (void)test234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C8");
    }
}
        
- (void)test235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00c9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00C9");
    }
}
        
- (void)test236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ca;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00CA");
    }
}
        
- (void)test237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00cb;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00CB");
    }
}
        
- (void)test238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00cc;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00CC");
    }
}
        
- (void)test239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00cd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00CD");
    }
}
        
- (void)test240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ce;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00CE");
    }
}
        
- (void)test241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00cf;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00CF");
    }
}
        
- (void)test242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D0");
    }
}
        
- (void)test243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D1");
    }
}
        
- (void)test244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D2");
    }
}
        
- (void)test245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D3");
    }
}
        
- (void)test246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D4");
    }
}
        
- (void)test247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D5");
    }
}
        
- (void)test248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D6");
    }
}
        
- (void)test249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D7");
    }
}
        
- (void)test250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D8");
    }
}
        
- (void)test251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00d9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00D9");
    }
}
        
- (void)test252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00da;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00DA");
    }
}
        
- (void)test253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00db;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00DB");
    }
}
        
- (void)test254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00dc;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00DC");
    }
}
        
- (void)test255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00dd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00DD");
    }
}
        
- (void)test256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00de;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00DE");
    }
}
        
- (void)test257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00df;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00DF");
    }
}
        
- (void)test258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E0");
    }
}
        
- (void)test259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¡"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E1");
    }
}
        
- (void)test260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¢"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E2");
    }
}
        
- (void)test261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã£"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E3");
    }
}
        
- (void)test262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¤"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E4");
    }
}
        
- (void)test263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¥"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E5");
    }
}
        
- (void)test264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¦"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E6");
    }
}
        
- (void)test265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã§"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E7");
    }
}
        
- (void)test266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¨"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E8");
    }
}
        
- (void)test267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã©"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00e9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00E9");
    }
}
        
- (void)test268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ãª"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ea;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00EA");
    }
}
        
- (void)test269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã«"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00eb;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00EB");
    }
}
        
- (void)test270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¬"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ec;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00EC");
    }
}
        
- (void)test271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã­"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ed;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00ED");
    }
}
        
- (void)test272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã®"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ee;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00EE");
    }
}
        
- (void)test273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¯"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ef;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00EF");
    }
}
        
- (void)test274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F0");
    }
}
        
- (void)test275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã±"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f1;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F1");
    }
}
        
- (void)test276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã²"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f2;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F2");
    }
}
        
- (void)test277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã³"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f3;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F3");
    }
}
        
- (void)test278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã´"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f4;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F4");
    }
}
        
- (void)test279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ãµ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f5;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F5");
    }
}
        
- (void)test280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¶"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f6;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F6");
    }
}
        
- (void)test281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f7;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F7");
    }
}
        
- (void)test282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¸"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f8;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F8");
    }
}
        
- (void)test283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¹"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00f9;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00F9");
    }
}
        
- (void)test284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ãº"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00fa;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00FA");
    }
}
        
- (void)test285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã»"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00fb;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00FB");
    }
}
        
- (void)test286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¼"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00fc;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00FC");
    }
}
        
- (void)test287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00fd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00FD");
    }
}
        
- (void)test288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¾"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00fe;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00FE");
    }
}
        
- (void)test289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Ã¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x00ff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+00FF");
    }
}
        
- (void)test290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"í¿"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xd7ff;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+D7FF");
    }
}
        
- (void)test291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"î"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xe000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+E000");
    }
}
        
- (void)test292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ï·"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdcf;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+FDCF");
    }
}
        
- (void)test293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ï·°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfdf0;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+FDF0");
    }
}
        
- (void)test294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ï¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xfffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+FFFD");
    }
}
        
- (void)test295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ð"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x10000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+10000");
    }
}
        
- (void)test296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ð¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x1fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+1FFFD");
    }
}
        
- (void)test297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ð "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x20000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+20000");
    }
}
        
- (void)test298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ð¯¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x2fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+2FFFD");
    }
}
        
- (void)test299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ð°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x30000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+30000");
    }
}
        
- (void)test300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ð¿¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x3fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+3FFFD");
    }
}
        
- (void)test301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x40000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+40000");
    }
}
        
- (void)test302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x4fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+4FFFD");
    }
}
        
- (void)test303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x50000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+50000");
    }
}
        
- (void)test304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x5fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+5FFFD");
    }
}
        
- (void)test305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x60000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+60000");
    }
}
        
- (void)test306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ¯¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x6fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+6FFFD");
    }
}
        
- (void)test307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x70000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+70000");
    }
}
        
- (void)test308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ñ¿¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x7fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+7FFFD");
    }
}
        
- (void)test309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x80000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+80000");
    }
}
        
- (void)test310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x8fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+8FFFD");
    }
}
        
- (void)test311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x90000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+90000");
    }
}
        
- (void)test312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x9fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+9FFFD");
    }
}
        
- (void)test313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xa0000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+A0000");
    }
}
        
- (void)test314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò¯¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xafffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+AFFFD");
    }
}
        
- (void)test315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xb0000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+B0000");
    }
}
        
- (void)test316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ò¿¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xbfffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+BFFFD");
    }
}
        
- (void)test317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xc0000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+C0000");
    }
}
        
- (void)test318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xcfffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+CFFFD");
    }
}
        
- (void)test319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xd0000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+D0000");
    }
}
        
- (void)test320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xdfffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+DFFFD");
    }
}
        
- (void)test321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xe0000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+E0000");
    }
}
        
- (void)test322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó¯¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xefffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+EFFFD");
    }
}
        
- (void)test323
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó°"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xf0000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+F0000");
    }
}
        
- (void)test324
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ó¿¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#xffffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+FFFFD");
    }
}
        
- (void)test325
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ô"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x100000;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+100000");
    }
}
        
- (void)test326
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"ô¿½"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&#x10fffd;" state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Valid numeric entity character U+10FFFD");
    }
}

@end
