// This file was autogenerated from Tests/html5lib/tokenizer/escapeFlag.test

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerEscapeFlagTests : SenTestCase

@end

@implementation TokenizerEscapeFlagTests
        
- (void)test0
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo<!--"], @[@"EndTag", @"xmp"], @[@"Character", @"-->"], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo<!--</xmp>--></xmp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Commented close tag in RCDATA or RAWTEXT");
    }
}
        
- (void)test1
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo<!-->baz"], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo<!-->baz</xmp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Bogus comment in RCDATA or RAWTEXT");
    }
}
        
- (void)test2
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo<!-->"], @[@"EndTag", @"xmp"], @"ParseError", @[@"Comment", @""], @[@"Character", @"baz"], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo<!--></xmp><!-->baz</xmp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"End tag surrounded by bogus comment in RCDATA or RAWTEXT");
    }
}
        
- (void)test3
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @" & <!-- & --> & "], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@" &amp; <!-- &amp; --> &amp; </xmp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Commented entities in RCDATA");
    }
}
        
- (void)test4
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"foo<!-- x --x>x-- >x--!>x--<>"], @[@"EndTag", @"xmp"]]);
    for (NSString *state in @[@"RCDATA state", @"RAWTEXT state"]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"foo<!-- x --x>x-- >x--!>x--<></xmp>"];
        tokenizer.state = StateNamed(state);
        [tokenizer setLastStartTag:@"xmp"];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Incorrect comment ending sequences in RCDATA or RAWTEXT");
    }
}

@end
