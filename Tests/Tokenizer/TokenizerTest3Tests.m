// This file was autogenerated from Tests/html5lib/tokenizer/test3.test

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizerTestUtilities.h"

@interface TokenizerTest3Tests : SenTestCase

@end

@implementation TokenizerTest3Tests
        
- (void)test0000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"");
    }
}
        
- (void)test0001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"\\u0009");
    }
}
        
- (void)test0002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"\\u000A");
    }
}
        
- (void)test0003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"\\u000B");
    }
}
        
- (void)test0004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"\\u000C");
    }
}
        
- (void)test0005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@" "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @" ");
    }
}
        
- (void)test0006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"!");
    }
}
        
- (void)test0007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"\"");
    }
}
        
- (void)test0008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"%"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"%"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"%");
    }
}
        
- (void)test0009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"&");
    }
}
        
- (void)test0010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"'");
    }
}
        
- (void)test0011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @","]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@","];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @",");
    }
}
        
- (void)test0012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"-");
    }
}
        
- (void)test0013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"."];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @".");
    }
}
        
- (void)test0014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"/");
    }
}
        
- (void)test0015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"0");
    }
}
        
- (void)test0016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"1");
    }
}
        
- (void)test0017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"9");
    }
}
        
- (void)test0018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @";"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@";"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @";");
    }
}
        
- (void)test0019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<");
    }
}
        
- (void)test0020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<"], @"ParseError", @[@"Character", [NSString stringWithFormat:@"%C", (unichar)0x0000]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<\\u0000");
    }
}
        
- (void)test0021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<\\u0009");
    }
}
        
- (void)test0022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<\\u000A");
    }
}
        
- (void)test0023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Character", [NSString stringWithFormat:@"<%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<\\u000B");
    }
}
        
- (void)test0024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<\\u000C");
    }
}
        
- (void)test0025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"< "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"< "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"< ");
    }
}
        
- (void)test0026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!");
    }
}
        
- (void)test0027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!\\u0000");
    }
}
        
- (void)test0028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!\\u0009");
    }
}
        
- (void)test0029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!\\u000A");
    }
}
        
- (void)test0030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@"%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!\\u000B");
    }
}
        
- (void)test0031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!\\u000C");
    }
}
        
- (void)test0032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<! "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<! ");
    }
}
        
- (void)test0033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!!");
    }
}
        
- (void)test0034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!\"");
    }
}
        
- (void)test0035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!&");
    }
}
        
- (void)test0036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!'");
    }
}
        
- (void)test0037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-");
    }
}
        
- (void)test0038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--");
    }
}
        
- (void)test0039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!--%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--\\u0000");
    }
}
        
- (void)test0040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--\\u0009");
    }
}
        
- (void)test0041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--\\u000A");
    }
}
        
- (void)test0042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@"%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!--%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--\\u000B");
    }
}
        
- (void)test0043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--\\u000C");
    }
}
        
- (void)test0044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- ");
    }
}
        
- (void)test0045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @" �"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!-- %C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- \\u0000");
    }
}
        
- (void)test0046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" \t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- \t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- \\u0009");
    }
}
        
- (void)test0047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" \n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- \n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- \\u000A");
    }
}
        
- (void)test0048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@" %C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!-- %C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- \\u000B");
    }
}
        
- (void)test0049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" \f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- \f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- \\u000C");
    }
}
        
- (void)test0050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"  "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--  "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--  ");
    }
}
        
- (void)test0051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" !"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- !"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- !");
    }
}
        
- (void)test0052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" \""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- \""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- \"");
    }
}
        
- (void)test0053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" &"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- &"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- &");
    }
}
        
- (void)test0054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" '"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- '"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- '");
    }
}
        
- (void)test0055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" ,"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- ,"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- ,");
    }
}
        
- (void)test0056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -");
    }
}
        
- (void)test0057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @" -�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!-- -%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -\\u0000");
    }
}
        
- (void)test0058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -\\u0009");
    }
}
        
- (void)test0059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -\\u000A");
    }
}
        
- (void)test0060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@" -%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!-- -%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -\\u000B");
    }
}
        
- (void)test0061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -\\u000C");
    }
}
        
- (void)test0062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" - "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- - "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- - ");
    }
}
        
- (void)test0063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -!");
    }
}
        
- (void)test0064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -\"");
    }
}
        
- (void)test0065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -&");
    }
}
        
- (void)test0066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -'");
    }
}
        
- (void)test0067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -,"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -,"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -,");
    }
}
        
- (void)test0068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- --"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- --");
    }
}
        
- (void)test0069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -."];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -.");
    }
}
        
- (void)test0070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -/");
    }
}
        
- (void)test0071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -0");
    }
}
        
- (void)test0072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -1");
    }
}
        
- (void)test0073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -9");
    }
}
        
- (void)test0074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -<");
    }
}
        
- (void)test0075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -=");
    }
}
        
- (void)test0076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" ->"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- ->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- ->");
    }
}
        
- (void)test0077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -?");
    }
}
        
- (void)test0078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -@");
    }
}
        
- (void)test0079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -A");
    }
}
        
- (void)test0080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -B");
    }
}
        
- (void)test0081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -Y");
    }
}
        
- (void)test0082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -Z");
    }
}
        
- (void)test0083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -`");
    }
}
        
- (void)test0084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -a");
    }
}
        
- (void)test0085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -b");
    }
}
        
- (void)test0086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -y");
    }
}
        
- (void)test0087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -z");
    }
}
        
- (void)test0088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -{");
    }
}
        
- (void)test0089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" -􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- -􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- -\\uDBC0\\uDC00");
    }
}
        
- (void)test0090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" ."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- ."];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- .");
    }
}
        
- (void)test0091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" /"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- /"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- /");
    }
}
        
- (void)test0092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" 0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- 0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- 0");
    }
}
        
- (void)test0093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" 1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- 1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- 1");
    }
}
        
- (void)test0094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" 9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- 9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- 9");
    }
}
        
- (void)test0095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" <"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- <"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- <");
    }
}
        
- (void)test0096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" ="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- ="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- =");
    }
}
        
- (void)test0097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" >"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- >");
    }
}
        
- (void)test0098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" ?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- ?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- ?");
    }
}
        
- (void)test0099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" @"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- @"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- @");
    }
}
        
- (void)test0100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- A");
    }
}
        
- (void)test0101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- B");
    }
}
        
- (void)test0102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- Y");
    }
}
        
- (void)test0103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- Z");
    }
}
        
- (void)test0104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" `"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- `"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- `");
    }
}
        
- (void)test0105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- a");
    }
}
        
- (void)test0106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- b");
    }
}
        
- (void)test0107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- y");
    }
}
        
- (void)test0108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- z");
    }
}
        
- (void)test0109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" {"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- {"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- {");
    }
}
        
- (void)test0110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" 􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-- 􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-- \\uDBC0\\uDC00");
    }
}
        
- (void)test0111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--!");
    }
}
        
- (void)test0112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--\"");
    }
}
        
- (void)test0113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--&");
    }
}
        
- (void)test0114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--'");
    }
}
        
- (void)test0115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @","]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--,"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--,");
    }
}
        
- (void)test0116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---");
    }
}
        
- (void)test0117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"-�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!---%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---\\u0000");
    }
}
        
- (void)test0118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---\\u0009");
    }
}
        
- (void)test0119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---\\u000A");
    }
}
        
- (void)test0120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@"-%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!---%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---\\u000B");
    }
}
        
- (void)test0121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---\\u000C");
    }
}
        
- (void)test0122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"- "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--- "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--- ");
    }
}
        
- (void)test0123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---!");
    }
}
        
- (void)test0124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---\"");
    }
}
        
- (void)test0125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---&");
    }
}
        
- (void)test0126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---'");
    }
}
        
- (void)test0127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-,"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---,"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---,");
    }
}
        
- (void)test0128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----");
    }
}
        
- (void)test0129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!----%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----\\u0000");
    }
}
        
- (void)test0130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----\\u0009");
    }
}
        
- (void)test0131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----\\u000A");
    }
}
        
- (void)test0132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@"--%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!----%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----\\u000B");
    }
}
        
- (void)test0133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----\\u000C");
    }
}
        
- (void)test0134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"-- "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---- "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---- ");
    }
}
        
- (void)test0135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"-- "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---- -"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---- -");
    }
}
        
- (void)test0136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"-- "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---- --"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---- --");
    }
}
        
- (void)test0137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-- "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---- -->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---- -->");
    }
}
        
- (void)test0138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"--  "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----  -->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----  -->");
    }
}
        
- (void)test0139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-- a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---- a-->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---- a-->");
    }
}
        
- (void)test0140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!");
    }
}
        
- (void)test0141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!>");
    }
}
        
- (void)test0142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--!a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!a");
    }
}
        
- (void)test0143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--!a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!a-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!a-");
    }
}
        
- (void)test0144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--!a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!a--"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!a--");
    }
}
        
- (void)test0145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"--!a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!a-->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!a-->");
    }
}
        
- (void)test0146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!-");
    }
}
        
- (void)test0147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!--"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!--");
    }
}
        
- (void)test0148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"--!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----!-->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----!-->");
    }
}
        
- (void)test0149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----\"");
    }
}
        
- (void)test0150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----&");
    }
}
        
- (void)test0151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----'");
    }
}
        
- (void)test0152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--,"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----,"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----,");
    }
}
        
- (void)test0153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-----"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-----");
    }
}
        
- (void)test0154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----."];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----.");
    }
}
        
- (void)test0155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----/");
    }
}
        
- (void)test0156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----0");
    }
}
        
- (void)test0157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----1");
    }
}
        
- (void)test0158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----9");
    }
}
        
- (void)test0159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----<");
    }
}
        
- (void)test0160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----=");
    }
}
        
- (void)test0161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---->");
    }
}
        
- (void)test0162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----?");
    }
}
        
- (void)test0163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----@");
    }
}
        
- (void)test0164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----A");
    }
}
        
- (void)test0165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----B");
    }
}
        
- (void)test0166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----Y");
    }
}
        
- (void)test0167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----Z");
    }
}
        
- (void)test0168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----`");
    }
}
        
- (void)test0169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----a");
    }
}
        
- (void)test0170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----b");
    }
}
        
- (void)test0171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----y");
    }
}
        
- (void)test0172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----z");
    }
}
        
- (void)test0173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----{");
    }
}
        
- (void)test0174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", @"--􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!----􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!----\\uDBC0\\uDC00");
    }
}
        
- (void)test0175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---."];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---.");
    }
}
        
- (void)test0176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---/");
    }
}
        
- (void)test0177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---0");
    }
}
        
- (void)test0178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---1");
    }
}
        
- (void)test0179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---9");
    }
}
        
- (void)test0180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---<");
    }
}
        
- (void)test0181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---=");
    }
}
        
- (void)test0182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--->");
    }
}
        
- (void)test0183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---?");
    }
}
        
- (void)test0184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---@");
    }
}
        
- (void)test0185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---A");
    }
}
        
- (void)test0186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---B");
    }
}
        
- (void)test0187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---Y");
    }
}
        
- (void)test0188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---Z");
    }
}
        
- (void)test0189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---`");
    }
}
        
- (void)test0190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---a");
    }
}
        
- (void)test0191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---b");
    }
}
        
- (void)test0192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---y");
    }
}
        
- (void)test0193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---z");
    }
}
        
- (void)test0194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---{");
    }
}
        
- (void)test0195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!---􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!---\\uDBC0\\uDC00");
    }
}
        
- (void)test0196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--."];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--.");
    }
}
        
- (void)test0197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--/");
    }
}
        
- (void)test0198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--0");
    }
}
        
- (void)test0199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--1");
    }
}
        
- (void)test0200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--9");
    }
}
        
- (void)test0201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--<");
    }
}
        
- (void)test0202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--=");
    }
}
        
- (void)test0203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!-->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!-->");
    }
}
        
- (void)test0204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--?");
    }
}
        
- (void)test0205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--@");
    }
}
        
- (void)test0206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--A");
    }
}
        
- (void)test0207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--B");
    }
}
        
- (void)test0208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--Y");
    }
}
        
- (void)test0209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--Z");
    }
}
        
- (void)test0210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--`");
    }
}
        
- (void)test0211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--a");
    }
}
        
- (void)test0212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--b");
    }
}
        
- (void)test0213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--y");
    }
}
        
- (void)test0214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--z");
    }
}
        
- (void)test0215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--{");
    }
}
        
- (void)test0216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!--􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!--\\uDBC0\\uDC00");
    }
}
        
- (void)test0217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!/");
    }
}
        
- (void)test0218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!0");
    }
}
        
- (void)test0219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!1");
    }
}
        
- (void)test0220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!9");
    }
}
        
- (void)test0221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!<");
    }
}
        
- (void)test0222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!=");
    }
}
        
- (void)test0223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!>");
    }
}
        
- (void)test0224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!?");
    }
}
        
- (void)test0225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!@");
    }
}
        
- (void)test0226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!A");
    }
}
        
- (void)test0227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!B");
    }
}
        
- (void)test0228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE");
    }
}
        
- (void)test0229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"�", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u0000");
    }
}
        
- (void)test0230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"\b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u0008");
    }
}
        
- (void)test0231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u0009");
    }
}
        
- (void)test0232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u000A");
    }
}
        
- (void)test0233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"%C", (unichar)0x000b], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u000B");
    }
}
        
- (void)test0234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u000C");
    }
}
        
- (void)test0235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u000D");
    }
}
        
- (void)test0236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"%C", (unichar)0x001f], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\u001F");
    }
}
        
- (void)test0237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE ");
    }
}
        
- (void)test0238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"�", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE %C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u0000");
    }
}
        
- (void)test0239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"\b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE \b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u0008");
    }
}
        
- (void)test0240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE \t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u0009");
    }
}
        
- (void)test0241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE \n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u000A");
    }
}
        
- (void)test0242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"%C", (unichar)0x000b], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE %C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u000B");
    }
}
        
- (void)test0243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE \f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u000C");
    }
}
        
- (void)test0244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE \r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u000D");
    }
}
        
- (void)test0245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"%C", (unichar)0x001f], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE %C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\u001F");
    }
}
        
- (void)test0246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE  "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE  ");
    }
}
        
- (void)test0247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"!", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE !"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE !");
    }
}
        
- (void)test0248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"\"", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE \""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \"");
    }
}
        
- (void)test0249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"&", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE &"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE &");
    }
}
        
- (void)test0250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"'", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE '"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE '");
    }
}
        
- (void)test0251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"-", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE -"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE -");
    }
}
        
- (void)test0252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"/", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE /"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE /");
    }
}
        
- (void)test0253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"0", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE 0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE 0");
    }
}
        
- (void)test0254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"1", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE 1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE 1");
    }
}
        
- (void)test0255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"9", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE 9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE 9");
    }
}
        
- (void)test0256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"<", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE <"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE <");
    }
}
        
- (void)test0257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"=", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE ="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE =");
    }
}
        
- (void)test0258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE >");
    }
}
        
- (void)test0259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"?", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE ?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE ?");
    }
}
        
- (void)test0260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"@", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE @"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE @");
    }
}
        
- (void)test0261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE A");
    }
}
        
- (void)test0262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE B");
    }
}
        
- (void)test0263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"y", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE Y");
    }
}
        
- (void)test0264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"z", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE Z");
    }
}
        
- (void)test0265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"[", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE ["];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE [");
    }
}
        
- (void)test0266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"`", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE `"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE `");
    }
}
        
- (void)test0267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a");
    }
}
        
- (void)test0268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a�", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u0000");
    }
}
        
- (void)test0269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a\b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u0008");
    }
}
        
- (void)test0270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u0009");
    }
}
        
- (void)test0271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u000A");
    }
}
        
- (void)test0272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"a%C", (unichar)0x000b], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u000B");
    }
}
        
- (void)test0273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u000C");
    }
}
        
- (void)test0274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u000D");
    }
}
        
- (void)test0275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"a%C", (unichar)0x001f], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\u001F");
    }
}
        
- (void)test0276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a ");
    }
}
        
- (void)test0277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a %C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u0000");
    }
}
        
- (void)test0278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a \b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u0008");
    }
}
        
- (void)test0279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a \t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u0009");
    }
}
        
- (void)test0280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a \n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u000A");
    }
}
        
- (void)test0281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a %C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u000B");
    }
}
        
- (void)test0282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a \f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u000C");
    }
}
        
- (void)test0283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a \r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u000D");
    }
}
        
- (void)test0284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a %C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\u001F");
    }
}
        
- (void)test0285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a  "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a  ");
    }
}
        
- (void)test0286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a !"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a !");
    }
}
        
- (void)test0287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a \""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \"");
    }
}
        
- (void)test0288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a &"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a &");
    }
}
        
- (void)test0289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a '"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a '");
    }
}
        
- (void)test0290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a -"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a -");
    }
}
        
- (void)test0291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a /"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a /");
    }
}
        
- (void)test0292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a 0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a 0");
    }
}
        
- (void)test0293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a 1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a 1");
    }
}
        
- (void)test0294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a 9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a 9");
    }
}
        
- (void)test0295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a <"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a <");
    }
}
        
- (void)test0296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a ="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a =");
    }
}
        
- (void)test0297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a >");
    }
}
        
- (void)test0298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a ?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a ?");
    }
}
        
- (void)test0299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a @"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a @");
    }
}
        
- (void)test0300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a A");
    }
}
        
- (void)test0301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a B");
    }
}
        
- (void)test0302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC");
    }
}
        
- (void)test0303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u0000");
    }
}
        
- (void)test0304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u0008");
    }
}
        
- (void)test0305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u0009");
    }
}
        
- (void)test0306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u000A");
    }
}
        
- (void)test0307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u000B");
    }
}
        
- (void)test0308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u000C");
    }
}
        
- (void)test0309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u000D");
    }
}
        
- (void)test0310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\u001F");
    }
}
        
- (void)test0311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC ");
    }
}
        
- (void)test0312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC!");
    }
}
        
- (void)test0313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"");
    }
}
        
- (void)test0314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"�", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC\"%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"\\u0000");
    }
}
        
- (void)test0315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\t", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"\\u0009");
    }
}
        
- (void)test0316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\n", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"\\u000A");
    }
}
        
- (void)test0317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSString stringWithFormat:@"%C", (unichar)0x000b], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC\"%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"\\u000B");
    }
}
        
- (void)test0318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\f", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"\\u000C");
    }
}
        
- (void)test0319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @" ", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\" "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\" ");
    }
}
        
- (void)test0320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"!", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"!");
    }
}
        
- (void)test0321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"\"");
    }
}
        
- (void)test0322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"#", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"#");
    }
}
        
- (void)test0323
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"&", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"&");
    }
}
        
- (void)test0324
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"'", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"'");
    }
}
        
- (void)test0325
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"-", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"-");
    }
}
        
- (void)test0326
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"/", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"/");
    }
}
        
- (void)test0327
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"0", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"0");
    }
}
        
- (void)test0328
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"1", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"1");
    }
}
        
- (void)test0329
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"9", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"9");
    }
}
        
- (void)test0330
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"<", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"<");
    }
}
        
- (void)test0331
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"=", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"=");
    }
}
        
- (void)test0332
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\">");
    }
}
        
- (void)test0333
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"?", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"?");
    }
}
        
- (void)test0334
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"@", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"@");
    }
}
        
- (void)test0335
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"A", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"A");
    }
}
        
- (void)test0336
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"B", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"B");
    }
}
        
- (void)test0337
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"Y");
    }
}
        
- (void)test0338
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"Z");
    }
}
        
- (void)test0339
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"`", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"`");
    }
}
        
- (void)test0340
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"a", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"a");
    }
}
        
- (void)test0341
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"b", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"b");
    }
}
        
- (void)test0342
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"y");
    }
}
        
- (void)test0343
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"z");
    }
}
        
- (void)test0344
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"{", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"{");
    }
}
        
- (void)test0345
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"􀀀", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC\"􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\"\\uDBC0\\uDC00");
    }
}
        
- (void)test0346
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC#");
    }
}
        
- (void)test0347
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC&");
    }
}
        
- (void)test0348
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'");
    }
}
        
- (void)test0349
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"�", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC'%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'\\u0000");
    }
}
        
- (void)test0350
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\t", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'\\u0009");
    }
}
        
- (void)test0351
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\n", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'\\u000A");
    }
}
        
- (void)test0352
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSString stringWithFormat:@"%C", (unichar)0x000b], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC'%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'\\u000B");
    }
}
        
- (void)test0353
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\f", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'\\u000C");
    }
}
        
- (void)test0354
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @" ", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC' ");
    }
}
        
- (void)test0355
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"!", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'!");
    }
}
        
- (void)test0356
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'\"");
    }
}
        
- (void)test0357
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"&", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'&");
    }
}
        
- (void)test0358
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''");
    }
}
        
- (void)test0359
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC''%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u0000");
    }
}
        
- (void)test0360
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u0008");
    }
}
        
- (void)test0361
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u0009");
    }
}
        
- (void)test0362
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u000A");
    }
}
        
- (void)test0363
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC''%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u000B");
    }
}
        
- (void)test0364
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u000C");
    }
}
        
- (void)test0365
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u000D");
    }
}
        
- (void)test0366
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a PUBLIC''%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\u001F");
    }
}
        
- (void)test0367
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'' ");
    }
}
        
- (void)test0368
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''!");
    }
}
        
- (void)test0369
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\"");
    }
}
        
- (void)test0370
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''#");
    }
}
        
- (void)test0371
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''&");
    }
}
        
- (void)test0372
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'''");
    }
}
        
- (void)test0373
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''(");
    }
}
        
- (void)test0374
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''-");
    }
}
        
- (void)test0375
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''/");
    }
}
        
- (void)test0376
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''0");
    }
}
        
- (void)test0377
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''1");
    }
}
        
- (void)test0378
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''9");
    }
}
        
- (void)test0379
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''<");
    }
}
        
- (void)test0380
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''=");
    }
}
        
- (void)test0381
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''>");
    }
}
        
- (void)test0382
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''?");
    }
}
        
- (void)test0383
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''@");
    }
}
        
- (void)test0384
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''A");
    }
}
        
- (void)test0385
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''B");
    }
}
        
- (void)test0386
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''Y");
    }
}
        
- (void)test0387
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''Z");
    }
}
        
- (void)test0388
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''`");
    }
}
        
- (void)test0389
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''a");
    }
}
        
- (void)test0390
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''b");
    }
}
        
- (void)test0391
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''y");
    }
}
        
- (void)test0392
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''z");
    }
}
        
- (void)test0393
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''{");
    }
}
        
- (void)test0394
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC''􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC''\\uDBC0\\uDC00");
    }
}
        
- (void)test0395
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"(", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'(");
    }
}
        
- (void)test0396
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"-", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'-");
    }
}
        
- (void)test0397
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"/", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'/");
    }
}
        
- (void)test0398
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"0", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'0");
    }
}
        
- (void)test0399
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"1", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'1");
    }
}
        
- (void)test0400
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"9", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'9");
    }
}
        
- (void)test0401
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"<", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'<");
    }
}
        
- (void)test0402
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"=", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'=");
    }
}
        
- (void)test0403
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'>");
    }
}
        
- (void)test0404
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"?", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'?");
    }
}
        
- (void)test0405
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"@", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'@");
    }
}
        
- (void)test0406
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"A", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'A");
    }
}
        
- (void)test0407
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"B", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'B");
    }
}
        
- (void)test0408
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'Y");
    }
}
        
- (void)test0409
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'Z");
    }
}
        
- (void)test0410
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"`", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'`");
    }
}
        
- (void)test0411
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"a", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'a");
    }
}
        
- (void)test0412
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"b", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'b");
    }
}
        
- (void)test0413
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'y");
    }
}
        
- (void)test0414
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'z");
    }
}
        
- (void)test0415
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"{", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'{");
    }
}
        
- (void)test0416
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"􀀀", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC'􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC'\\uDBC0\\uDC00");
    }
}
        
- (void)test0417
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC(");
    }
}
        
- (void)test0418
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC-");
    }
}
        
- (void)test0419
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC/");
    }
}
        
- (void)test0420
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC0");
    }
}
        
- (void)test0421
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC1");
    }
}
        
- (void)test0422
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC9");
    }
}
        
- (void)test0423
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC<");
    }
}
        
- (void)test0424
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC=");
    }
}
        
- (void)test0425
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC>");
    }
}
        
- (void)test0426
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC?");
    }
}
        
- (void)test0427
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC@");
    }
}
        
- (void)test0428
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICA");
    }
}
        
- (void)test0429
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICB");
    }
}
        
- (void)test0430
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICY");
    }
}
        
- (void)test0431
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICZ");
    }
}
        
- (void)test0432
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC`");
    }
}
        
- (void)test0433
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICa");
    }
}
        
- (void)test0434
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICb"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICb");
    }
}
        
- (void)test0435
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICy"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICy");
    }
}
        
- (void)test0436
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLICz"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLICz");
    }
}
        
- (void)test0437
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC{");
    }
}
        
- (void)test0438
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a PUBLIC􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a PUBLIC\\uDBC0\\uDC00");
    }
}
        
- (void)test0439
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM");
    }
}
        
- (void)test0440
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u0000");
    }
}
        
- (void)test0441
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u0008");
    }
}
        
- (void)test0442
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u0009");
    }
}
        
- (void)test0443
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u000A");
    }
}
        
- (void)test0444
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u000B");
    }
}
        
- (void)test0445
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u000C");
    }
}
        
- (void)test0446
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u000D");
    }
}
        
- (void)test0447
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\u001F");
    }
}
        
- (void)test0448
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM ");
    }
}
        
- (void)test0449
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM!");
    }
}
        
- (void)test0450
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"");
    }
}
        
- (void)test0451
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"�", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM\"%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"\\u0000");
    }
}
        
- (void)test0452
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\t", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"\\u0009");
    }
}
        
- (void)test0453
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\n", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"\\u000A");
    }
}
        
- (void)test0454
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSString stringWithFormat:@"%C", (unichar)0x000b], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM\"%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"\\u000B");
    }
}
        
- (void)test0455
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\f", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"\\u000C");
    }
}
        
- (void)test0456
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @" ", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\" "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\" ");
    }
}
        
- (void)test0457
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"!", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"!");
    }
}
        
- (void)test0458
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"\"");
    }
}
        
- (void)test0459
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"#", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"#");
    }
}
        
- (void)test0460
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"&", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"&");
    }
}
        
- (void)test0461
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"'", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"'");
    }
}
        
- (void)test0462
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"-", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"-");
    }
}
        
- (void)test0463
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"/", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"/");
    }
}
        
- (void)test0464
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"0", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"0");
    }
}
        
- (void)test0465
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"1", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"1");
    }
}
        
- (void)test0466
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"9", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"9");
    }
}
        
- (void)test0467
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"<", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"<");
    }
}
        
- (void)test0468
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"=", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"=");
    }
}
        
- (void)test0469
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\">");
    }
}
        
- (void)test0470
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"?", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"?");
    }
}
        
- (void)test0471
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"@", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"@");
    }
}
        
- (void)test0472
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"A", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"A");
    }
}
        
- (void)test0473
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"B", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"B");
    }
}
        
- (void)test0474
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"Y");
    }
}
        
- (void)test0475
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"Z");
    }
}
        
- (void)test0476
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"`", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"`");
    }
}
        
- (void)test0477
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"a", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"a");
    }
}
        
- (void)test0478
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"b", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"b");
    }
}
        
- (void)test0479
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"y");
    }
}
        
- (void)test0480
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"z");
    }
}
        
- (void)test0481
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"{", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"{");
    }
}
        
- (void)test0482
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"􀀀", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM\"􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\"\\uDBC0\\uDC00");
    }
}
        
- (void)test0483
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM#");
    }
}
        
- (void)test0484
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM&");
    }
}
        
- (void)test0485
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'");
    }
}
        
- (void)test0486
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"�", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM'%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'\\u0000");
    }
}
        
- (void)test0487
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\t", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'\\u0009");
    }
}
        
- (void)test0488
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\n", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'\\u000A");
    }
}
        
- (void)test0489
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSString stringWithFormat:@"%C", (unichar)0x000b], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM'%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'\\u000B");
    }
}
        
- (void)test0490
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\f", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'\\u000C");
    }
}
        
- (void)test0491
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @" ", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM' ");
    }
}
        
- (void)test0492
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"!", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'!");
    }
}
        
- (void)test0493
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'\"");
    }
}
        
- (void)test0494
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"&", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'&");
    }
}
        
- (void)test0495
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''");
    }
}
        
- (void)test0496
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM''%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u0000");
    }
}
        
- (void)test0497
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u0008");
    }
}
        
- (void)test0498
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u0009");
    }
}
        
- (void)test0499
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u000A");
    }
}
        
- (void)test0500
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM''%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u000B");
    }
}
        
- (void)test0501
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u000C");
    }
}
        
- (void)test0502
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u000D");
    }
}
        
- (void)test0503
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a SYSTEM''%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\u001F");
    }
}
        
- (void)test0504
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'' ");
    }
}
        
- (void)test0505
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''!");
    }
}
        
- (void)test0506
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\"");
    }
}
        
- (void)test0507
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''&");
    }
}
        
- (void)test0508
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'''");
    }
}
        
- (void)test0509
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''-");
    }
}
        
- (void)test0510
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''/");
    }
}
        
- (void)test0511
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''0");
    }
}
        
- (void)test0512
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''1");
    }
}
        
- (void)test0513
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''9");
    }
}
        
- (void)test0514
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''<");
    }
}
        
- (void)test0515
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''=");
    }
}
        
- (void)test0516
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''>");
    }
}
        
- (void)test0517
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''?");
    }
}
        
- (void)test0518
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''@");
    }
}
        
- (void)test0519
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''A");
    }
}
        
- (void)test0520
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''B");
    }
}
        
- (void)test0521
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''Y");
    }
}
        
- (void)test0522
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''Z");
    }
}
        
- (void)test0523
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''`");
    }
}
        
- (void)test0524
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''a");
    }
}
        
- (void)test0525
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''b");
    }
}
        
- (void)test0526
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''y");
    }
}
        
- (void)test0527
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''z");
    }
}
        
- (void)test0528
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''{");
    }
}
        
- (void)test0529
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM''􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM''\\uDBC0\\uDC00");
    }
}
        
- (void)test0530
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"(", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'(");
    }
}
        
- (void)test0531
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"-", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'-");
    }
}
        
- (void)test0532
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"/", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'/");
    }
}
        
- (void)test0533
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"0", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'0");
    }
}
        
- (void)test0534
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"1", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'1");
    }
}
        
- (void)test0535
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"9", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'9");
    }
}
        
- (void)test0536
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"<", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'<");
    }
}
        
- (void)test0537
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"=", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'=");
    }
}
        
- (void)test0538
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'>");
    }
}
        
- (void)test0539
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"?", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'?");
    }
}
        
- (void)test0540
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"@", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'@");
    }
}
        
- (void)test0541
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"A", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'A");
    }
}
        
- (void)test0542
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"B", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'B");
    }
}
        
- (void)test0543
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'Y");
    }
}
        
- (void)test0544
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'Z");
    }
}
        
- (void)test0545
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"`", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'`");
    }
}
        
- (void)test0546
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"a", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'a");
    }
}
        
- (void)test0547
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"b", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'b");
    }
}
        
- (void)test0548
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'y");
    }
}
        
- (void)test0549
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'z");
    }
}
        
- (void)test0550
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"{", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'{");
    }
}
        
- (void)test0551
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"􀀀", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM'􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM'\\uDBC0\\uDC00");
    }
}
        
- (void)test0552
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM(");
    }
}
        
- (void)test0553
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM-");
    }
}
        
- (void)test0554
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM/");
    }
}
        
- (void)test0555
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM0");
    }
}
        
- (void)test0556
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM1");
    }
}
        
- (void)test0557
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM9");
    }
}
        
- (void)test0558
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM<");
    }
}
        
- (void)test0559
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM=");
    }
}
        
- (void)test0560
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM>");
    }
}
        
- (void)test0561
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM?");
    }
}
        
- (void)test0562
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM@");
    }
}
        
- (void)test0563
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMA");
    }
}
        
- (void)test0564
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMB");
    }
}
        
- (void)test0565
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMY");
    }
}
        
- (void)test0566
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMZ");
    }
}
        
- (void)test0567
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM`");
    }
}
        
- (void)test0568
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMa");
    }
}
        
- (void)test0569
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMb"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMb");
    }
}
        
- (void)test0570
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMy"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMy");
    }
}
        
- (void)test0571
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEMz"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEMz");
    }
}
        
- (void)test0572
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM{");
    }
}
        
- (void)test0573
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a SYSTEM􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a SYSTEM\\uDBC0\\uDC00");
    }
}
        
- (void)test0574
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a Y");
    }
}
        
- (void)test0575
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a Z");
    }
}
        
- (void)test0576
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a `"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a `");
    }
}
        
- (void)test0577
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a");
    }
}
        
- (void)test0578
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a a%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a\\u0000");
    }
}
        
- (void)test0579
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a\\u0009");
    }
}
        
- (void)test0580
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a\\u000A");
    }
}
        
- (void)test0581
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPE a a%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a\\u000B");
    }
}
        
- (void)test0582
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a\\u000C");
    }
}
        
- (void)test0583
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a ");
    }
}
        
- (void)test0584
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a!");
    }
}
        
- (void)test0585
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a\"");
    }
}
        
- (void)test0586
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a&");
    }
}
        
- (void)test0587
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a'");
    }
}
        
- (void)test0588
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a-");
    }
}
        
- (void)test0589
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a/");
    }
}
        
- (void)test0590
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a0");
    }
}
        
- (void)test0591
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a1");
    }
}
        
- (void)test0592
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a9");
    }
}
        
- (void)test0593
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a<");
    }
}
        
- (void)test0594
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a=");
    }
}
        
- (void)test0595
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a>");
    }
}
        
- (void)test0596
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a?");
    }
}
        
- (void)test0597
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a@");
    }
}
        
- (void)test0598
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a aA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a aA");
    }
}
        
- (void)test0599
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a aB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a aB");
    }
}
        
- (void)test0600
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a aY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a aY");
    }
}
        
- (void)test0601
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a aZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a aZ");
    }
}
        
- (void)test0602
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a`");
    }
}
        
- (void)test0603
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a aa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a aa");
    }
}
        
- (void)test0604
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a ab"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a ab");
    }
}
        
- (void)test0605
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a ay"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a ay");
    }
}
        
- (void)test0606
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a az"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a az");
    }
}
        
- (void)test0607
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a{");
    }
}
        
- (void)test0608
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a a􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a a\\uDBC0\\uDC00");
    }
}
        
- (void)test0609
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a b");
    }
}
        
- (void)test0610
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a y");
    }
}
        
- (void)test0611
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a z");
    }
}
        
- (void)test0612
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a {"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a {");
    }
}
        
- (void)test0613
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a 􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a \\uDBC0\\uDC00");
    }
}
        
- (void)test0614
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a!", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a!");
    }
}
        
- (void)test0615
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a\"", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\"");
    }
}
        
- (void)test0616
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a&", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a&");
    }
}
        
- (void)test0617
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a'", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a'");
    }
}
        
- (void)test0618
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a-", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a-");
    }
}
        
- (void)test0619
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a/", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a/");
    }
}
        
- (void)test0620
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a0", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a0");
    }
}
        
- (void)test0621
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a1", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a1");
    }
}
        
- (void)test0622
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a9", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a9");
    }
}
        
- (void)test0623
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a<", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a<");
    }
}
        
- (void)test0624
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a=", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a=");
    }
}
        
- (void)test0625
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a>");
    }
}
        
- (void)test0626
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a?", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a?");
    }
}
        
- (void)test0627
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a@", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a@");
    }
}
        
- (void)test0628
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"aa", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE aA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE aA");
    }
}
        
- (void)test0629
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"ab", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE aB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE aB");
    }
}
        
- (void)test0630
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"ay", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE aY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE aY");
    }
}
        
- (void)test0631
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"az", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE aZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE aZ");
    }
}
        
- (void)test0632
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a[", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a["];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a[");
    }
}
        
- (void)test0633
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a`", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a`");
    }
}
        
- (void)test0634
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"aa", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE aa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE aa");
    }
}
        
- (void)test0635
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"ab", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE ab"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE ab");
    }
}
        
- (void)test0636
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"ay", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE ay"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE ay");
    }
}
        
- (void)test0637
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"az", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE az"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE az");
    }
}
        
- (void)test0638
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a{", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a{");
    }
}
        
- (void)test0639
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a􀀀", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE a􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE a\\uDBC0\\uDC00");
    }
}
        
- (void)test0640
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE b");
    }
}
        
- (void)test0641
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"y", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE y");
    }
}
        
- (void)test0642
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"z", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE z");
    }
}
        
- (void)test0643
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"{", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE {"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE {");
    }
}
        
- (void)test0644
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"􀀀", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE 􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE \\uDBC0\\uDC00");
    }
}
        
- (void)test0645
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"!", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE!");
    }
}
        
- (void)test0646
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"\"", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\"");
    }
}
        
- (void)test0647
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"&", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE&");
    }
}
        
- (void)test0648
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"'", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE'");
    }
}
        
- (void)test0649
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"-", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE-");
    }
}
        
- (void)test0650
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"/", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE/");
    }
}
        
- (void)test0651
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"0", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE0");
    }
}
        
- (void)test0652
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"1", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE1");
    }
}
        
- (void)test0653
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"9", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE9");
    }
}
        
- (void)test0654
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"<", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE<");
    }
}
        
- (void)test0655
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"=", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE=");
    }
}
        
- (void)test0656
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", [NSNull null], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE>");
    }
}
        
- (void)test0657
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"?", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE?");
    }
}
        
- (void)test0658
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"@", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE@");
    }
}
        
- (void)test0659
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEA");
    }
}
        
- (void)test0660
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEB");
    }
}
        
- (void)test0661
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"y", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEY");
    }
}
        
- (void)test0662
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"z", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEZ");
    }
}
        
- (void)test0663
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"`", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE`");
    }
}
        
- (void)test0664
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa");
    }
}
        
- (void)test0665
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a�", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u0000");
    }
}
        
- (void)test0666
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a\b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u0008");
    }
}
        
- (void)test0667
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u0009");
    }
}
        
- (void)test0668
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u000A");
    }
}
        
- (void)test0669
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"a%C", (unichar)0x000b], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u000B");
    }
}
        
- (void)test0670
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u000C");
    }
}
        
- (void)test0671
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u000D");
    }
}
        
- (void)test0672
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", [NSString stringWithFormat:@"a%C", (unichar)0x001f], [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\u001F");
    }
}
        
- (void)test0673
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa ");
    }
}
        
- (void)test0674
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa %C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u0000");
    }
}
        
- (void)test0675
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa \b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u0008");
    }
}
        
- (void)test0676
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa \t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u0009");
    }
}
        
- (void)test0677
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa \n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u000A");
    }
}
        
- (void)test0678
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa %C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u000B");
    }
}
        
- (void)test0679
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa \f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u000C");
    }
}
        
- (void)test0680
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa \r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u000D");
    }
}
        
- (void)test0681
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa %C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\u001F");
    }
}
        
- (void)test0682
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa  "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa  ");
    }
}
        
- (void)test0683
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa !"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa !");
    }
}
        
- (void)test0684
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa \""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \"");
    }
}
        
- (void)test0685
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa &"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa &");
    }
}
        
- (void)test0686
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa '"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa '");
    }
}
        
- (void)test0687
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa -"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa -");
    }
}
        
- (void)test0688
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa /"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa /");
    }
}
        
- (void)test0689
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa 0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa 0");
    }
}
        
- (void)test0690
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa 1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa 1");
    }
}
        
- (void)test0691
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa 9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa 9");
    }
}
        
- (void)test0692
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa <"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa <");
    }
}
        
- (void)test0693
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa ="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa =");
    }
}
        
- (void)test0694
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa >");
    }
}
        
- (void)test0695
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa ?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa ?");
    }
}
        
- (void)test0696
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa @"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa @");
    }
}
        
- (void)test0697
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa A");
    }
}
        
- (void)test0698
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa B");
    }
}
        
- (void)test0699
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC");
    }
}
        
- (void)test0700
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u0000");
    }
}
        
- (void)test0701
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u0008");
    }
}
        
- (void)test0702
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u0009");
    }
}
        
- (void)test0703
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u000A");
    }
}
        
- (void)test0704
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u000B");
    }
}
        
- (void)test0705
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u000C");
    }
}
        
- (void)test0706
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u000D");
    }
}
        
- (void)test0707
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\u001F");
    }
}
        
- (void)test0708
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC ");
    }
}
        
- (void)test0709
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC!");
    }
}
        
- (void)test0710
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"");
    }
}
        
- (void)test0711
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"�", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC\"%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"\\u0000");
    }
}
        
- (void)test0712
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\t", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"\\u0009");
    }
}
        
- (void)test0713
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\n", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"\\u000A");
    }
}
        
- (void)test0714
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSString stringWithFormat:@"%C", (unichar)0x000b], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC\"%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"\\u000B");
    }
}
        
- (void)test0715
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\f", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"\\u000C");
    }
}
        
- (void)test0716
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @" ", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\" "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\" ");
    }
}
        
- (void)test0717
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"!", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"!");
    }
}
        
- (void)test0718
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"\"");
    }
}
        
- (void)test0719
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"#", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"#");
    }
}
        
- (void)test0720
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"&", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"&");
    }
}
        
- (void)test0721
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"'", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"'");
    }
}
        
- (void)test0722
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"-", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"-");
    }
}
        
- (void)test0723
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"/", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"/");
    }
}
        
- (void)test0724
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"0", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"0");
    }
}
        
- (void)test0725
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"1", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"1");
    }
}
        
- (void)test0726
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"9", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"9");
    }
}
        
- (void)test0727
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"<", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"<");
    }
}
        
- (void)test0728
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"=", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"=");
    }
}
        
- (void)test0729
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\">");
    }
}
        
- (void)test0730
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"?", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"?");
    }
}
        
- (void)test0731
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"@", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"@");
    }
}
        
- (void)test0732
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"A", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"A");
    }
}
        
- (void)test0733
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"B", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"B");
    }
}
        
- (void)test0734
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"Y");
    }
}
        
- (void)test0735
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"Z");
    }
}
        
- (void)test0736
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"`", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"`");
    }
}
        
- (void)test0737
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"a", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"a");
    }
}
        
- (void)test0738
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"b", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"b");
    }
}
        
- (void)test0739
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"y");
    }
}
        
- (void)test0740
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"z");
    }
}
        
- (void)test0741
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"{", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"{");
    }
}
        
- (void)test0742
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"􀀀", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC\"􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\"\\uDBC0\\uDC00");
    }
}
        
- (void)test0743
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC#");
    }
}
        
- (void)test0744
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC&");
    }
}
        
- (void)test0745
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'");
    }
}
        
- (void)test0746
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"�", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC'%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'\\u0000");
    }
}
        
- (void)test0747
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\t", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'\\u0009");
    }
}
        
- (void)test0748
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\n", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'\\u000A");
    }
}
        
- (void)test0749
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSString stringWithFormat:@"%C", (unichar)0x000b], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC'%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'\\u000B");
    }
}
        
- (void)test0750
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\f", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'\\u000C");
    }
}
        
- (void)test0751
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @" ", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC' ");
    }
}
        
- (void)test0752
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"!", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'!");
    }
}
        
- (void)test0753
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"\"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'\"");
    }
}
        
- (void)test0754
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"&", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'&");
    }
}
        
- (void)test0755
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''");
    }
}
        
- (void)test0756
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC''%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u0000");
    }
}
        
- (void)test0757
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u0008");
    }
}
        
- (void)test0758
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u0009");
    }
}
        
- (void)test0759
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u000A");
    }
}
        
- (void)test0760
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC''%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u000B");
    }
}
        
- (void)test0761
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u000C");
    }
}
        
- (void)test0762
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u000D");
    }
}
        
- (void)test0763
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa PUBLIC''%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\u001F");
    }
}
        
- (void)test0764
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'' ");
    }
}
        
- (void)test0765
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''!");
    }
}
        
- (void)test0766
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\"");
    }
}
        
- (void)test0767
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''#");
    }
}
        
- (void)test0768
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''&");
    }
}
        
- (void)test0769
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'''");
    }
}
        
- (void)test0770
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''(");
    }
}
        
- (void)test0771
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''-");
    }
}
        
- (void)test0772
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''/");
    }
}
        
- (void)test0773
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''0");
    }
}
        
- (void)test0774
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''1");
    }
}
        
- (void)test0775
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''9");
    }
}
        
- (void)test0776
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''<");
    }
}
        
- (void)test0777
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''=");
    }
}
        
- (void)test0778
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''>");
    }
}
        
- (void)test0779
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''?");
    }
}
        
- (void)test0780
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''@");
    }
}
        
- (void)test0781
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''A");
    }
}
        
- (void)test0782
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''B");
    }
}
        
- (void)test0783
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''Y");
    }
}
        
- (void)test0784
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''Z");
    }
}
        
- (void)test0785
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''`");
    }
}
        
- (void)test0786
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''a");
    }
}
        
- (void)test0787
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''b");
    }
}
        
- (void)test0788
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''y");
    }
}
        
- (void)test0789
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''z");
    }
}
        
- (void)test0790
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''{");
    }
}
        
- (void)test0791
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC''􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC''\\uDBC0\\uDC00");
    }
}
        
- (void)test0792
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"(", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'(");
    }
}
        
- (void)test0793
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"-", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'-");
    }
}
        
- (void)test0794
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"/", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'/");
    }
}
        
- (void)test0795
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"0", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'0");
    }
}
        
- (void)test0796
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"1", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'1");
    }
}
        
- (void)test0797
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"9", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'9");
    }
}
        
- (void)test0798
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"<", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'<");
    }
}
        
- (void)test0799
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"=", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'=");
    }
}
        
- (void)test0800
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'>");
    }
}
        
- (void)test0801
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"?", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'?");
    }
}
        
- (void)test0802
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"@", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'@");
    }
}
        
- (void)test0803
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"A", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'A");
    }
}
        
- (void)test0804
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"B", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'B");
    }
}
        
- (void)test0805
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'Y");
    }
}
        
- (void)test0806
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"Z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'Z");
    }
}
        
- (void)test0807
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"`", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'`");
    }
}
        
- (void)test0808
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"a", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'a");
    }
}
        
- (void)test0809
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"b", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'b");
    }
}
        
- (void)test0810
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"y", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'y");
    }
}
        
- (void)test0811
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"z", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'z");
    }
}
        
- (void)test0812
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"{", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'{");
    }
}
        
- (void)test0813
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", @"􀀀", [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC'􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC'\\uDBC0\\uDC00");
    }
}
        
- (void)test0814
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC(");
    }
}
        
- (void)test0815
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC-");
    }
}
        
- (void)test0816
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC/");
    }
}
        
- (void)test0817
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC0");
    }
}
        
- (void)test0818
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC1");
    }
}
        
- (void)test0819
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC9");
    }
}
        
- (void)test0820
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC<");
    }
}
        
- (void)test0821
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC=");
    }
}
        
- (void)test0822
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC>");
    }
}
        
- (void)test0823
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC?");
    }
}
        
- (void)test0824
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC@");
    }
}
        
- (void)test0825
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICA");
    }
}
        
- (void)test0826
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICB");
    }
}
        
- (void)test0827
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICY");
    }
}
        
- (void)test0828
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICZ");
    }
}
        
- (void)test0829
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC`");
    }
}
        
- (void)test0830
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICa");
    }
}
        
- (void)test0831
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICb"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICb");
    }
}
        
- (void)test0832
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICy"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICy");
    }
}
        
- (void)test0833
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLICz"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLICz");
    }
}
        
- (void)test0834
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC{");
    }
}
        
- (void)test0835
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa PUBLIC􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa PUBLIC\\uDBC0\\uDC00");
    }
}
        
- (void)test0836
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM");
    }
}
        
- (void)test0837
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u0000");
    }
}
        
- (void)test0838
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u0008");
    }
}
        
- (void)test0839
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u0009");
    }
}
        
- (void)test0840
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u000A");
    }
}
        
- (void)test0841
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u000B");
    }
}
        
- (void)test0842
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u000C");
    }
}
        
- (void)test0843
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u000D");
    }
}
        
- (void)test0844
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\u001F");
    }
}
        
- (void)test0845
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM ");
    }
}
        
- (void)test0846
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM!");
    }
}
        
- (void)test0847
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"");
    }
}
        
- (void)test0848
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"�", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM\"%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"\\u0000");
    }
}
        
- (void)test0849
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\t", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"\\u0009");
    }
}
        
- (void)test0850
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\n", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"\\u000A");
    }
}
        
- (void)test0851
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSString stringWithFormat:@"%C", (unichar)0x000b], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM\"%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"\\u000B");
    }
}
        
- (void)test0852
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\f", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"\\u000C");
    }
}
        
- (void)test0853
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @" ", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\" "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\" ");
    }
}
        
- (void)test0854
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"!", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"!");
    }
}
        
- (void)test0855
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"\"");
    }
}
        
- (void)test0856
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"#", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"#");
    }
}
        
- (void)test0857
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"&", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"&");
    }
}
        
- (void)test0858
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"'", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"'");
    }
}
        
- (void)test0859
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"-", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"-");
    }
}
        
- (void)test0860
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"/", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"/");
    }
}
        
- (void)test0861
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"0", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"0");
    }
}
        
- (void)test0862
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"1", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"1");
    }
}
        
- (void)test0863
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"9", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"9");
    }
}
        
- (void)test0864
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"<", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"<");
    }
}
        
- (void)test0865
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"=", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"=");
    }
}
        
- (void)test0866
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\">");
    }
}
        
- (void)test0867
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"?", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"?");
    }
}
        
- (void)test0868
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"@", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"@");
    }
}
        
- (void)test0869
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"A", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"A");
    }
}
        
- (void)test0870
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"B", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"B");
    }
}
        
- (void)test0871
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"Y");
    }
}
        
- (void)test0872
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"Z");
    }
}
        
- (void)test0873
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"`", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"`");
    }
}
        
- (void)test0874
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"a", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"a");
    }
}
        
- (void)test0875
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"b", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"b");
    }
}
        
- (void)test0876
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"y");
    }
}
        
- (void)test0877
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"z");
    }
}
        
- (void)test0878
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"{", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"{");
    }
}
        
- (void)test0879
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"􀀀", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM\"􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\"\\uDBC0\\uDC00");
    }
}
        
- (void)test0880
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM#"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM#");
    }
}
        
- (void)test0881
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM&");
    }
}
        
- (void)test0882
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'");
    }
}
        
- (void)test0883
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"�", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM'%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'\\u0000");
    }
}
        
- (void)test0884
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\t", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'\\u0009");
    }
}
        
- (void)test0885
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\n", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'\\u000A");
    }
}
        
- (void)test0886
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSString stringWithFormat:@"%C", (unichar)0x000b], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM'%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'\\u000B");
    }
}
        
- (void)test0887
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\f", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'\\u000C");
    }
}
        
- (void)test0888
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @" ", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM' ");
    }
}
        
- (void)test0889
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"!", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'!");
    }
}
        
- (void)test0890
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"\"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'\"");
    }
}
        
- (void)test0891
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"&", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'&");
    }
}
        
- (void)test0892
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''");
    }
}
        
- (void)test0893
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM''%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u0000");
    }
}
        
- (void)test0894
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''\b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u0008");
    }
}
        
- (void)test0895
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u0009");
    }
}
        
- (void)test0896
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u000A");
    }
}
        
- (void)test0897
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM''%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u000B");
    }
}
        
- (void)test0898
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u000C");
    }
}
        
- (void)test0899
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''\r"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u000D");
    }
}
        
- (void)test0900
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa SYSTEM''%C", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\u001F");
    }
}
        
- (void)test0901
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'' "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'' ");
    }
}
        
- (void)test0902
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''!");
    }
}
        
- (void)test0903
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\"");
    }
}
        
- (void)test0904
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''&");
    }
}
        
- (void)test0905
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'''"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'''");
    }
}
        
- (void)test0906
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''-");
    }
}
        
- (void)test0907
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''/");
    }
}
        
- (void)test0908
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''0");
    }
}
        
- (void)test0909
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''1");
    }
}
        
- (void)test0910
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''9");
    }
}
        
- (void)test0911
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''<");
    }
}
        
- (void)test0912
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''=");
    }
}
        
- (void)test0913
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''>");
    }
}
        
- (void)test0914
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''?");
    }
}
        
- (void)test0915
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''@");
    }
}
        
- (void)test0916
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''A");
    }
}
        
- (void)test0917
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''B");
    }
}
        
- (void)test0918
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''Y");
    }
}
        
- (void)test0919
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''Z");
    }
}
        
- (void)test0920
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''`");
    }
}
        
- (void)test0921
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''a");
    }
}
        
- (void)test0922
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''b");
    }
}
        
- (void)test0923
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''y");
    }
}
        
- (void)test0924
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''z");
    }
}
        
- (void)test0925
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''{");
    }
}
        
- (void)test0926
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM''􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM''\\uDBC0\\uDC00");
    }
}
        
- (void)test0927
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"(", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'(");
    }
}
        
- (void)test0928
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"-", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'-");
    }
}
        
- (void)test0929
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"/", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'/");
    }
}
        
- (void)test0930
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"0", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'0");
    }
}
        
- (void)test0931
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"1", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'1");
    }
}
        
- (void)test0932
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"9", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'9");
    }
}
        
- (void)test0933
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"<", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'<");
    }
}
        
- (void)test0934
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"=", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'=");
    }
}
        
- (void)test0935
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'>");
    }
}
        
- (void)test0936
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"?", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'?");
    }
}
        
- (void)test0937
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"@", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'@");
    }
}
        
- (void)test0938
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"A", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'A");
    }
}
        
- (void)test0939
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"B", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'B");
    }
}
        
- (void)test0940
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'Y");
    }
}
        
- (void)test0941
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"Z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'Z");
    }
}
        
- (void)test0942
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"`", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'`");
    }
}
        
- (void)test0943
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"a", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'a");
    }
}
        
- (void)test0944
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"b", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'b");
    }
}
        
- (void)test0945
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"y", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'y");
    }
}
        
- (void)test0946
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"z", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'z");
    }
}
        
- (void)test0947
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"{", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'{");
    }
}
        
- (void)test0948
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], @"􀀀", @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM'􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM'\\uDBC0\\uDC00");
    }
}
        
- (void)test0949
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM("];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM(");
    }
}
        
- (void)test0950
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM-");
    }
}
        
- (void)test0951
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM/");
    }
}
        
- (void)test0952
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM0");
    }
}
        
- (void)test0953
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM1");
    }
}
        
- (void)test0954
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM9");
    }
}
        
- (void)test0955
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM<");
    }
}
        
- (void)test0956
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM=");
    }
}
        
- (void)test0957
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM>");
    }
}
        
- (void)test0958
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM?");
    }
}
        
- (void)test0959
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM@");
    }
}
        
- (void)test0960
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMA");
    }
}
        
- (void)test0961
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMB");
    }
}
        
- (void)test0962
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMY");
    }
}
        
- (void)test0963
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMZ");
    }
}
        
- (void)test0964
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM`");
    }
}
        
- (void)test0965
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMa");
    }
}
        
- (void)test0966
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMb"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMb");
    }
}
        
- (void)test0967
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMy"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMy");
    }
}
        
- (void)test0968
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEMz"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEMz");
    }
}
        
- (void)test0969
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM{");
    }
}
        
- (void)test0970
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa SYSTEM􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa SYSTEM\\uDBC0\\uDC00");
    }
}
        
- (void)test0971
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa Y");
    }
}
        
- (void)test0972
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa Z");
    }
}
        
- (void)test0973
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa `"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa `");
    }
}
        
- (void)test0974
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a");
    }
}
        
- (void)test0975
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa a%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a\\u0000");
    }
}
        
- (void)test0976
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a\\u0009");
    }
}
        
- (void)test0977
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a\\u000A");
    }
}
        
- (void)test0978
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<!DOCTYPEa a%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a\\u000B");
    }
}
        
- (void)test0979
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a\\u000C");
    }
}
        
- (void)test0980
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a ");
    }
}
        
- (void)test0981
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a!");
    }
}
        
- (void)test0982
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a\"");
    }
}
        
- (void)test0983
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a&");
    }
}
        
- (void)test0984
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a'");
    }
}
        
- (void)test0985
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a-");
    }
}
        
- (void)test0986
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a/");
    }
}
        
- (void)test0987
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a0");
    }
}
        
- (void)test0988
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a1");
    }
}
        
- (void)test0989
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a9");
    }
}
        
- (void)test0990
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a<");
    }
}
        
- (void)test0991
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a=");
    }
}
        
- (void)test0992
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a>");
    }
}
        
- (void)test0993
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a?");
    }
}
        
- (void)test0994
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a@");
    }
}
        
- (void)test0995
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa aA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa aA");
    }
}
        
- (void)test0996
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa aB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa aB");
    }
}
        
- (void)test0997
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa aY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa aY");
    }
}
        
- (void)test0998
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa aZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa aZ");
    }
}
        
- (void)test0999
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a`");
    }
}
        
- (void)test1000
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa aa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa aa");
    }
}
        
- (void)test1001
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa ab"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa ab");
    }
}
        
- (void)test1002
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa ay"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa ay");
    }
}
        
- (void)test1003
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa az"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa az");
    }
}
        
- (void)test1004
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a{");
    }
}
        
- (void)test1005
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa a􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa a\\uDBC0\\uDC00");
    }
}
        
- (void)test1006
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa b");
    }
}
        
- (void)test1007
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa y");
    }
}
        
- (void)test1008
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa z");
    }
}
        
- (void)test1009
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa {"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa {");
    }
}
        
- (void)test1010
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa 􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa \\uDBC0\\uDC00");
    }
}
        
- (void)test1011
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a!", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa!");
    }
}
        
- (void)test1012
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a\"", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\"");
    }
}
        
- (void)test1013
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a&", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa&");
    }
}
        
- (void)test1014
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a'", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa'");
    }
}
        
- (void)test1015
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a-", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa-");
    }
}
        
- (void)test1016
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a/", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa/");
    }
}
        
- (void)test1017
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a0", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa0");
    }
}
        
- (void)test1018
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a1", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa1");
    }
}
        
- (void)test1019
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a9", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa9");
    }
}
        
- (void)test1020
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a<", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa<");
    }
}
        
- (void)test1021
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a=", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa=");
    }
}
        
- (void)test1022
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"DOCTYPE", @"a", [NSNull null], [NSNull null], @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa>");
    }
}
        
- (void)test1023
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a?", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa?");
    }
}
        
- (void)test1024
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a@", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa@");
    }
}
        
- (void)test1025
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"aa", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEaA"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEaA");
    }
}
        
- (void)test1026
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"ab", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEaB"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEaB");
    }
}
        
- (void)test1027
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"ay", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEaY"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEaY");
    }
}
        
- (void)test1028
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"az", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEaZ"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEaZ");
    }
}
        
- (void)test1029
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a[", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa["];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa[");
    }
}
        
- (void)test1030
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a`", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa`");
    }
}
        
- (void)test1031
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"aa", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEaa"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEaa");
    }
}
        
- (void)test1032
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"ab", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEab"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEab");
    }
}
        
- (void)test1033
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"ay", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEay"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEay");
    }
}
        
- (void)test1034
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"az", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEaz"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEaz");
    }
}
        
- (void)test1035
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a{", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa{");
    }
}
        
- (void)test1036
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"a􀀀", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEa􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEa\\uDBC0\\uDC00");
    }
}
        
- (void)test1037
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"b", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEb"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEb");
    }
}
        
- (void)test1038
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"y", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEy"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEy");
    }
}
        
- (void)test1039
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"z", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPEz"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPEz");
    }
}
        
- (void)test1040
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"{", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE{");
    }
}
        
- (void)test1041
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"DOCTYPE", @"􀀀", [NSNull null], [NSNull null], @NO]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!DOCTYPE􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!DOCTYPE\\uDBC0\\uDC00");
    }
}
        
- (void)test1042
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!Y");
    }
}
        
- (void)test1043
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!Z");
    }
}
        
- (void)test1044
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!`");
    }
}
        
- (void)test1045
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!a");
    }
}
        
- (void)test1046
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!b");
    }
}
        
- (void)test1047
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!y");
    }
}
        
- (void)test1048
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!z");
    }
}
        
- (void)test1049
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!{");
    }
}
        
- (void)test1050
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<!􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<!\\uDBC0\\uDC00");
    }
}
        
- (void)test1051
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<\"");
    }
}
        
- (void)test1052
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<&");
    }
}
        
- (void)test1053
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<'");
    }
}
        
- (void)test1054
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<-");
    }
}
        
- (void)test1055
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<."]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<."];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<.");
    }
}
        
- (void)test1056
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"</"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</");
    }
}
        
- (void)test1057
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"</%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</\\u0000");
    }
}
        
- (void)test1058
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</\\u0009");
    }
}
        
- (void)test1059
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</\\u000A");
    }
}
        
- (void)test1060
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@"%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"</%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</\\u000B");
    }
}
        
- (void)test1061
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</\\u000C");
    }
}
        
- (void)test1062
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @" "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</ "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</ ");
    }
}
        
- (void)test1063
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</!");
    }
}
        
- (void)test1064
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</\"");
    }
}
        
- (void)test1065
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</&");
    }
}
        
- (void)test1066
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</'");
    }
}
        
- (void)test1067
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</-");
    }
}
        
- (void)test1068
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<//"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<//");
    }
}
        
- (void)test1069
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</0");
    }
}
        
- (void)test1070
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</1");
    }
}
        
- (void)test1071
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</9");
    }
}
        
- (void)test1072
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</<");
    }
}
        
- (void)test1073
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</=");
    }
}
        
- (void)test1074
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError"]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</>");
    }
}
        
- (void)test1075
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</?");
    }
}
        
- (void)test1076
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</@");
    }
}
        
- (void)test1077
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</A>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</A>");
    }
}
        
- (void)test1078
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</B>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</B>");
    }
}
        
- (void)test1079
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</Y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</Y>");
    }
}
        
- (void)test1080
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</Z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</Z>");
    }
}
        
- (void)test1081
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"["]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</["];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</[");
    }
}
        
- (void)test1082
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</`");
    }
}
        
- (void)test1083
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</a>");
    }
}
        
- (void)test1084
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</b>");
    }
}
        
- (void)test1085
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</y>");
    }
}
        
- (void)test1086
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"EndTag", @"z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</z>");
    }
}
        
- (void)test1087
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</{");
    }
}
        
- (void)test1088
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"</􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"</\\uDBC0\\uDC00");
    }
}
        
- (void)test1089
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<0");
    }
}
        
- (void)test1090
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<1");
    }
}
        
- (void)test1091
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<9");
    }
}
        
- (void)test1092
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<"], @"ParseError", @[@"Character", @"<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<<");
    }
}
        
- (void)test1093
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<=");
    }
}
        
- (void)test1094
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<>"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<>");
    }
}
        
- (void)test1095
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?");
    }
}
        
- (void)test1096
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?�"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<?%C", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?\\u0000");
    }
}
        
- (void)test1097
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?\t"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?\t"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?\\u0009");
    }
}
        
- (void)test1098
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?\n"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?\n"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?\\u000A");
    }
}
        
- (void)test1099
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"Comment", [NSString stringWithFormat:@"?%C", (unichar)0x000b]]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<?%C", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?\\u000B");
    }
}
        
- (void)test1100
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?\f"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?\f"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?\\u000C");
    }
}
        
- (void)test1101
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"? "]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<? "];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<? ");
    }
}
        
- (void)test1102
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?!"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?!"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?!");
    }
}
        
- (void)test1103
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?\""]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?\""];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?\"");
    }
}
        
- (void)test1104
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?&"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?&"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?&");
    }
}
        
- (void)test1105
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?'"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?'"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?'");
    }
}
        
- (void)test1106
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?-"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?-"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?-");
    }
}
        
- (void)test1107
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?/"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?/"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?/");
    }
}
        
- (void)test1108
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?0"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?0"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?0");
    }
}
        
- (void)test1109
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?1"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?1"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?1");
    }
}
        
- (void)test1110
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?9"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?9"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?9");
    }
}
        
- (void)test1111
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?<"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?<"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?<");
    }
}
        
- (void)test1112
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?=");
    }
}
        
- (void)test1113
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?>");
    }
}
        
- (void)test1114
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"??"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<??"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<??");
    }
}
        
- (void)test1115
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?@");
    }
}
        
- (void)test1116
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?A");
    }
}
        
- (void)test1117
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?B");
    }
}
        
- (void)test1118
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?Y");
    }
}
        
- (void)test1119
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?Z");
    }
}
        
- (void)test1120
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?`");
    }
}
        
- (void)test1121
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?a");
    }
}
        
- (void)test1122
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?b");
    }
}
        
- (void)test1123
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?y");
    }
}
        
- (void)test1124
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?z");
    }
}
        
- (void)test1125
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?{");
    }
}
        
- (void)test1126
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Comment", @"?􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<?􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<?\\uDBC0\\uDC00");
    }
}
        
- (void)test1127
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<@");
    }
}
        
- (void)test1128
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<A>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<A>");
    }
}
        
- (void)test1129
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"b", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<B>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<B>");
    }
}
        
- (void)test1130
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"y", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<Y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<Y>");
    }
}
        
- (void)test1131
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"z", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<Z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<Z>");
    }
}
        
- (void)test1132
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<["]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<["];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<[");
    }
}
        
- (void)test1133
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<`");
    }
}
        
- (void)test1134
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a>");
    }
}
        
- (void)test1135
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a�", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a%C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u0000>");
    }
}
        
- (void)test1136
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a\b", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a\b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u0008>");
    }
}
        
- (void)test1137
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a\t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u0009>");
    }
}
        
- (void)test1138
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a\n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u000A>");
    }
}
        
- (void)test1139
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", [NSString stringWithFormat:@"a%C", (unichar)0x000b], @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a%C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u000B>");
    }
}
        
- (void)test1140
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a\f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u000C>");
    }
}
        
- (void)test1141
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a\r>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u000D>");
    }
}
        
- (void)test1142
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", [NSString stringWithFormat:@"a%C", (unichar)0x001f], @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a%C>", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\u001F>");
    }
}
        
- (void)test1143
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a >");
    }
}
        
- (void)test1144
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"�": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a %C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u0000>");
    }
}
        
- (void)test1145
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"\b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a \b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u0008>");
    }
}
        
- (void)test1146
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a \t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u0009>");
    }
}
        
- (void)test1147
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a \n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u000A>");
    }
}
        
- (void)test1148
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{[NSString stringWithFormat:@"%C", (unichar)0x000b]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a %C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u000B>");
    }
}
        
- (void)test1149
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a \f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u000C>");
    }
}
        
- (void)test1150
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a \r>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u000D>");
    }
}
        
- (void)test1151
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{[NSString stringWithFormat:@"%C", (unichar)0x001f]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a %C>", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\u001F>");
    }
}
        
- (void)test1152
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a  >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a  >");
    }
}
        
- (void)test1153
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"!": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a !>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a !>");
    }
}
        
- (void)test1154
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"\"": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a \">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \">");
    }
}
        
- (void)test1155
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"#": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a #>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a #>");
    }
}
        
- (void)test1156
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"&": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a &>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a &>");
    }
}
        
- (void)test1157
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"'": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a '>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a '>");
    }
}
        
- (void)test1158
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"(": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a (>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a (>");
    }
}
        
- (void)test1159
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"-": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a ->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a ->");
    }
}
        
- (void)test1160
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@".": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a .>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a .>");
    }
}
        
- (void)test1161
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a />"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a />");
    }
}
        
- (void)test1162
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"0": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a 0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a 0>");
    }
}
        
- (void)test1163
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"1": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a 1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a 1>");
    }
}
        
- (void)test1164
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"9": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a 9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a 9>");
    }
}
        
- (void)test1165
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"<": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a <>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a <>");
    }
}
        
- (void)test1166
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"=": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a =>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a =>");
    }
}
        
- (void)test1167
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a >");
    }
}
        
- (void)test1168
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"?": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a ?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a ?>");
    }
}
        
- (void)test1169
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"@": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a @>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a @>");
    }
}
        
- (void)test1170
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a A>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a A>");
    }
}
        
- (void)test1171
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a B>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a B>");
    }
}
        
- (void)test1172
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a Y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a Y>");
    }
}
        
- (void)test1173
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a Z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a Z>");
    }
}
        
- (void)test1174
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"[": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a [>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a [>");
    }
}
        
- (void)test1175
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"`": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a `>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a `>");
    }
}
        
- (void)test1176
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a>");
    }
}
        
- (void)test1177
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a�": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a%C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u0000>");
    }
}
        
- (void)test1178
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a\b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a\b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u0008>");
    }
}
        
- (void)test1179
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a\t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u0009>");
    }
}
        
- (void)test1180
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a\n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u000A>");
    }
}
        
- (void)test1181
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{[NSString stringWithFormat:@"a%C", (unichar)0x000b]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a%C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u000B>");
    }
}
        
- (void)test1182
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a\f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u000C>");
    }
}
        
- (void)test1183
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a\r>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u000D>");
    }
}
        
- (void)test1184
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{[NSString stringWithFormat:@"a%C", (unichar)0x001f]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a%C>", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\u001F>");
    }
}
        
- (void)test1185
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a >");
    }
}
        
- (void)test1186
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"�": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a %C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u0000>");
    }
}
        
- (void)test1187
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"\b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a \b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u0008>");
    }
}
        
- (void)test1188
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a \t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u0009>");
    }
}
        
- (void)test1189
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a \n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u000A>");
    }
}
        
- (void)test1190
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", [NSString stringWithFormat:@"%C", (unichar)0x000b]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a %C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u000B>");
    }
}
        
- (void)test1191
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a \f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u000C>");
    }
}
        
- (void)test1192
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a \r>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u000D>");
    }
}
        
- (void)test1193
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", [NSString stringWithFormat:@"%C", (unichar)0x001f]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a %C>", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\u001F>");
    }
}
        
- (void)test1194
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a  >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a  >");
    }
}
        
- (void)test1195
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"!": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a !>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a !>");
    }
}
        
- (void)test1196
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"\"": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a \">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \">");
    }
}
        
- (void)test1197
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"#": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a #>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a #>");
    }
}
        
- (void)test1198
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"&": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a &>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a &>");
    }
}
        
- (void)test1199
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"'": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a '>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a '>");
    }
}
        
- (void)test1200
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"(": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a (>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a (>");
    }
}
        
- (void)test1201
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"-": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a ->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a ->");
    }
}
        
- (void)test1202
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @".": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a .>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a .>");
    }
}
        
- (void)test1203
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a />"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a />");
    }
}
        
- (void)test1204
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"0": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a 0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a 0>");
    }
}
        
- (void)test1205
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"1": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a 1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a 1>");
    }
}
        
- (void)test1206
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"9": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a 9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a 9>");
    }
}
        
- (void)test1207
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"<": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a <>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a <>");
    }
}
        
- (void)test1208
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a =>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a =>");
    }
}
        
- (void)test1209
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a >");
    }
}
        
- (void)test1210
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"?": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a ?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a ?>");
    }
}
        
- (void)test1211
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"@": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a @>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a @>");
    }
}
        
- (void)test1212
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a A>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a A>");
    }
}
        
- (void)test1213
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a B>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a B>");
    }
}
        
- (void)test1214
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a Y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a Y>");
    }
}
        
- (void)test1215
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a Z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a Z>");
    }
}
        
- (void)test1216
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"[": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a [>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a [>");
    }
}
        
- (void)test1217
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"`": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a `>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a `>");
    }
}
        
- (void)test1218
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a a>");
    }
}
        
- (void)test1219
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a b>");
    }
}
        
- (void)test1220
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a y>");
    }
}
        
- (void)test1221
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a z>");
    }
}
        
- (void)test1222
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"{": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a {>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a {>");
    }
}
        
- (void)test1223
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"", @"􀀀": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a 􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a \\uDBC0\\uDC00>");
    }
}
        
- (void)test1224
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a!": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a!>");
    }
}
        
- (void)test1225
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a\"": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\">");
    }
}
        
- (void)test1226
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a#": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a#>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a#>");
    }
}
        
- (void)test1227
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a&": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a&>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a&>");
    }
}
        
- (void)test1228
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a'": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a'>");
    }
}
        
- (void)test1229
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a(": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a(>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a(>");
    }
}
        
- (void)test1230
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a-": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a->");
    }
}
        
- (void)test1231
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a.": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a.>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a.>");
    }
}
        
- (void)test1232
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a/>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a/>");
    }
}
        
- (void)test1233
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a0": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a0>");
    }
}
        
- (void)test1234
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a1": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a1>");
    }
}
        
- (void)test1235
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a9": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a9>");
    }
}
        
- (void)test1236
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a<": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a<>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a<>");
    }
}
        
- (void)test1237
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=>");
    }
}
        
- (void)test1238
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"�"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=%C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u0000>");
    }
}
        
- (void)test1239
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"\b"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u0008>");
    }
}
        
- (void)test1240
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u0009>");
    }
}
        
- (void)test1241
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u000A>");
    }
}
        
- (void)test1242
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": [NSString stringWithFormat:@"%C", (unichar)0x000b]}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=%C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u000B>");
    }
}
        
- (void)test1243
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u000C>");
    }
}
        
- (void)test1244
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\r>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u000D>");
    }
}
        
- (void)test1245
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": [NSString stringWithFormat:@"%C", (unichar)0x001f]}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=%C>", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\u001F>");
    }
}
        
- (void)test1246
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a= >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a= >");
    }
}
        
- (void)test1247
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"!"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=!>");
    }
}
        
- (void)test1248
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\">");
    }
}
        
- (void)test1249
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"�"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=\"%C\">", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\\u0000\">");
    }
}
        
- (void)test1250
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"\t"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"\t\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\\u0009\">");
    }
}
        
- (void)test1251
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"\n"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"\n\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\\u000A\">");
    }
}
        
- (void)test1252
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": [NSString stringWithFormat:@"%C", (unichar)0x000b]}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=\"%C\">", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\\u000B\">");
    }
}
        
- (void)test1253
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"\f"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"\f\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\\u000C\">");
    }
}
        
- (void)test1254
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @" "}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\" \">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\" \">");
    }
}
        
- (void)test1255
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"!"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"!\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"!\">");
    }
}
        
- (void)test1256
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\">");
    }
}
        
- (void)test1257
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"#"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"#\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"#\">");
    }
}
        
- (void)test1258
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"%"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"%\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"%\">");
    }
}
        
- (void)test1259
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"&"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"&\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"&\">");
    }
}
        
- (void)test1260
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"'"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"'\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"'\">");
    }
}
        
- (void)test1261
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"-"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"-\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"-\">");
    }
}
        
- (void)test1262
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"/"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"/\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"/\">");
    }
}
        
- (void)test1263
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"0"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"0\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"0\">");
    }
}
        
- (void)test1264
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"1"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"1\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"1\">");
    }
}
        
- (void)test1265
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"9"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"9\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"9\">");
    }
}
        
- (void)test1266
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"<"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"<\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"<\">");
    }
}
        
- (void)test1267
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"="}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"=\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"=\">");
    }
}
        
- (void)test1268
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @">"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\">\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\">\">");
    }
}
        
- (void)test1269
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"?"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"?\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"?\">");
    }
}
        
- (void)test1270
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"@"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"@\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"@\">");
    }
}
        
- (void)test1271
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"A"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"A\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"A\">");
    }
}
        
- (void)test1272
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"B"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"B\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"B\">");
    }
}
        
- (void)test1273
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"Y"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"Y\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"Y\">");
    }
}
        
- (void)test1274
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"Z"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"Z\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"Z\">");
    }
}
        
- (void)test1275
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"`"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"`\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"`\">");
    }
}
        
- (void)test1276
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"a\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"a\">");
    }
}
        
- (void)test1277
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"b"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"b\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"b\">");
    }
}
        
- (void)test1278
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"y"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"y\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"y\">");
    }
}
        
- (void)test1279
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"z"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"z\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"z\">");
    }
}
        
- (void)test1280
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"{"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"{\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"{\">");
    }
}
        
- (void)test1281
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"􀀀"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=\"􀀀\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\"\\uDBC0\\uDC00\">");
    }
}
        
- (void)test1282
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"#"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=#>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=#>");
    }
}
        
- (void)test1283
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"%"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=%>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=%>");
    }
}
        
- (void)test1284
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"&"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=&>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=&>");
    }
}
        
- (void)test1285
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''>");
    }
}
        
- (void)test1286
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"�"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a='%C'>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='\\u0000'>");
    }
}
        
- (void)test1287
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"\t"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='\t'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='\\u0009'>");
    }
}
        
- (void)test1288
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"\n"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='\n'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='\\u000A'>");
    }
}
        
- (void)test1289
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": [NSString stringWithFormat:@"%C", (unichar)0x000b]}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a='%C'>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='\\u000B'>");
    }
}
        
- (void)test1290
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"\f"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='\f'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='\\u000C'>");
    }
}
        
- (void)test1291
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @" "}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=' '>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=' '>");
    }
}
        
- (void)test1292
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"!"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='!'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='!'>");
    }
}
        
- (void)test1293
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"\""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='\"'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='\"'>");
    }
}
        
- (void)test1294
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"%"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='%'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='%'>");
    }
}
        
- (void)test1295
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"&"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='&'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='&'>");
    }
}
        
- (void)test1296
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''>");
    }
}
        
- (void)test1297
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"�": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=''%C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u0000>");
    }
}
        
- (void)test1298
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"\b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''\b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u0008>");
    }
}
        
- (void)test1299
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''\t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u0009>");
    }
}
        
- (void)test1300
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''\n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u000A>");
    }
}
        
- (void)test1301
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", [NSString stringWithFormat:@"%C", (unichar)0x000b]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=''%C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u000B>");
    }
}
        
- (void)test1302
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''\f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u000C>");
    }
}
        
- (void)test1303
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''\r>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u000D>");
    }
}
        
- (void)test1304
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", [NSString stringWithFormat:@"%C", (unichar)0x001f]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=''%C>", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\u001F>");
    }
}
        
- (void)test1305
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='' >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='' >");
    }
}
        
- (void)test1306
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"!": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''!>");
    }
}
        
- (void)test1307
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"\"": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\">");
    }
}
        
- (void)test1308
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"&": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''&>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''&>");
    }
}
        
- (void)test1309
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"'": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='''>");
    }
}
        
- (void)test1310
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"-": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''->");
    }
}
        
- (void)test1311
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @".": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''.>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''.>");
    }
}
        
- (void)test1312
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''/>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''/>");
    }
}
        
- (void)test1313
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"0": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''0>");
    }
}
        
- (void)test1314
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"1": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''1>");
    }
}
        
- (void)test1315
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"9": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''9>");
    }
}
        
- (void)test1316
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"<": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''<>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''<>");
    }
}
        
- (void)test1317
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"=": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''=>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''=>");
    }
}
        
- (void)test1318
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''>");
    }
}
        
- (void)test1319
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"?": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''?>");
    }
}
        
- (void)test1320
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"@": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''@>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''@>");
    }
}
        
- (void)test1321
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''A>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''A>");
    }
}
        
- (void)test1322
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''B>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''B>");
    }
}
        
- (void)test1323
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''Y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''Y>");
    }
}
        
- (void)test1324
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''Z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''Z>");
    }
}
        
- (void)test1325
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"`": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''`>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''`>");
    }
}
        
- (void)test1326
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''a>");
    }
}
        
- (void)test1327
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''b>");
    }
}
        
- (void)test1328
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''y>");
    }
}
        
- (void)test1329
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''z>");
    }
}
        
- (void)test1330
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"{": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''{>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''{>");
    }
}
        
- (void)test1331
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"", @"􀀀": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=''􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=''\\uDBC0\\uDC00>");
    }
}
        
- (void)test1332
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"("}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='('>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='('>");
    }
}
        
- (void)test1333
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"-"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='-'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='-'>");
    }
}
        
- (void)test1334
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"/"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='/'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='/'>");
    }
}
        
- (void)test1335
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"0"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='0'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='0'>");
    }
}
        
- (void)test1336
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"1"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='1'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='1'>");
    }
}
        
- (void)test1337
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"9"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='9'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='9'>");
    }
}
        
- (void)test1338
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"<"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='<'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='<'>");
    }
}
        
- (void)test1339
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"="}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='='>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='='>");
    }
}
        
- (void)test1340
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @">"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='>'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='>'>");
    }
}
        
- (void)test1341
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"?"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='?'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='?'>");
    }
}
        
- (void)test1342
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"@"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='@'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='@'>");
    }
}
        
- (void)test1343
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"A"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='A'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='A'>");
    }
}
        
- (void)test1344
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"B"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='B'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='B'>");
    }
}
        
- (void)test1345
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"Y"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='Y'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='Y'>");
    }
}
        
- (void)test1346
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"Z"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='Z'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='Z'>");
    }
}
        
- (void)test1347
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"`"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='`'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='`'>");
    }
}
        
- (void)test1348
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='a'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='a'>");
    }
}
        
- (void)test1349
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"b"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='b'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='b'>");
    }
}
        
- (void)test1350
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"y"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='y'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='y'>");
    }
}
        
- (void)test1351
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"z"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='z'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='z'>");
    }
}
        
- (void)test1352
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"{"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='{'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='{'>");
    }
}
        
- (void)test1353
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"􀀀"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a='􀀀'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a='\\uDBC0\\uDC00'>");
    }
}
        
- (void)test1354
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"("}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=(>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=(>");
    }
}
        
- (void)test1355
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"-"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=->");
    }
}
        
- (void)test1356
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"/"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=/>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=/>");
    }
}
        
- (void)test1357
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"0"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=0>");
    }
}
        
- (void)test1358
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"1"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=1>");
    }
}
        
- (void)test1359
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"9"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=9>");
    }
}
        
- (void)test1360
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"<"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=<>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=<>");
    }
}
        
- (void)test1361
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"="}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a==>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a==>");
    }
}
        
- (void)test1362
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=>");
    }
}
        
- (void)test1363
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"?"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=?>");
    }
}
        
- (void)test1364
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"@"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=@>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=@>");
    }
}
        
- (void)test1365
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"A"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=A>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=A>");
    }
}
        
- (void)test1366
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"B"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=B>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=B>");
    }
}
        
- (void)test1367
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"Y"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=Y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=Y>");
    }
}
        
- (void)test1368
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"Z"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=Z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=Z>");
    }
}
        
- (void)test1369
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"`"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=`>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=`>");
    }
}
        
- (void)test1370
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a>");
    }
}
        
- (void)test1371
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"a�"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=a%C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u0000>");
    }
}
        
- (void)test1372
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"a\b"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a\b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u0008>");
    }
}
        
- (void)test1373
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a\t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u0009>");
    }
}
        
- (void)test1374
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a\n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u000A>");
    }
}
        
- (void)test1375
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": [NSString stringWithFormat:@"a%C", (unichar)0x000b]}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=a%C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u000B>");
    }
}
        
- (void)test1376
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a\f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u000C>");
    }
}
        
- (void)test1377
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a\r>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u000D>");
    }
}
        
- (void)test1378
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": [NSString stringWithFormat:@"a%C", (unichar)0x001f]}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a a=a%C>", (unichar)0x001f]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\u001F>");
    }
}
        
- (void)test1379
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a >");
    }
}
        
- (void)test1380
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a!"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a!>");
    }
}
        
- (void)test1381
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"a\""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\">");
    }
}
        
- (void)test1382
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a#"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a#>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a#>");
    }
}
        
- (void)test1383
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a%"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a%>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a%>");
    }
}
        
- (void)test1384
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a&"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a&>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a&>");
    }
}
        
- (void)test1385
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"a'"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a'>");
    }
}
        
- (void)test1386
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a("}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a(>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a(>");
    }
}
        
- (void)test1387
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a-"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a->");
    }
}
        
- (void)test1388
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a/"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a/>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a/>");
    }
}
        
- (void)test1389
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a0"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a0>");
    }
}
        
- (void)test1390
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a1"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a1>");
    }
}
        
- (void)test1391
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a9"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a9>");
    }
}
        
- (void)test1392
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"a<"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a<>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a<>");
    }
}
        
- (void)test1393
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"a="}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a=>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a=>");
    }
}
        
- (void)test1394
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a>");
    }
}
        
- (void)test1395
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a?"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a?>");
    }
}
        
- (void)test1396
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a@"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a@>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a@>");
    }
}
        
- (void)test1397
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"aA"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=aA>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=aA>");
    }
}
        
- (void)test1398
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"aB"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=aB>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=aB>");
    }
}
        
- (void)test1399
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"aY"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=aY>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=aY>");
    }
}
        
- (void)test1400
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"aZ"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=aZ>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=aZ>");
    }
}
        
- (void)test1401
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @"a`"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a`>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a`>");
    }
}
        
- (void)test1402
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"aa"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=aa>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=aa>");
    }
}
        
- (void)test1403
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"ab"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=ab>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=ab>");
    }
}
        
- (void)test1404
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"ay"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=ay>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=ay>");
    }
}
        
- (void)test1405
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"az"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=az>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=az>");
    }
}
        
- (void)test1406
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a{"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a{>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a{>");
    }
}
        
- (void)test1407
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"a􀀀"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=a􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=a\\uDBC0\\uDC00>");
    }
}
        
- (void)test1408
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"b"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=b>");
    }
}
        
- (void)test1409
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"y"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=y>");
    }
}
        
- (void)test1410
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"z"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=z>");
    }
}
        
- (void)test1411
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"{"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a={>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a={>");
    }
}
        
- (void)test1412
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @"􀀀"}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a=􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a=\\uDBC0\\uDC00>");
    }
}
        
- (void)test1413
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a>");
    }
}
        
- (void)test1414
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a?": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a?>");
    }
}
        
- (void)test1415
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a@": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a@>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a@>");
    }
}
        
- (void)test1416
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"aa": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a aA>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a aA>");
    }
}
        
- (void)test1417
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"ab": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a aB>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a aB>");
    }
}
        
- (void)test1418
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"ay": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a aY>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a aY>");
    }
}
        
- (void)test1419
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"az": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a aZ>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a aZ>");
    }
}
        
- (void)test1420
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a[": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a[>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a[>");
    }
}
        
- (void)test1421
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a`": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a`>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a`>");
    }
}
        
- (void)test1422
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"aa": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a aa>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a aa>");
    }
}
        
- (void)test1423
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"ab": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a ab>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a ab>");
    }
}
        
- (void)test1424
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"ay": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a ay>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a ay>");
    }
}
        
- (void)test1425
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"az": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a az>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a az>");
    }
}
        
- (void)test1426
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a{": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a{>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a{>");
    }
}
        
- (void)test1427
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"a􀀀": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a a􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a a\\uDBC0\\uDC00>");
    }
}
        
- (void)test1428
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a b>");
    }
}
        
- (void)test1429
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a y>");
    }
}
        
- (void)test1430
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a z>");
    }
}
        
- (void)test1431
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"{": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a {>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a {>");
    }
}
        
- (void)test1432
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{@"􀀀": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a 􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a \\uDBC0\\uDC00>");
    }
}
        
- (void)test1433
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a!", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a!>");
    }
}
        
- (void)test1434
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a\"", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\">");
    }
}
        
- (void)test1435
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a&", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a&>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a&>");
    }
}
        
- (void)test1436
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a'", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a'>");
    }
}
        
- (void)test1437
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a-", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a->");
    }
}
        
- (void)test1438
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a.", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a.>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a.>");
    }
}
        
- (void)test1439
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/>");
    }
}
        
- (void)test1440
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"�": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a/%C>", (unichar)0x0000]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/\\u0000>");
    }
}
        
- (void)test1441
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/\t>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/\\u0009>");
    }
}
        
- (void)test1442
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/\n>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/\\u000A>");
    }
}
        
- (void)test1443
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{[NSString stringWithFormat:@"%C", (unichar)0x000b]: @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:[NSString stringWithFormat:@"<a/%C>", (unichar)0x000b]];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/\\u000B>");
    }
}
        
- (void)test1444
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/\f>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/\\u000C>");
    }
}
        
- (void)test1445
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/ >"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/ >");
    }
}
        
- (void)test1446
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"!": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/!>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/!>");
    }
}
        
- (void)test1447
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"\"": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/\">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/\">");
    }
}
        
- (void)test1448
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"&": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/&>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/&>");
    }
}
        
- (void)test1449
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"'": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/'>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/'>");
    }
}
        
- (void)test1450
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"-": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/->"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/->");
    }
}
        
- (void)test1451
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a//>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a//>");
    }
}
        
- (void)test1452
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"0": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/0>");
    }
}
        
- (void)test1453
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"1": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/1>");
    }
}
        
- (void)test1454
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"9": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/9>");
    }
}
        
- (void)test1455
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"<": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/<>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/<>");
    }
}
        
- (void)test1456
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @"ParseError", @[@"StartTag", @"a", @{@"=": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/=>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/=>");
    }
}
        
- (void)test1457
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}, @YES]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/>");
    }
}
        
- (void)test1458
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"?": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/?>");
    }
}
        
- (void)test1459
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"@": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/@>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/@>");
    }
}
        
- (void)test1460
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/A>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/A>");
    }
}
        
- (void)test1461
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/B>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/B>");
    }
}
        
- (void)test1462
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/Y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/Y>");
    }
}
        
- (void)test1463
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/Z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/Z>");
    }
}
        
- (void)test1464
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"`": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/`>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/`>");
    }
}
        
- (void)test1465
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"a": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/a>");
    }
}
        
- (void)test1466
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"b": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/b>");
    }
}
        
- (void)test1467
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"y": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/y>");
    }
}
        
- (void)test1468
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"z": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/z>");
    }
}
        
- (void)test1469
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"{": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/{>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/{>");
    }
}
        
- (void)test1470
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"StartTag", @"a", @{@"􀀀": @""}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a/􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a/\\uDBC0\\uDC00>");
    }
}
        
- (void)test1471
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a0", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a0>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a0>");
    }
}
        
- (void)test1472
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a1", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a1>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a1>");
    }
}
        
- (void)test1473
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a9", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a9>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a9>");
    }
}
        
- (void)test1474
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a<", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a<>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a<>");
    }
}
        
- (void)test1475
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a=", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a=>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a=>");
    }
}
        
- (void)test1476
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a>");
    }
}
        
- (void)test1477
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a?", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a?>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a?>");
    }
}
        
- (void)test1478
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a@", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a@>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a@>");
    }
}
        
- (void)test1479
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"aa", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<aA>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<aA>");
    }
}
        
- (void)test1480
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"ab", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<aB>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<aB>");
    }
}
        
- (void)test1481
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"ay", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<aY>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<aY>");
    }
}
        
- (void)test1482
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"az", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<aZ>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<aZ>");
    }
}
        
- (void)test1483
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a[", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a[>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a[>");
    }
}
        
- (void)test1484
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a`", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a`>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a`>");
    }
}
        
- (void)test1485
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"aa", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<aa>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<aa>");
    }
}
        
- (void)test1486
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"ab", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<ab>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<ab>");
    }
}
        
- (void)test1487
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"ay", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<ay>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<ay>");
    }
}
        
- (void)test1488
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"az", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<az>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<az>");
    }
}
        
- (void)test1489
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a{", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a{>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a{>");
    }
}
        
- (void)test1490
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"a􀀀", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<a􀀀>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<a\\uDBC0\\uDC00>");
    }
}
        
- (void)test1491
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"b", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<b>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<b>");
    }
}
        
- (void)test1492
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"y", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<y>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<y>");
    }
}
        
- (void)test1493
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"StartTag", @"z", @{}]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<z>"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<z>");
    }
}
        
- (void)test1494
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<{");
    }
}
        
- (void)test1495
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@"ParseError", @[@"Character", @"<􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"<􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"<\\uDBC0\\uDC00");
    }
}
        
- (void)test1496
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"="]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"="];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"=");
    }
}
        
- (void)test1497
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @">"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@">"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @">");
    }
}
        
- (void)test1498
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"?"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"?"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"?");
    }
}
        
- (void)test1499
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"@"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"@"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"@");
    }
}
        
- (void)test1500
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"A"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"A"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"A");
    }
}
        
- (void)test1501
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"B"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"B"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"B");
    }
}
        
- (void)test1502
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Y");
    }
}
        
- (void)test1503
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"Z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"Z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"Z");
    }
}
        
- (void)test1504
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"`"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"`"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"`");
    }
}
        
- (void)test1505
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"a"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"a"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"a");
    }
}
        
- (void)test1506
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"b"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"b"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"b");
    }
}
        
- (void)test1507
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"y"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"y"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"y");
    }
}
        
- (void)test1508
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"z"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"z"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"z");
    }
}
        
- (void)test1509
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"{"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"{"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"{");
    }
}
        
- (void)test1510
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(@[@[@"Character", @"􀀀"]]);
    for (NSString *state in @[@""]) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:@"􀀀"];
        tokenizer.state = StateNamed(state);
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", @"\\uDBC0\\uDC00");
    }
}

@end
