// This file was autogenerated from Tests/html5lib/tree-construction/entities01.dat

#import <XCTest/XCTest.h>
#import "HTMLTreeConstructionTestUtilities.h"

@interface TreeGenerationEntities01Tests : XCTestCase

@end

@implementation TreeGenerationEntities01Tests

- (void)test000
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&gt;BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO>BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test001
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&gtBAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO>BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test002
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&gt BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO> BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test003
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&gt;;;BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO>;;BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test004
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"I'm &notit; I tell you"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"I'm ¬it; I tell you\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test005
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"I'm &notin; I tell you"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"I'm ∉ I tell you\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test006
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO& BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO& BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test007
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&<BAR>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO&\"\n|     <bar>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test008
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&&&&gt;BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO&&&>BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test009
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#41;BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO)BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test010
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x41;BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOABAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test011
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#X41;BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOABAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test012
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO&#BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test013
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO&#ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test014
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xBAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOºR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test015
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO&#xZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test016
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#XZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO&#XZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test017
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#41BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO)BAR\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test018
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x41BAR"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO䆺R\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test019
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x41ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOAZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test020
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0000;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO�ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test021
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0078;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOxZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test022
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0079;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOyZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test023
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0080;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO€ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test024
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0081;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test025
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0082;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO‚ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test026
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0083;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOƒZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test027
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0084;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO„ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test028
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0085;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO…ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test029
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0086;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO†ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test030
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0087;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO‡ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test031
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0088;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOˆZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test032
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0089;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO‰ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test033
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x008A;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOŠZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test034
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x008B;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO‹ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test035
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x008C;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOŒZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test036
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x008D;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test037
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x008E;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOŽZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test038
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x008F;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test039
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0090;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test040
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0091;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO‘ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test041
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0092;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO’ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test042
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0093;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO“ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test043
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0094;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO”ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test044
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0095;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO•ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test045
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0096;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO–ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test046
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0097;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO—ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test047
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0098;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO˜ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test048
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x0099;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO™ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test049
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x009A;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOšZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test050
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x009B;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO›ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test051
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x009C;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOœZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test052
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x009D;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test053
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x009E;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOžZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test054
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x009F;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOŸZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test055
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x00A0;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test056
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xD7FF;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO퟿ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test057
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xD800;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO�ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test058
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xD801;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO�ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test059
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xDFFE;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO�ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test060
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xDFFF;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO�ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test061
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xE000;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOOZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test062
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x10FFFE;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO􏿾ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test063
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x1087D4;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO􈟔ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test064
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x10FFFF;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO􏿿ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test065
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#x110000;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO�ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test066
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"FOO&#xFFFFFF;ZOO"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"FOO�ZOO\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

@end
