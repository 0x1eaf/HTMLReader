// This file was autogenerated from Tests/html5lib/tree-construction/doctype01.dat

#import <XCTest/XCTest.h>
#import "HTMLTreeConstructionTestUtilities.h"

@interface TreeGenerationDoctype01Tests : XCTestCase

@end

@implementation TreeGenerationDoctype01Tests

- (void)test000
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test001
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!dOctYpE HtMl>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test002
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPEhtml>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test003
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE >\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 3, fixture);
}

- (void)test004
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE >Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE >\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test005
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test006
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato >Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test007
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato taco>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test008
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato taco \"ddd>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test009
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato sYstEM>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test010
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato sYstEM    >Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test011
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE   potato       sYstEM  ggg>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test012
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato SYSTEM taco  >Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test013
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato SYSTEM 'taco\"'>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato \"\" \"taco\"\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test014
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato SYSTEM \"taco\">Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato \"\" \"taco\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test015
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato SYSTEM \"tai'co\">Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato \"\" \"tai'co\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test016
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato SYSTEMtaco \"ddd\">Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test017
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato grass SYSTEM taco>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test018
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato pUbLIc>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test019
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato pUbLIc >Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test020
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato pUbLIcgoof>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test021
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato PUBLIC goof>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test022
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato PUBLIC \"go'of\">Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato \"go'of\" \"\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test023
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato PUBLIC 'go'of'>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato \"go\" \"\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test024
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato PUBLIC 'go:hh   of' >Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato \"go:hh   of\" \"\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test025
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE potato PUBLIC \"W3C-//dfdf\" SYSTEM ggg>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE potato \"W3C-//dfdf\" \"\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test026
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n   \"http://www.w3.org/TR/html4/strict.dtd\">Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test027
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE ...>Hello"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE ...>\n| <html>\n|   <head>\n|   <body>\n|     \"Hello\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test028
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test029
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test030
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE root-element [SYSTEM OR PUBLIC FPI] \"uri\" [ \n<!-- internal declarations -->\n]>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE root-element>\n| <html>\n|   <head>\n|   <body>\n|     \"]>\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test031
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html PUBLIC\n  \"-//WAPFORUM//DTD XHTML Mobile 1.0//EN\"\n    \"http://www.wapforum.org/DTD/xhtml-mobile10.dtd\">"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//WAPFORUM//DTD XHTML Mobile 1.0//EN\" \"http://www.wapforum.org/DTD/xhtml-mobile10.dtd\">\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test032
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE HTML SYSTEM \"http://www.w3.org/DTD/HTML4-strict.dtd\"><body><b>Mine!</b></body>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"\" \"http://www.w3.org/DTD/HTML4-strict.dtd\">\n| <html>\n|   <head>\n|   <body>\n|     <b>\n|       \"Mine!\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test033
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\"http://www.w3.org/TR/html4/strict.dtd\">"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test034
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"'http://www.w3.org/TR/html4/strict.dtd'>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test035
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE HTML PUBLIC\"-//W3C//DTD HTML 4.01//EN\"'http://www.w3.org/TR/html4/strict.dtd'>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test036
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE HTML PUBLIC'-//W3C//DTD HTML 4.01//EN''http://www.w3.org/TR/html4/strict.dtd'>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

@end
