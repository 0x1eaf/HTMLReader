// This file was autogenerated from Tests/html5lib/tree-construction/tests2.dat

#import <XCTest/XCTest.h>
#import "HTMLTreeConstructionTestUtilities.h"

@interface TreeGenerationTests02Tests : XCTestCase

@end

@implementation TreeGenerationTests02Tests

- (void)test000
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>Test"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"Test\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test001
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<textarea>test</div>test"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     <textarea>\n|       \"test</div>test\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test002
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<table><td>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     <table>\n|       <tbody>\n|         <tr>\n|           <td>\n");
    HTMLAssertParserState(parser, 3, fixture);
}

- (void)test003
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<table><td>test</tbody></table>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     <table>\n|       <tbody>\n|         <tr>\n|           <td>\n|             \"test\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test004
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<frame>test"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"test\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test005
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><frameset>test"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <frameset>\n");
    HTMLAssertParserState(parser, 5, fixture);
}

- (void)test006
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><frameset><!DOCTYPE html>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <frameset>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test007
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><font><p><b>test</font>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <font>\n|     <p>\n|       <font>\n|         <b>\n|           \"test\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test008
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><dt><div><dd>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <dt>\n|       <div>\n|     <dd>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test009
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<script></x"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|     <script>\n|       \"</x\"\n|   <body>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test010
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<table><plaintext><td>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     <plaintext>\n|       \"<td>\"\n|     <table>\n");
    HTMLAssertParserState(parser, 7, fixture);
}

- (void)test011
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<plaintext></plaintext>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     <plaintext>\n|       \"</plaintext>\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test012
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><table><tr>TEST"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"TEST\"\n|     <table>\n|       <tbody>\n|         <tr>\n");
    HTMLAssertParserState(parser, 5, fixture);
}

- (void)test013
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><body t1=1><body t2=2><body t3=3 t4=4>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     t1=\"1\"\n|     t2=\"2\"\n|     t3=\"3\"\n|     t4=\"4\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test014
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"</b test"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test015
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html></b test<b &=&amp>X"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"X\"\n");
    HTMLAssertParserState(parser, 4, fixture);
}

- (void)test016
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!doctypehtml><scrIPt type=text/x-foobar;baz>X</SCRipt"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|     <script>\n|       type=\"text/x-foobar;baz\"\n|       \"X</SCRipt\"\n|   <body>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test017
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"&\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test018
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&#"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"&#\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test019
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&#X"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"&#X\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test020
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&#x"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"&#x\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test021
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&#45"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"-\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test022
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&x-test"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"&x-test\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test023
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!doctypehtml><p><li>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <p>\n|     <li>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test024
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!doctypehtml><p><dt>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <p>\n|     <dt>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test025
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!doctypehtml><p><dd>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <p>\n|     <dd>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test026
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!doctypehtml><p><form>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <p>\n|     <form>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test027
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><p></P>X"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <p>\n|     \"X\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test028
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&AMP"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"&\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test029
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"&AMp;"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"&AMp;\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test030
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><html><head></head><body><thisISasillyTESTelementNameToMakeSureCrazyTagNamesArePARSEDcorrectLY>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <thisisasillytestelementnametomakesurecrazytagnamesareparsedcorrectly>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test031
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>X</body>X"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"XX\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test032
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><!-- X"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <!--  X -->\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test033
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><table><caption>test TEST</caption><td>test"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <table>\n|       <caption>\n|         \"test TEST\"\n|       <tbody>\n|         <tr>\n|           <td>\n|             \"test\"\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test034
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><select><option><optgroup>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <select>\n|       <option>\n|       <optgroup>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test035
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><select><optgroup><option></optgroup><option><select><option>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <select>\n|       <optgroup>\n|         <option>\n|       <option>\n|     <option>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test036
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><select><optgroup><option><optgroup>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <select>\n|       <optgroup>\n|         <option>\n|       <optgroup>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test037
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><datalist><option>foo</datalist>bar"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <datalist>\n|       <option>\n|         \"foo\"\n|     \"bar\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test038
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><font><input><input></font>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <font>\n|       <input>\n|       <input>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test039
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><!-- XXX - XXX -->"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <!--  XXX - XXX  -->\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test040
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><!-- XXX - XXX"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <!--  XXX - XXX -->\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test041
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><!-- XXX - XXX - XXX -->"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <!--  XXX - XXX - XXX  -->\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test042
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<isindex test=x name=x>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     <form>\n|       <hr>\n|       <label>\n|         \"This is a searchable index. Enter search keywords: \"\n|         <input>\n|           name=\"isindex\"\n|           test=\"x\"\n|       <hr>\n");
    HTMLAssertParserState(parser, 2, fixture);
}

- (void)test043
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"test\ntest"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n|     \"test\ntest\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test044
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><body><title>test</body></title>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <title>\n|       \"test</body>\"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test045
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><body><title>X</title><meta name=z><link rel=foo><style>\nx { content:\"</style\" } </style>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <title>\n|       \"X\"\n|     <meta>\n|       name=\"z\"\n|     <link>\n|       rel=\"foo\"\n|     <style>\n|       \"\nx { content:\"</style\" } \"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test046
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><select><optgroup></optgroup></select>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <select>\n|       <optgroup>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test047
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@" \n "];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test048
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>  <html>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test049
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><script>\n</script>  <title>x</title>  </head>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|     <script>\n|       \"\n\"\n|     \"  \"\n|     <title>\n|       \"x\"\n|     \"  \"\n|   <body>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test050
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><html><body><html id=x>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   id=\"x\"\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test051
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>X</body><html id=\"x\">"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   id=\"x\"\n|   <head>\n|   <body>\n|     \"X\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test052
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><head><html id=x>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   id=\"x\"\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test053
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>X</html>X"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"XX\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test054
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>X</html> "];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"X \"\n");
    HTMLAssertParserState(parser, 0, fixture);
}

- (void)test055
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>X</html><p>X"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"X\"\n|     <p>\n|       \"X\"\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test056
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html>X<p/x/y/z>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     \"X\"\n|     <p>\n|       x=\"\"\n|       y=\"\"\n|       z=\"\"\n");
    HTMLAssertParserState(parser, 3, fixture);
}

- (void)test057
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><!--x--"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <!-- x -->\n| <html>\n|   <head>\n|   <body>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test058
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE html><table><tr><td></p></table>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <table>\n|       <tbody>\n|         <tr>\n|           <td>\n|             <p>\n");
    HTMLAssertParserState(parser, 1, fixture);
}

- (void)test059
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!DOCTYPE <!DOCTYPE HTML>><!--<!--x-->-->"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE <!doctype>\n| <html>\n|   <head>\n|   <body>\n|     \">\"\n|     <!-- <!--x -->\n|     \"-->\"\n");
    HTMLAssertParserState(parser, 3, fixture);
}

- (void)test060
{
    HTMLParser *parser = [[HTMLParser alloc] initWithString:@"<!doctype html><div><form></form><div></div></div>"];
    NSArray *fixture = ReifiedTreeForTestDocument(@"| <!DOCTYPE html>\n| <html>\n|   <head>\n|   <body>\n|     <div>\n|       <form>\n|       <div>\n");
    HTMLAssertParserState(parser, 0, fixture);
}

@end
