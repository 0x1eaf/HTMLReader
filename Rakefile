require 'json'

desc "Generate OCUnit tests from html5lib tests"
task :gentests

FileList['Tests/html5lib/tokenizer/*.test'].each do |testpath|
  basename = File.basename(testpath, '.test')
  name = "Tokenizer#{basename[0].upcase}#{basename[1..-1]}Tests"
  json = JSON.parse(File.read(testpath))
  next if json['tests'].nil?
  objcpath = "Tests/Tokenizer/#{name}.m"
  file objcpath => [testpath, 'Rakefile'] do
    File.open(objcpath, 'w') do |objc|
      objc << <<-END
// This file was autogenerated from #{testpath}.

#import <SenTestingKit/SenTestingKit.h>
#import "HTMLTokenizerTestUtilities.h"

@interface #{name} : SenTestCase

@end

@implementation #{name}
END
      json['tests'].each_with_index do |test, i|
        input = happy_universal_character_names("@#{JSON.dump(test['input'])}")
        output = objc_literalize(JSON.dump(test['output']))
        states = objc_literalize(JSON.dump(test['initialStates'] || ['']))
        description = "@#{JSON.dump(test['description'])}"
        objc << <<-END
        
- (void)test#{i}
{
    NSArray *expectedTokens = ReifiedTokensForTestTokens(#{output});
    for (NSString *state in #{states}) {
        HTMLTokenizer *tokenizer = [[HTMLTokenizer alloc] initWithString:#{input} state:StateNamed(state)];
        STAssertEqualObjects(tokenizer.allObjects, expectedTokens, @"%@", #{description});
    }
}
END
      end
      objc << "\n@end\n"
    end
  end
  task :gentests => [objcpath]
end

def happy_universal_character_names(string)
  string.gsub(/\\u(\h+)/) do |match|
    case $1.to_i(16)
    when 0..7, 0xB, 0xE..0x19, 0x1A..0x1F
      "\\x#{$1[-2..-1]}"
    else
      "\\U#{'0' * (8 - $1.length)}#{$1}"
    end
  end
end

def objc_literalize(string)
  happy_universal_character_names(string)
    .gsub(/[\[\{]/, '@\0')
    .gsub(/(?<!\\)"((?:\\"|[^"])*)"/, '@"\1"') # quoted strings
    .gsub('null', '[NSNull null]')
    .gsub('true', '@YES')
    .gsub('false', '@NO')
end

task :default => [:gentests]
